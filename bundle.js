/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/immutable/dist/immutable.es.js":
/*!*****************************************************!*\
  !*** ./node_modules/immutable/dist/immutable.es.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Collection\": () => (/* binding */ Collection),\n/* harmony export */   \"Iterable\": () => (/* binding */ Iterable),\n/* harmony export */   \"List\": () => (/* binding */ List),\n/* harmony export */   \"Map\": () => (/* binding */ Map),\n/* harmony export */   \"OrderedMap\": () => (/* binding */ OrderedMap),\n/* harmony export */   \"OrderedSet\": () => (/* binding */ OrderedSet),\n/* harmony export */   \"Range\": () => (/* binding */ Range),\n/* harmony export */   \"Record\": () => (/* binding */ Record),\n/* harmony export */   \"Repeat\": () => (/* binding */ Repeat),\n/* harmony export */   \"Seq\": () => (/* binding */ Seq),\n/* harmony export */   \"Set\": () => (/* binding */ Set),\n/* harmony export */   \"Stack\": () => (/* binding */ Stack),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   \"fromJS\": () => (/* binding */ fromJS),\n/* harmony export */   \"get\": () => (/* binding */ get),\n/* harmony export */   \"getIn\": () => (/* binding */ getIn$1),\n/* harmony export */   \"has\": () => (/* binding */ has),\n/* harmony export */   \"hasIn\": () => (/* binding */ hasIn$1),\n/* harmony export */   \"hash\": () => (/* binding */ hash),\n/* harmony export */   \"is\": () => (/* binding */ is),\n/* harmony export */   \"isAssociative\": () => (/* binding */ isAssociative),\n/* harmony export */   \"isCollection\": () => (/* binding */ isCollection),\n/* harmony export */   \"isImmutable\": () => (/* binding */ isImmutable),\n/* harmony export */   \"isIndexed\": () => (/* binding */ isIndexed),\n/* harmony export */   \"isKeyed\": () => (/* binding */ isKeyed),\n/* harmony export */   \"isList\": () => (/* binding */ isList),\n/* harmony export */   \"isMap\": () => (/* binding */ isMap),\n/* harmony export */   \"isOrdered\": () => (/* binding */ isOrdered),\n/* harmony export */   \"isOrderedMap\": () => (/* binding */ isOrderedMap),\n/* harmony export */   \"isOrderedSet\": () => (/* binding */ isOrderedSet),\n/* harmony export */   \"isPlainObject\": () => (/* binding */ isPlainObject),\n/* harmony export */   \"isRecord\": () => (/* binding */ isRecord),\n/* harmony export */   \"isSeq\": () => (/* binding */ isSeq),\n/* harmony export */   \"isSet\": () => (/* binding */ isSet),\n/* harmony export */   \"isStack\": () => (/* binding */ isStack),\n/* harmony export */   \"isValueObject\": () => (/* binding */ isValueObject),\n/* harmony export */   \"merge\": () => (/* binding */ merge),\n/* harmony export */   \"mergeDeep\": () => (/* binding */ mergeDeep$1),\n/* harmony export */   \"mergeDeepWith\": () => (/* binding */ mergeDeepWith$1),\n/* harmony export */   \"mergeWith\": () => (/* binding */ mergeWith),\n/* harmony export */   \"remove\": () => (/* binding */ remove),\n/* harmony export */   \"removeIn\": () => (/* binding */ removeIn),\n/* harmony export */   \"set\": () => (/* binding */ set),\n/* harmony export */   \"setIn\": () => (/* binding */ setIn$1),\n/* harmony export */   \"update\": () => (/* binding */ update$1),\n/* harmony export */   \"updateIn\": () => (/* binding */ updateIn$1),\n/* harmony export */   \"version\": () => (/* binding */ version)\n/* harmony export */ });\n/**\n * MIT License\n * \n * Copyright (c) 2014-present, Lee Byron and other contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nvar DELETE = 'delete';\n\n// Constants describing the size of trie nodes.\nvar SHIFT = 5; // Resulted in best performance after ______?\nvar SIZE = 1 << SHIFT;\nvar MASK = SIZE - 1;\n\n// A consistent shared value representing \"not set\" which equals nothing other\n// than itself, and nothing that could be provided externally.\nvar NOT_SET = {};\n\n// Boolean references, Rough equivalent of `bool &`.\nfunction MakeRef() {\n  return { value: false };\n}\n\nfunction SetRef(ref) {\n  if (ref) {\n    ref.value = true;\n  }\n}\n\n// A function which returns a value representing an \"owner\" for transient writes\n// to tries. The return value will only ever equal itself, and will not equal\n// the return of any subsequent call of this function.\nfunction OwnerID() {}\n\nfunction ensureSize(iter) {\n  if (iter.size === undefined) {\n    iter.size = iter.__iterate(returnTrue);\n  }\n  return iter.size;\n}\n\nfunction wrapIndex(iter, index) {\n  // This implements \"is array index\" which the ECMAString spec defines as:\n  //\n  //     A String property name P is an array index if and only if\n  //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n  //     to 2^32−1.\n  //\n  // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects\n  if (typeof index !== 'number') {\n    var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32\n    if ('' + uint32Index !== index || uint32Index === 4294967295) {\n      return NaN;\n    }\n    index = uint32Index;\n  }\n  return index < 0 ? ensureSize(iter) + index : index;\n}\n\nfunction returnTrue() {\n  return true;\n}\n\nfunction wholeSlice(begin, end, size) {\n  return (\n    ((begin === 0 && !isNeg(begin)) ||\n      (size !== undefined && begin <= -size)) &&\n    (end === undefined || (size !== undefined && end >= size))\n  );\n}\n\nfunction resolveBegin(begin, size) {\n  return resolveIndex(begin, size, 0);\n}\n\nfunction resolveEnd(end, size) {\n  return resolveIndex(end, size, size);\n}\n\nfunction resolveIndex(index, size, defaultIndex) {\n  // Sanitize indices using this shorthand for ToInt32(argument)\n  // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n  return index === undefined\n    ? defaultIndex\n    : isNeg(index)\n    ? size === Infinity\n      ? size\n      : Math.max(0, size + index) | 0\n    : size === undefined || size === index\n    ? index\n    : Math.min(size, index) | 0;\n}\n\nfunction isNeg(value) {\n  // Account for -0 which is negative, but not less than 0.\n  return value < 0 || (value === 0 && 1 / value === -Infinity);\n}\n\nvar IS_COLLECTION_SYMBOL = '@@__IMMUTABLE_ITERABLE__@@';\n\nfunction isCollection(maybeCollection) {\n  return Boolean(maybeCollection && maybeCollection[IS_COLLECTION_SYMBOL]);\n}\n\nvar IS_KEYED_SYMBOL = '@@__IMMUTABLE_KEYED__@@';\n\nfunction isKeyed(maybeKeyed) {\n  return Boolean(maybeKeyed && maybeKeyed[IS_KEYED_SYMBOL]);\n}\n\nvar IS_INDEXED_SYMBOL = '@@__IMMUTABLE_INDEXED__@@';\n\nfunction isIndexed(maybeIndexed) {\n  return Boolean(maybeIndexed && maybeIndexed[IS_INDEXED_SYMBOL]);\n}\n\nfunction isAssociative(maybeAssociative) {\n  return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n}\n\nvar Collection = function Collection(value) {\n  return isCollection(value) ? value : Seq(value);\n};\n\nvar KeyedCollection = /*@__PURE__*/(function (Collection) {\n  function KeyedCollection(value) {\n    return isKeyed(value) ? value : KeyedSeq(value);\n  }\n\n  if ( Collection ) KeyedCollection.__proto__ = Collection;\n  KeyedCollection.prototype = Object.create( Collection && Collection.prototype );\n  KeyedCollection.prototype.constructor = KeyedCollection;\n\n  return KeyedCollection;\n}(Collection));\n\nvar IndexedCollection = /*@__PURE__*/(function (Collection) {\n  function IndexedCollection(value) {\n    return isIndexed(value) ? value : IndexedSeq(value);\n  }\n\n  if ( Collection ) IndexedCollection.__proto__ = Collection;\n  IndexedCollection.prototype = Object.create( Collection && Collection.prototype );\n  IndexedCollection.prototype.constructor = IndexedCollection;\n\n  return IndexedCollection;\n}(Collection));\n\nvar SetCollection = /*@__PURE__*/(function (Collection) {\n  function SetCollection(value) {\n    return isCollection(value) && !isAssociative(value) ? value : SetSeq(value);\n  }\n\n  if ( Collection ) SetCollection.__proto__ = Collection;\n  SetCollection.prototype = Object.create( Collection && Collection.prototype );\n  SetCollection.prototype.constructor = SetCollection;\n\n  return SetCollection;\n}(Collection));\n\nCollection.Keyed = KeyedCollection;\nCollection.Indexed = IndexedCollection;\nCollection.Set = SetCollection;\n\nvar IS_SEQ_SYMBOL = '@@__IMMUTABLE_SEQ__@@';\n\nfunction isSeq(maybeSeq) {\n  return Boolean(maybeSeq && maybeSeq[IS_SEQ_SYMBOL]);\n}\n\nvar IS_RECORD_SYMBOL = '@@__IMMUTABLE_RECORD__@@';\n\nfunction isRecord(maybeRecord) {\n  return Boolean(maybeRecord && maybeRecord[IS_RECORD_SYMBOL]);\n}\n\nfunction isImmutable(maybeImmutable) {\n  return isCollection(maybeImmutable) || isRecord(maybeImmutable);\n}\n\nvar IS_ORDERED_SYMBOL = '@@__IMMUTABLE_ORDERED__@@';\n\nfunction isOrdered(maybeOrdered) {\n  return Boolean(maybeOrdered && maybeOrdered[IS_ORDERED_SYMBOL]);\n}\n\nvar ITERATE_KEYS = 0;\nvar ITERATE_VALUES = 1;\nvar ITERATE_ENTRIES = 2;\n\nvar REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\n\nvar ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n\nvar Iterator = function Iterator(next) {\n  this.next = next;\n};\n\nIterator.prototype.toString = function toString () {\n  return '[Iterator]';\n};\n\nIterator.KEYS = ITERATE_KEYS;\nIterator.VALUES = ITERATE_VALUES;\nIterator.ENTRIES = ITERATE_ENTRIES;\n\nIterator.prototype.inspect = Iterator.prototype.toSource = function () {\n  return this.toString();\n};\nIterator.prototype[ITERATOR_SYMBOL] = function () {\n  return this;\n};\n\nfunction iteratorValue(type, k, v, iteratorResult) {\n  var value = type === 0 ? k : type === 1 ? v : [k, v];\n  iteratorResult\n    ? (iteratorResult.value = value)\n    : (iteratorResult = {\n        value: value,\n        done: false,\n      });\n  return iteratorResult;\n}\n\nfunction iteratorDone() {\n  return { value: undefined, done: true };\n}\n\nfunction hasIterator(maybeIterable) {\n  if (Array.isArray(maybeIterable)) {\n    // IE11 trick as it does not support `Symbol.iterator`\n    return true;\n  }\n\n  return !!getIteratorFn(maybeIterable);\n}\n\nfunction isIterator(maybeIterator) {\n  return maybeIterator && typeof maybeIterator.next === 'function';\n}\n\nfunction getIterator(iterable) {\n  var iteratorFn = getIteratorFn(iterable);\n  return iteratorFn && iteratorFn.call(iterable);\n}\n\nfunction getIteratorFn(iterable) {\n  var iteratorFn =\n    iterable &&\n    ((REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||\n      iterable[FAUX_ITERATOR_SYMBOL]);\n  if (typeof iteratorFn === 'function') {\n    return iteratorFn;\n  }\n}\n\nfunction isEntriesIterable(maybeIterable) {\n  var iteratorFn = getIteratorFn(maybeIterable);\n  return iteratorFn && iteratorFn === maybeIterable.entries;\n}\n\nfunction isKeysIterable(maybeIterable) {\n  var iteratorFn = getIteratorFn(maybeIterable);\n  return iteratorFn && iteratorFn === maybeIterable.keys;\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isArrayLike(value) {\n  if (Array.isArray(value) || typeof value === 'string') {\n    return true;\n  }\n\n  return (\n    value &&\n    typeof value === 'object' &&\n    Number.isInteger(value.length) &&\n    value.length >= 0 &&\n    (value.length === 0\n      ? // Only {length: 0} is considered Array-like.\n        Object.keys(value).length === 1\n      : // An object is only Array-like if it has a property where the last value\n        // in the array-like may be found (which could be undefined).\n        value.hasOwnProperty(value.length - 1))\n  );\n}\n\nvar Seq = /*@__PURE__*/(function (Collection) {\n  function Seq(value) {\n    return value === undefined || value === null\n      ? emptySequence()\n      : isImmutable(value)\n      ? value.toSeq()\n      : seqFromValue(value);\n  }\n\n  if ( Collection ) Seq.__proto__ = Collection;\n  Seq.prototype = Object.create( Collection && Collection.prototype );\n  Seq.prototype.constructor = Seq;\n\n  Seq.prototype.toSeq = function toSeq () {\n    return this;\n  };\n\n  Seq.prototype.toString = function toString () {\n    return this.__toString('Seq {', '}');\n  };\n\n  Seq.prototype.cacheResult = function cacheResult () {\n    if (!this._cache && this.__iterateUncached) {\n      this._cache = this.entrySeq().toArray();\n      this.size = this._cache.length;\n    }\n    return this;\n  };\n\n  // abstract __iterateUncached(fn, reverse)\n\n  Seq.prototype.__iterate = function __iterate (fn, reverse) {\n    var cache = this._cache;\n    if (cache) {\n      var size = cache.length;\n      var i = 0;\n      while (i !== size) {\n        var entry = cache[reverse ? size - ++i : i++];\n        if (fn(entry[1], entry[0], this) === false) {\n          break;\n        }\n      }\n      return i;\n    }\n    return this.__iterateUncached(fn, reverse);\n  };\n\n  // abstract __iteratorUncached(type, reverse)\n\n  Seq.prototype.__iterator = function __iterator (type, reverse) {\n    var cache = this._cache;\n    if (cache) {\n      var size = cache.length;\n      var i = 0;\n      return new Iterator(function () {\n        if (i === size) {\n          return iteratorDone();\n        }\n        var entry = cache[reverse ? size - ++i : i++];\n        return iteratorValue(type, entry[0], entry[1]);\n      });\n    }\n    return this.__iteratorUncached(type, reverse);\n  };\n\n  return Seq;\n}(Collection));\n\nvar KeyedSeq = /*@__PURE__*/(function (Seq) {\n  function KeyedSeq(value) {\n    return value === undefined || value === null\n      ? emptySequence().toKeyedSeq()\n      : isCollection(value)\n      ? isKeyed(value)\n        ? value.toSeq()\n        : value.fromEntrySeq()\n      : isRecord(value)\n      ? value.toSeq()\n      : keyedSeqFromValue(value);\n  }\n\n  if ( Seq ) KeyedSeq.__proto__ = Seq;\n  KeyedSeq.prototype = Object.create( Seq && Seq.prototype );\n  KeyedSeq.prototype.constructor = KeyedSeq;\n\n  KeyedSeq.prototype.toKeyedSeq = function toKeyedSeq () {\n    return this;\n  };\n\n  return KeyedSeq;\n}(Seq));\n\nvar IndexedSeq = /*@__PURE__*/(function (Seq) {\n  function IndexedSeq(value) {\n    return value === undefined || value === null\n      ? emptySequence()\n      : isCollection(value)\n      ? isKeyed(value)\n        ? value.entrySeq()\n        : value.toIndexedSeq()\n      : isRecord(value)\n      ? value.toSeq().entrySeq()\n      : indexedSeqFromValue(value);\n  }\n\n  if ( Seq ) IndexedSeq.__proto__ = Seq;\n  IndexedSeq.prototype = Object.create( Seq && Seq.prototype );\n  IndexedSeq.prototype.constructor = IndexedSeq;\n\n  IndexedSeq.of = function of (/*...values*/) {\n    return IndexedSeq(arguments);\n  };\n\n  IndexedSeq.prototype.toIndexedSeq = function toIndexedSeq () {\n    return this;\n  };\n\n  IndexedSeq.prototype.toString = function toString () {\n    return this.__toString('Seq [', ']');\n  };\n\n  return IndexedSeq;\n}(Seq));\n\nvar SetSeq = /*@__PURE__*/(function (Seq) {\n  function SetSeq(value) {\n    return (\n      isCollection(value) && !isAssociative(value) ? value : IndexedSeq(value)\n    ).toSetSeq();\n  }\n\n  if ( Seq ) SetSeq.__proto__ = Seq;\n  SetSeq.prototype = Object.create( Seq && Seq.prototype );\n  SetSeq.prototype.constructor = SetSeq;\n\n  SetSeq.of = function of (/*...values*/) {\n    return SetSeq(arguments);\n  };\n\n  SetSeq.prototype.toSetSeq = function toSetSeq () {\n    return this;\n  };\n\n  return SetSeq;\n}(Seq));\n\nSeq.isSeq = isSeq;\nSeq.Keyed = KeyedSeq;\nSeq.Set = SetSeq;\nSeq.Indexed = IndexedSeq;\n\nSeq.prototype[IS_SEQ_SYMBOL] = true;\n\n// #pragma Root Sequences\n\nvar ArraySeq = /*@__PURE__*/(function (IndexedSeq) {\n  function ArraySeq(array) {\n    this._array = array;\n    this.size = array.length;\n  }\n\n  if ( IndexedSeq ) ArraySeq.__proto__ = IndexedSeq;\n  ArraySeq.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );\n  ArraySeq.prototype.constructor = ArraySeq;\n\n  ArraySeq.prototype.get = function get (index, notSetValue) {\n    return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n  };\n\n  ArraySeq.prototype.__iterate = function __iterate (fn, reverse) {\n    var array = this._array;\n    var size = array.length;\n    var i = 0;\n    while (i !== size) {\n      var ii = reverse ? size - ++i : i++;\n      if (fn(array[ii], ii, this) === false) {\n        break;\n      }\n    }\n    return i;\n  };\n\n  ArraySeq.prototype.__iterator = function __iterator (type, reverse) {\n    var array = this._array;\n    var size = array.length;\n    var i = 0;\n    return new Iterator(function () {\n      if (i === size) {\n        return iteratorDone();\n      }\n      var ii = reverse ? size - ++i : i++;\n      return iteratorValue(type, ii, array[ii]);\n    });\n  };\n\n  return ArraySeq;\n}(IndexedSeq));\n\nvar ObjectSeq = /*@__PURE__*/(function (KeyedSeq) {\n  function ObjectSeq(object) {\n    var keys = Object.keys(object).concat(\n      Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(object) : []\n    );\n    this._object = object;\n    this._keys = keys;\n    this.size = keys.length;\n  }\n\n  if ( KeyedSeq ) ObjectSeq.__proto__ = KeyedSeq;\n  ObjectSeq.prototype = Object.create( KeyedSeq && KeyedSeq.prototype );\n  ObjectSeq.prototype.constructor = ObjectSeq;\n\n  ObjectSeq.prototype.get = function get (key, notSetValue) {\n    if (notSetValue !== undefined && !this.has(key)) {\n      return notSetValue;\n    }\n    return this._object[key];\n  };\n\n  ObjectSeq.prototype.has = function has (key) {\n    return hasOwnProperty.call(this._object, key);\n  };\n\n  ObjectSeq.prototype.__iterate = function __iterate (fn, reverse) {\n    var object = this._object;\n    var keys = this._keys;\n    var size = keys.length;\n    var i = 0;\n    while (i !== size) {\n      var key = keys[reverse ? size - ++i : i++];\n      if (fn(object[key], key, this) === false) {\n        break;\n      }\n    }\n    return i;\n  };\n\n  ObjectSeq.prototype.__iterator = function __iterator (type, reverse) {\n    var object = this._object;\n    var keys = this._keys;\n    var size = keys.length;\n    var i = 0;\n    return new Iterator(function () {\n      if (i === size) {\n        return iteratorDone();\n      }\n      var key = keys[reverse ? size - ++i : i++];\n      return iteratorValue(type, key, object[key]);\n    });\n  };\n\n  return ObjectSeq;\n}(KeyedSeq));\nObjectSeq.prototype[IS_ORDERED_SYMBOL] = true;\n\nvar CollectionSeq = /*@__PURE__*/(function (IndexedSeq) {\n  function CollectionSeq(collection) {\n    this._collection = collection;\n    this.size = collection.length || collection.size;\n  }\n\n  if ( IndexedSeq ) CollectionSeq.__proto__ = IndexedSeq;\n  CollectionSeq.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );\n  CollectionSeq.prototype.constructor = CollectionSeq;\n\n  CollectionSeq.prototype.__iterateUncached = function __iterateUncached (fn, reverse) {\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var collection = this._collection;\n    var iterator = getIterator(collection);\n    var iterations = 0;\n    if (isIterator(iterator)) {\n      var step;\n      while (!(step = iterator.next()).done) {\n        if (fn(step.value, iterations++, this) === false) {\n          break;\n        }\n      }\n    }\n    return iterations;\n  };\n\n  CollectionSeq.prototype.__iteratorUncached = function __iteratorUncached (type, reverse) {\n    if (reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    var collection = this._collection;\n    var iterator = getIterator(collection);\n    if (!isIterator(iterator)) {\n      return new Iterator(iteratorDone);\n    }\n    var iterations = 0;\n    return new Iterator(function () {\n      var step = iterator.next();\n      return step.done ? step : iteratorValue(type, iterations++, step.value);\n    });\n  };\n\n  return CollectionSeq;\n}(IndexedSeq));\n\n// # pragma Helper functions\n\nvar EMPTY_SEQ;\n\nfunction emptySequence() {\n  return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n}\n\nfunction keyedSeqFromValue(value) {\n  var seq = maybeIndexedSeqFromValue(value);\n  if (seq) {\n    return seq.fromEntrySeq();\n  }\n  if (typeof value === 'object') {\n    return new ObjectSeq(value);\n  }\n  throw new TypeError(\n    'Expected Array or collection object of [k, v] entries, or keyed object: ' +\n      value\n  );\n}\n\nfunction indexedSeqFromValue(value) {\n  var seq = maybeIndexedSeqFromValue(value);\n  if (seq) {\n    return seq;\n  }\n  throw new TypeError(\n    'Expected Array or collection object of values: ' + value\n  );\n}\n\nfunction seqFromValue(value) {\n  var seq = maybeIndexedSeqFromValue(value);\n  if (seq) {\n    return isEntriesIterable(value)\n      ? seq.fromEntrySeq()\n      : isKeysIterable(value)\n      ? seq.toSetSeq()\n      : seq;\n  }\n  if (typeof value === 'object') {\n    return new ObjectSeq(value);\n  }\n  throw new TypeError(\n    'Expected Array or collection object of values, or keyed object: ' + value\n  );\n}\n\nfunction maybeIndexedSeqFromValue(value) {\n  return isArrayLike(value)\n    ? new ArraySeq(value)\n    : hasIterator(value)\n    ? new CollectionSeq(value)\n    : undefined;\n}\n\nvar IS_MAP_SYMBOL = '@@__IMMUTABLE_MAP__@@';\n\nfunction isMap(maybeMap) {\n  return Boolean(maybeMap && maybeMap[IS_MAP_SYMBOL]);\n}\n\nfunction isOrderedMap(maybeOrderedMap) {\n  return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n}\n\nfunction isValueObject(maybeValue) {\n  return Boolean(\n    maybeValue &&\n      typeof maybeValue.equals === 'function' &&\n      typeof maybeValue.hashCode === 'function'\n  );\n}\n\n/**\n * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n *\n * NaN is considered the same as NaN, however -0 and 0 are considered the same\n * value, which is different from the algorithm described by\n * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n *\n * This is extended further to allow Objects to describe the values they\n * represent, by way of `valueOf` or `equals` (and `hashCode`).\n *\n * Note: because of this extension, the key equality of Immutable.Map and the\n * value equality of Immutable.Set will differ from ES6 Map and Set.\n *\n * ### Defining custom values\n *\n * The easiest way to describe the value an object represents is by implementing\n * `valueOf`. For example, `Date` represents a value by returning a unix\n * timestamp for `valueOf`:\n *\n *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n *     var date2 = new Date(1234567890000);\n *     date1.valueOf(); // 1234567890000\n *     assert( date1 !== date2 );\n *     assert( Immutable.is( date1, date2 ) );\n *\n * Note: overriding `valueOf` may have other implications if you use this object\n * where JavaScript expects a primitive, such as implicit string coercion.\n *\n * For more complex types, especially collections, implementing `valueOf` may\n * not be performant. An alternative is to implement `equals` and `hashCode`.\n *\n * `equals` takes another object, presumably of similar type, and returns true\n * if it is equal. Equality is symmetrical, so the same result should be\n * returned if this and the argument are flipped.\n *\n *     assert( a.equals(b) === b.equals(a) );\n *\n * `hashCode` returns a 32bit integer number representing the object which will\n * be used to determine how to store the value object in a Map or Set. You must\n * provide both or neither methods, one must not exist without the other.\n *\n * Also, an important relationship between these methods must be upheld: if two\n * values are equal, they *must* return the same hashCode. If the values are not\n * equal, they might have the same hashCode; this is called a hash collision,\n * and while undesirable for performance reasons, it is acceptable.\n *\n *     if (a.equals(b)) {\n *       assert( a.hashCode() === b.hashCode() );\n *     }\n *\n * All Immutable collections are Value Objects: they implement `equals()`\n * and `hashCode()`.\n */\nfunction is(valueA, valueB) {\n  if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n    return true;\n  }\n  if (!valueA || !valueB) {\n    return false;\n  }\n  if (\n    typeof valueA.valueOf === 'function' &&\n    typeof valueB.valueOf === 'function'\n  ) {\n    valueA = valueA.valueOf();\n    valueB = valueB.valueOf();\n    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n      return true;\n    }\n    if (!valueA || !valueB) {\n      return false;\n    }\n  }\n  return !!(\n    isValueObject(valueA) &&\n    isValueObject(valueB) &&\n    valueA.equals(valueB)\n  );\n}\n\nvar imul =\n  typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2\n    ? Math.imul\n    : function imul(a, b) {\n        a |= 0; // int\n        b |= 0; // int\n        var c = a & 0xffff;\n        var d = b & 0xffff;\n        // Shift by 0 fixes the sign on the high part.\n        return (c * d + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0)) | 0; // int\n      };\n\n// v8 has an optimization for storing 31-bit signed numbers.\n// Values which have either 00 or 11 as the high order bits qualify.\n// This function drops the highest order bit in a signed number, maintaining\n// the sign bit.\nfunction smi(i32) {\n  return ((i32 >>> 1) & 0x40000000) | (i32 & 0xbfffffff);\n}\n\nvar defaultValueOf = Object.prototype.valueOf;\n\nfunction hash(o) {\n  if (o == null) {\n    return hashNullish(o);\n  }\n\n  if (typeof o.hashCode === 'function') {\n    // Drop any high bits from accidentally long hash codes.\n    return smi(o.hashCode(o));\n  }\n\n  var v = valueOf(o);\n\n  if (v == null) {\n    return hashNullish(v);\n  }\n\n  switch (typeof v) {\n    case 'boolean':\n      // The hash values for built-in constants are a 1 value for each 5-byte\n      // shift region expect for the first, which encodes the value. This\n      // reduces the odds of a hash collision for these common values.\n      return v ? 0x42108421 : 0x42108420;\n    case 'number':\n      return hashNumber(v);\n    case 'string':\n      return v.length > STRING_HASH_CACHE_MIN_STRLEN\n        ? cachedHashString(v)\n        : hashString(v);\n    case 'object':\n    case 'function':\n      return hashJSObj(v);\n    case 'symbol':\n      return hashSymbol(v);\n    default:\n      if (typeof v.toString === 'function') {\n        return hashString(v.toString());\n      }\n      throw new Error('Value type ' + typeof v + ' cannot be hashed.');\n  }\n}\n\nfunction hashNullish(nullish) {\n  return nullish === null ? 0x42108422 : /* undefined */ 0x42108423;\n}\n\n// Compress arbitrarily large numbers into smi hashes.\nfunction hashNumber(n) {\n  if (n !== n || n === Infinity) {\n    return 0;\n  }\n  var hash = n | 0;\n  if (hash !== n) {\n    hash ^= n * 0xffffffff;\n  }\n  while (n > 0xffffffff) {\n    n /= 0xffffffff;\n    hash ^= n;\n  }\n  return smi(hash);\n}\n\nfunction cachedHashString(string) {\n  var hashed = stringHashCache[string];\n  if (hashed === undefined) {\n    hashed = hashString(string);\n    if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n      STRING_HASH_CACHE_SIZE = 0;\n      stringHashCache = {};\n    }\n    STRING_HASH_CACHE_SIZE++;\n    stringHashCache[string] = hashed;\n  }\n  return hashed;\n}\n\n// http://jsperf.com/hashing-strings\nfunction hashString(string) {\n  // This is the hash from JVM\n  // The hash code for a string is computed as\n  // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n  // where s[i] is the ith character of the string and n is the length of\n  // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n  // (exclusive) by dropping high bits.\n  var hashed = 0;\n  for (var ii = 0; ii < string.length; ii++) {\n    hashed = (31 * hashed + string.charCodeAt(ii)) | 0;\n  }\n  return smi(hashed);\n}\n\nfunction hashSymbol(sym) {\n  var hashed = symbolMap[sym];\n  if (hashed !== undefined) {\n    return hashed;\n  }\n\n  hashed = nextHash();\n\n  symbolMap[sym] = hashed;\n\n  return hashed;\n}\n\nfunction hashJSObj(obj) {\n  var hashed;\n  if (usingWeakMap) {\n    hashed = weakMap.get(obj);\n    if (hashed !== undefined) {\n      return hashed;\n    }\n  }\n\n  hashed = obj[UID_HASH_KEY];\n  if (hashed !== undefined) {\n    return hashed;\n  }\n\n  if (!canDefineProperty) {\n    hashed = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n    if (hashed !== undefined) {\n      return hashed;\n    }\n\n    hashed = getIENodeHash(obj);\n    if (hashed !== undefined) {\n      return hashed;\n    }\n  }\n\n  hashed = nextHash();\n\n  if (usingWeakMap) {\n    weakMap.set(obj, hashed);\n  } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n    throw new Error('Non-extensible objects are not allowed as keys.');\n  } else if (canDefineProperty) {\n    Object.defineProperty(obj, UID_HASH_KEY, {\n      enumerable: false,\n      configurable: false,\n      writable: false,\n      value: hashed,\n    });\n  } else if (\n    obj.propertyIsEnumerable !== undefined &&\n    obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable\n  ) {\n    // Since we can't define a non-enumerable property on the object\n    // we'll hijack one of the less-used non-enumerable properties to\n    // save our hash on it. Since this is a function it will not show up in\n    // `JSON.stringify` which is what we want.\n    obj.propertyIsEnumerable = function () {\n      return this.constructor.prototype.propertyIsEnumerable.apply(\n        this,\n        arguments\n      );\n    };\n    obj.propertyIsEnumerable[UID_HASH_KEY] = hashed;\n  } else if (obj.nodeType !== undefined) {\n    // At this point we couldn't get the IE `uniqueID` to use as a hash\n    // and we couldn't use a non-enumerable property to exploit the\n    // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n    // itself.\n    obj[UID_HASH_KEY] = hashed;\n  } else {\n    throw new Error('Unable to set a non-enumerable property on object.');\n  }\n\n  return hashed;\n}\n\n// Get references to ES5 object methods.\nvar isExtensible = Object.isExtensible;\n\n// True if Object.defineProperty works as expected. IE8 fails this test.\nvar canDefineProperty = (function () {\n  try {\n    Object.defineProperty({}, '@', {});\n    return true;\n  } catch (e) {\n    return false;\n  }\n})();\n\n// IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n// and avoid memory leaks from the IE cloneNode bug.\nfunction getIENodeHash(node) {\n  if (node && node.nodeType > 0) {\n    switch (node.nodeType) {\n      case 1: // Element\n        return node.uniqueID;\n      case 9: // Document\n        return node.documentElement && node.documentElement.uniqueID;\n    }\n  }\n}\n\nfunction valueOf(obj) {\n  return obj.valueOf !== defaultValueOf && typeof obj.valueOf === 'function'\n    ? obj.valueOf(obj)\n    : obj;\n}\n\nfunction nextHash() {\n  var nextHash = ++_objHashUID;\n  if (_objHashUID & 0x40000000) {\n    _objHashUID = 0;\n  }\n  return nextHash;\n}\n\n// If possible, use a WeakMap.\nvar usingWeakMap = typeof WeakMap === 'function';\nvar weakMap;\nif (usingWeakMap) {\n  weakMap = new WeakMap();\n}\n\nvar symbolMap = Object.create(null);\n\nvar _objHashUID = 0;\n\nvar UID_HASH_KEY = '__immutablehash__';\nif (typeof Symbol === 'function') {\n  UID_HASH_KEY = Symbol(UID_HASH_KEY);\n}\n\nvar STRING_HASH_CACHE_MIN_STRLEN = 16;\nvar STRING_HASH_CACHE_MAX_SIZE = 255;\nvar STRING_HASH_CACHE_SIZE = 0;\nvar stringHashCache = {};\n\nvar ToKeyedSequence = /*@__PURE__*/(function (KeyedSeq) {\n  function ToKeyedSequence(indexed, useKeys) {\n    this._iter = indexed;\n    this._useKeys = useKeys;\n    this.size = indexed.size;\n  }\n\n  if ( KeyedSeq ) ToKeyedSequence.__proto__ = KeyedSeq;\n  ToKeyedSequence.prototype = Object.create( KeyedSeq && KeyedSeq.prototype );\n  ToKeyedSequence.prototype.constructor = ToKeyedSequence;\n\n  ToKeyedSequence.prototype.get = function get (key, notSetValue) {\n    return this._iter.get(key, notSetValue);\n  };\n\n  ToKeyedSequence.prototype.has = function has (key) {\n    return this._iter.has(key);\n  };\n\n  ToKeyedSequence.prototype.valueSeq = function valueSeq () {\n    return this._iter.valueSeq();\n  };\n\n  ToKeyedSequence.prototype.reverse = function reverse () {\n    var this$1$1 = this;\n\n    var reversedSequence = reverseFactory(this, true);\n    if (!this._useKeys) {\n      reversedSequence.valueSeq = function () { return this$1$1._iter.toSeq().reverse(); };\n    }\n    return reversedSequence;\n  };\n\n  ToKeyedSequence.prototype.map = function map (mapper, context) {\n    var this$1$1 = this;\n\n    var mappedSequence = mapFactory(this, mapper, context);\n    if (!this._useKeys) {\n      mappedSequence.valueSeq = function () { return this$1$1._iter.toSeq().map(mapper, context); };\n    }\n    return mappedSequence;\n  };\n\n  ToKeyedSequence.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1$1 = this;\n\n    return this._iter.__iterate(function (v, k) { return fn(v, k, this$1$1); }, reverse);\n  };\n\n  ToKeyedSequence.prototype.__iterator = function __iterator (type, reverse) {\n    return this._iter.__iterator(type, reverse);\n  };\n\n  return ToKeyedSequence;\n}(KeyedSeq));\nToKeyedSequence.prototype[IS_ORDERED_SYMBOL] = true;\n\nvar ToIndexedSequence = /*@__PURE__*/(function (IndexedSeq) {\n  function ToIndexedSequence(iter) {\n    this._iter = iter;\n    this.size = iter.size;\n  }\n\n  if ( IndexedSeq ) ToIndexedSequence.__proto__ = IndexedSeq;\n  ToIndexedSequence.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );\n  ToIndexedSequence.prototype.constructor = ToIndexedSequence;\n\n  ToIndexedSequence.prototype.includes = function includes (value) {\n    return this._iter.includes(value);\n  };\n\n  ToIndexedSequence.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1$1 = this;\n\n    var i = 0;\n    reverse && ensureSize(this);\n    return this._iter.__iterate(\n      function (v) { return fn(v, reverse ? this$1$1.size - ++i : i++, this$1$1); },\n      reverse\n    );\n  };\n\n  ToIndexedSequence.prototype.__iterator = function __iterator (type, reverse) {\n    var this$1$1 = this;\n\n    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n    var i = 0;\n    reverse && ensureSize(this);\n    return new Iterator(function () {\n      var step = iterator.next();\n      return step.done\n        ? step\n        : iteratorValue(\n            type,\n            reverse ? this$1$1.size - ++i : i++,\n            step.value,\n            step\n          );\n    });\n  };\n\n  return ToIndexedSequence;\n}(IndexedSeq));\n\nvar ToSetSequence = /*@__PURE__*/(function (SetSeq) {\n  function ToSetSequence(iter) {\n    this._iter = iter;\n    this.size = iter.size;\n  }\n\n  if ( SetSeq ) ToSetSequence.__proto__ = SetSeq;\n  ToSetSequence.prototype = Object.create( SetSeq && SetSeq.prototype );\n  ToSetSequence.prototype.constructor = ToSetSequence;\n\n  ToSetSequence.prototype.has = function has (key) {\n    return this._iter.includes(key);\n  };\n\n  ToSetSequence.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1$1 = this;\n\n    return this._iter.__iterate(function (v) { return fn(v, v, this$1$1); }, reverse);\n  };\n\n  ToSetSequence.prototype.__iterator = function __iterator (type, reverse) {\n    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n    return new Iterator(function () {\n      var step = iterator.next();\n      return step.done\n        ? step\n        : iteratorValue(type, step.value, step.value, step);\n    });\n  };\n\n  return ToSetSequence;\n}(SetSeq));\n\nvar FromEntriesSequence = /*@__PURE__*/(function (KeyedSeq) {\n  function FromEntriesSequence(entries) {\n    this._iter = entries;\n    this.size = entries.size;\n  }\n\n  if ( KeyedSeq ) FromEntriesSequence.__proto__ = KeyedSeq;\n  FromEntriesSequence.prototype = Object.create( KeyedSeq && KeyedSeq.prototype );\n  FromEntriesSequence.prototype.constructor = FromEntriesSequence;\n\n  FromEntriesSequence.prototype.entrySeq = function entrySeq () {\n    return this._iter.toSeq();\n  };\n\n  FromEntriesSequence.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1$1 = this;\n\n    return this._iter.__iterate(function (entry) {\n      // Check if entry exists first so array access doesn't throw for holes\n      // in the parent iteration.\n      if (entry) {\n        validateEntry(entry);\n        var indexedCollection = isCollection(entry);\n        return fn(\n          indexedCollection ? entry.get(1) : entry[1],\n          indexedCollection ? entry.get(0) : entry[0],\n          this$1$1\n        );\n      }\n    }, reverse);\n  };\n\n  FromEntriesSequence.prototype.__iterator = function __iterator (type, reverse) {\n    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n    return new Iterator(function () {\n      while (true) {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        // Check if entry exists first so array access doesn't throw for holes\n        // in the parent iteration.\n        if (entry) {\n          validateEntry(entry);\n          var indexedCollection = isCollection(entry);\n          return iteratorValue(\n            type,\n            indexedCollection ? entry.get(0) : entry[0],\n            indexedCollection ? entry.get(1) : entry[1],\n            step\n          );\n        }\n      }\n    });\n  };\n\n  return FromEntriesSequence;\n}(KeyedSeq));\n\nToIndexedSequence.prototype.cacheResult =\n  ToKeyedSequence.prototype.cacheResult =\n  ToSetSequence.prototype.cacheResult =\n  FromEntriesSequence.prototype.cacheResult =\n    cacheResultThrough;\n\nfunction flipFactory(collection) {\n  var flipSequence = makeSequence(collection);\n  flipSequence._iter = collection;\n  flipSequence.size = collection.size;\n  flipSequence.flip = function () { return collection; };\n  flipSequence.reverse = function () {\n    var reversedSequence = collection.reverse.apply(this); // super.reverse()\n    reversedSequence.flip = function () { return collection.reverse(); };\n    return reversedSequence;\n  };\n  flipSequence.has = function (key) { return collection.includes(key); };\n  flipSequence.includes = function (key) { return collection.has(key); };\n  flipSequence.cacheResult = cacheResultThrough;\n  flipSequence.__iterateUncached = function (fn, reverse) {\n    var this$1$1 = this;\n\n    return collection.__iterate(function (v, k) { return fn(k, v, this$1$1) !== false; }, reverse);\n  };\n  flipSequence.__iteratorUncached = function (type, reverse) {\n    if (type === ITERATE_ENTRIES) {\n      var iterator = collection.__iterator(type, reverse);\n      return new Iterator(function () {\n        var step = iterator.next();\n        if (!step.done) {\n          var k = step.value[0];\n          step.value[0] = step.value[1];\n          step.value[1] = k;\n        }\n        return step;\n      });\n    }\n    return collection.__iterator(\n      type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,\n      reverse\n    );\n  };\n  return flipSequence;\n}\n\nfunction mapFactory(collection, mapper, context) {\n  var mappedSequence = makeSequence(collection);\n  mappedSequence.size = collection.size;\n  mappedSequence.has = function (key) { return collection.has(key); };\n  mappedSequence.get = function (key, notSetValue) {\n    var v = collection.get(key, NOT_SET);\n    return v === NOT_SET\n      ? notSetValue\n      : mapper.call(context, v, key, collection);\n  };\n  mappedSequence.__iterateUncached = function (fn, reverse) {\n    var this$1$1 = this;\n\n    return collection.__iterate(\n      function (v, k, c) { return fn(mapper.call(context, v, k, c), k, this$1$1) !== false; },\n      reverse\n    );\n  };\n  mappedSequence.__iteratorUncached = function (type, reverse) {\n    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n    return new Iterator(function () {\n      var step = iterator.next();\n      if (step.done) {\n        return step;\n      }\n      var entry = step.value;\n      var key = entry[0];\n      return iteratorValue(\n        type,\n        key,\n        mapper.call(context, entry[1], key, collection),\n        step\n      );\n    });\n  };\n  return mappedSequence;\n}\n\nfunction reverseFactory(collection, useKeys) {\n  var this$1$1 = this;\n\n  var reversedSequence = makeSequence(collection);\n  reversedSequence._iter = collection;\n  reversedSequence.size = collection.size;\n  reversedSequence.reverse = function () { return collection; };\n  if (collection.flip) {\n    reversedSequence.flip = function () {\n      var flipSequence = flipFactory(collection);\n      flipSequence.reverse = function () { return collection.flip(); };\n      return flipSequence;\n    };\n  }\n  reversedSequence.get = function (key, notSetValue) { return collection.get(useKeys ? key : -1 - key, notSetValue); };\n  reversedSequence.has = function (key) { return collection.has(useKeys ? key : -1 - key); };\n  reversedSequence.includes = function (value) { return collection.includes(value); };\n  reversedSequence.cacheResult = cacheResultThrough;\n  reversedSequence.__iterate = function (fn, reverse) {\n    var this$1$1 = this;\n\n    var i = 0;\n    reverse && ensureSize(collection);\n    return collection.__iterate(\n      function (v, k) { return fn(v, useKeys ? k : reverse ? this$1$1.size - ++i : i++, this$1$1); },\n      !reverse\n    );\n  };\n  reversedSequence.__iterator = function (type, reverse) {\n    var i = 0;\n    reverse && ensureSize(collection);\n    var iterator = collection.__iterator(ITERATE_ENTRIES, !reverse);\n    return new Iterator(function () {\n      var step = iterator.next();\n      if (step.done) {\n        return step;\n      }\n      var entry = step.value;\n      return iteratorValue(\n        type,\n        useKeys ? entry[0] : reverse ? this$1$1.size - ++i : i++,\n        entry[1],\n        step\n      );\n    });\n  };\n  return reversedSequence;\n}\n\nfunction filterFactory(collection, predicate, context, useKeys) {\n  var filterSequence = makeSequence(collection);\n  if (useKeys) {\n    filterSequence.has = function (key) {\n      var v = collection.get(key, NOT_SET);\n      return v !== NOT_SET && !!predicate.call(context, v, key, collection);\n    };\n    filterSequence.get = function (key, notSetValue) {\n      var v = collection.get(key, NOT_SET);\n      return v !== NOT_SET && predicate.call(context, v, key, collection)\n        ? v\n        : notSetValue;\n    };\n  }\n  filterSequence.__iterateUncached = function (fn, reverse) {\n    var this$1$1 = this;\n\n    var iterations = 0;\n    collection.__iterate(function (v, k, c) {\n      if (predicate.call(context, v, k, c)) {\n        iterations++;\n        return fn(v, useKeys ? k : iterations - 1, this$1$1);\n      }\n    }, reverse);\n    return iterations;\n  };\n  filterSequence.__iteratorUncached = function (type, reverse) {\n    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n    var iterations = 0;\n    return new Iterator(function () {\n      while (true) {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var key = entry[0];\n        var value = entry[1];\n        if (predicate.call(context, value, key, collection)) {\n          return iteratorValue(type, useKeys ? key : iterations++, value, step);\n        }\n      }\n    });\n  };\n  return filterSequence;\n}\n\nfunction countByFactory(collection, grouper, context) {\n  var groups = Map().asMutable();\n  collection.__iterate(function (v, k) {\n    groups.update(grouper.call(context, v, k, collection), 0, function (a) { return a + 1; });\n  });\n  return groups.asImmutable();\n}\n\nfunction groupByFactory(collection, grouper, context) {\n  var isKeyedIter = isKeyed(collection);\n  var groups = (isOrdered(collection) ? OrderedMap() : Map()).asMutable();\n  collection.__iterate(function (v, k) {\n    groups.update(\n      grouper.call(context, v, k, collection),\n      function (a) { return ((a = a || []), a.push(isKeyedIter ? [k, v] : v), a); }\n    );\n  });\n  var coerce = collectionClass(collection);\n  return groups.map(function (arr) { return reify(collection, coerce(arr)); }).asImmutable();\n}\n\nfunction sliceFactory(collection, begin, end, useKeys) {\n  var originalSize = collection.size;\n\n  if (wholeSlice(begin, end, originalSize)) {\n    return collection;\n  }\n\n  var resolvedBegin = resolveBegin(begin, originalSize);\n  var resolvedEnd = resolveEnd(end, originalSize);\n\n  // begin or end will be NaN if they were provided as negative numbers and\n  // this collection's size is unknown. In that case, cache first so there is\n  // a known size and these do not resolve to NaN.\n  if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n    return sliceFactory(collection.toSeq().cacheResult(), begin, end, useKeys);\n  }\n\n  // Note: resolvedEnd is undefined when the original sequence's length is\n  // unknown and this slice did not supply an end and should contain all\n  // elements after resolvedBegin.\n  // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n  var resolvedSize = resolvedEnd - resolvedBegin;\n  var sliceSize;\n  if (resolvedSize === resolvedSize) {\n    sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n  }\n\n  var sliceSeq = makeSequence(collection);\n\n  // If collection.size is undefined, the size of the realized sliceSeq is\n  // unknown at this point unless the number of items to slice is 0\n  sliceSeq.size =\n    sliceSize === 0 ? sliceSize : (collection.size && sliceSize) || undefined;\n\n  if (!useKeys && isSeq(collection) && sliceSize >= 0) {\n    sliceSeq.get = function (index, notSetValue) {\n      index = wrapIndex(this, index);\n      return index >= 0 && index < sliceSize\n        ? collection.get(index + resolvedBegin, notSetValue)\n        : notSetValue;\n    };\n  }\n\n  sliceSeq.__iterateUncached = function (fn, reverse) {\n    var this$1$1 = this;\n\n    if (sliceSize === 0) {\n      return 0;\n    }\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var skipped = 0;\n    var isSkipping = true;\n    var iterations = 0;\n    collection.__iterate(function (v, k) {\n      if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n        iterations++;\n        return (\n          fn(v, useKeys ? k : iterations - 1, this$1$1) !== false &&\n          iterations !== sliceSize\n        );\n      }\n    });\n    return iterations;\n  };\n\n  sliceSeq.__iteratorUncached = function (type, reverse) {\n    if (sliceSize !== 0 && reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    // Don't bother instantiating parent iterator if taking 0.\n    if (sliceSize === 0) {\n      return new Iterator(iteratorDone);\n    }\n    var iterator = collection.__iterator(type, reverse);\n    var skipped = 0;\n    var iterations = 0;\n    return new Iterator(function () {\n      while (skipped++ < resolvedBegin) {\n        iterator.next();\n      }\n      if (++iterations > sliceSize) {\n        return iteratorDone();\n      }\n      var step = iterator.next();\n      if (useKeys || type === ITERATE_VALUES || step.done) {\n        return step;\n      }\n      if (type === ITERATE_KEYS) {\n        return iteratorValue(type, iterations - 1, undefined, step);\n      }\n      return iteratorValue(type, iterations - 1, step.value[1], step);\n    });\n  };\n\n  return sliceSeq;\n}\n\nfunction takeWhileFactory(collection, predicate, context) {\n  var takeSequence = makeSequence(collection);\n  takeSequence.__iterateUncached = function (fn, reverse) {\n    var this$1$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var iterations = 0;\n    collection.__iterate(\n      function (v, k, c) { return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$1$1); }\n    );\n    return iterations;\n  };\n  takeSequence.__iteratorUncached = function (type, reverse) {\n    var this$1$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n    var iterating = true;\n    return new Iterator(function () {\n      if (!iterating) {\n        return iteratorDone();\n      }\n      var step = iterator.next();\n      if (step.done) {\n        return step;\n      }\n      var entry = step.value;\n      var k = entry[0];\n      var v = entry[1];\n      if (!predicate.call(context, v, k, this$1$1)) {\n        iterating = false;\n        return iteratorDone();\n      }\n      return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);\n    });\n  };\n  return takeSequence;\n}\n\nfunction skipWhileFactory(collection, predicate, context, useKeys) {\n  var skipSequence = makeSequence(collection);\n  skipSequence.__iterateUncached = function (fn, reverse) {\n    var this$1$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var isSkipping = true;\n    var iterations = 0;\n    collection.__iterate(function (v, k, c) {\n      if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n        iterations++;\n        return fn(v, useKeys ? k : iterations - 1, this$1$1);\n      }\n    });\n    return iterations;\n  };\n  skipSequence.__iteratorUncached = function (type, reverse) {\n    var this$1$1 = this;\n\n    if (reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n    var skipping = true;\n    var iterations = 0;\n    return new Iterator(function () {\n      var step;\n      var k;\n      var v;\n      do {\n        step = iterator.next();\n        if (step.done) {\n          if (useKeys || type === ITERATE_VALUES) {\n            return step;\n          }\n          if (type === ITERATE_KEYS) {\n            return iteratorValue(type, iterations++, undefined, step);\n          }\n          return iteratorValue(type, iterations++, step.value[1], step);\n        }\n        var entry = step.value;\n        k = entry[0];\n        v = entry[1];\n        skipping && (skipping = predicate.call(context, v, k, this$1$1));\n      } while (skipping);\n      return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);\n    });\n  };\n  return skipSequence;\n}\n\nfunction concatFactory(collection, values) {\n  var isKeyedCollection = isKeyed(collection);\n  var iters = [collection]\n    .concat(values)\n    .map(function (v) {\n      if (!isCollection(v)) {\n        v = isKeyedCollection\n          ? keyedSeqFromValue(v)\n          : indexedSeqFromValue(Array.isArray(v) ? v : [v]);\n      } else if (isKeyedCollection) {\n        v = KeyedCollection(v);\n      }\n      return v;\n    })\n    .filter(function (v) { return v.size !== 0; });\n\n  if (iters.length === 0) {\n    return collection;\n  }\n\n  if (iters.length === 1) {\n    var singleton = iters[0];\n    if (\n      singleton === collection ||\n      (isKeyedCollection && isKeyed(singleton)) ||\n      (isIndexed(collection) && isIndexed(singleton))\n    ) {\n      return singleton;\n    }\n  }\n\n  var concatSeq = new ArraySeq(iters);\n  if (isKeyedCollection) {\n    concatSeq = concatSeq.toKeyedSeq();\n  } else if (!isIndexed(collection)) {\n    concatSeq = concatSeq.toSetSeq();\n  }\n  concatSeq = concatSeq.flatten(true);\n  concatSeq.size = iters.reduce(function (sum, seq) {\n    if (sum !== undefined) {\n      var size = seq.size;\n      if (size !== undefined) {\n        return sum + size;\n      }\n    }\n  }, 0);\n  return concatSeq;\n}\n\nfunction flattenFactory(collection, depth, useKeys) {\n  var flatSequence = makeSequence(collection);\n  flatSequence.__iterateUncached = function (fn, reverse) {\n    if (reverse) {\n      return this.cacheResult().__iterate(fn, reverse);\n    }\n    var iterations = 0;\n    var stopped = false;\n    function flatDeep(iter, currentDepth) {\n      iter.__iterate(function (v, k) {\n        if ((!depth || currentDepth < depth) && isCollection(v)) {\n          flatDeep(v, currentDepth + 1);\n        } else {\n          iterations++;\n          if (fn(v, useKeys ? k : iterations - 1, flatSequence) === false) {\n            stopped = true;\n          }\n        }\n        return !stopped;\n      }, reverse);\n    }\n    flatDeep(collection, 0);\n    return iterations;\n  };\n  flatSequence.__iteratorUncached = function (type, reverse) {\n    if (reverse) {\n      return this.cacheResult().__iterator(type, reverse);\n    }\n    var iterator = collection.__iterator(type, reverse);\n    var stack = [];\n    var iterations = 0;\n    return new Iterator(function () {\n      while (iterator) {\n        var step = iterator.next();\n        if (step.done !== false) {\n          iterator = stack.pop();\n          continue;\n        }\n        var v = step.value;\n        if (type === ITERATE_ENTRIES) {\n          v = v[1];\n        }\n        if ((!depth || stack.length < depth) && isCollection(v)) {\n          stack.push(iterator);\n          iterator = v.__iterator(type, reverse);\n        } else {\n          return useKeys ? step : iteratorValue(type, iterations++, v, step);\n        }\n      }\n      return iteratorDone();\n    });\n  };\n  return flatSequence;\n}\n\nfunction flatMapFactory(collection, mapper, context) {\n  var coerce = collectionClass(collection);\n  return collection\n    .toSeq()\n    .map(function (v, k) { return coerce(mapper.call(context, v, k, collection)); })\n    .flatten(true);\n}\n\nfunction interposeFactory(collection, separator) {\n  var interposedSequence = makeSequence(collection);\n  interposedSequence.size = collection.size && collection.size * 2 - 1;\n  interposedSequence.__iterateUncached = function (fn, reverse) {\n    var this$1$1 = this;\n\n    var iterations = 0;\n    collection.__iterate(\n      function (v) { return (!iterations || fn(separator, iterations++, this$1$1) !== false) &&\n        fn(v, iterations++, this$1$1) !== false; },\n      reverse\n    );\n    return iterations;\n  };\n  interposedSequence.__iteratorUncached = function (type, reverse) {\n    var iterator = collection.__iterator(ITERATE_VALUES, reverse);\n    var iterations = 0;\n    var step;\n    return new Iterator(function () {\n      if (!step || iterations % 2) {\n        step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n      }\n      return iterations % 2\n        ? iteratorValue(type, iterations++, separator)\n        : iteratorValue(type, iterations++, step.value, step);\n    });\n  };\n  return interposedSequence;\n}\n\nfunction sortFactory(collection, comparator, mapper) {\n  if (!comparator) {\n    comparator = defaultComparator;\n  }\n  var isKeyedCollection = isKeyed(collection);\n  var index = 0;\n  var entries = collection\n    .toSeq()\n    .map(function (v, k) { return [k, v, index++, mapper ? mapper(v, k, collection) : v]; })\n    .valueSeq()\n    .toArray();\n  entries\n    .sort(function (a, b) { return comparator(a[3], b[3]) || a[2] - b[2]; })\n    .forEach(\n      isKeyedCollection\n        ? function (v, i) {\n            entries[i].length = 2;\n          }\n        : function (v, i) {\n            entries[i] = v[1];\n          }\n    );\n  return isKeyedCollection\n    ? KeyedSeq(entries)\n    : isIndexed(collection)\n    ? IndexedSeq(entries)\n    : SetSeq(entries);\n}\n\nfunction maxFactory(collection, comparator, mapper) {\n  if (!comparator) {\n    comparator = defaultComparator;\n  }\n  if (mapper) {\n    var entry = collection\n      .toSeq()\n      .map(function (v, k) { return [v, mapper(v, k, collection)]; })\n      .reduce(function (a, b) { return (maxCompare(comparator, a[1], b[1]) ? b : a); });\n    return entry && entry[0];\n  }\n  return collection.reduce(function (a, b) { return (maxCompare(comparator, a, b) ? b : a); });\n}\n\nfunction maxCompare(comparator, a, b) {\n  var comp = comparator(b, a);\n  // b is considered the new max if the comparator declares them equal, but\n  // they are not equal and b is in fact a nullish value.\n  return (\n    (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) ||\n    comp > 0\n  );\n}\n\nfunction zipWithFactory(keyIter, zipper, iters, zipAll) {\n  var zipSequence = makeSequence(keyIter);\n  var sizes = new ArraySeq(iters).map(function (i) { return i.size; });\n  zipSequence.size = zipAll ? sizes.max() : sizes.min();\n  // Note: this a generic base implementation of __iterate in terms of\n  // __iterator which may be more generically useful in the future.\n  zipSequence.__iterate = function (fn, reverse) {\n    /* generic:\n    var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n    var step;\n    var iterations = 0;\n    while (!(step = iterator.next()).done) {\n      iterations++;\n      if (fn(step.value[1], step.value[0], this) === false) {\n        break;\n      }\n    }\n    return iterations;\n    */\n    // indexed:\n    var iterator = this.__iterator(ITERATE_VALUES, reverse);\n    var step;\n    var iterations = 0;\n    while (!(step = iterator.next()).done) {\n      if (fn(step.value, iterations++, this) === false) {\n        break;\n      }\n    }\n    return iterations;\n  };\n  zipSequence.__iteratorUncached = function (type, reverse) {\n    var iterators = iters.map(\n      function (i) { return ((i = Collection(i)), getIterator(reverse ? i.reverse() : i)); }\n    );\n    var iterations = 0;\n    var isDone = false;\n    return new Iterator(function () {\n      var steps;\n      if (!isDone) {\n        steps = iterators.map(function (i) { return i.next(); });\n        isDone = zipAll ? steps.every(function (s) { return s.done; }) : steps.some(function (s) { return s.done; });\n      }\n      if (isDone) {\n        return iteratorDone();\n      }\n      return iteratorValue(\n        type,\n        iterations++,\n        zipper.apply(\n          null,\n          steps.map(function (s) { return s.value; })\n        )\n      );\n    });\n  };\n  return zipSequence;\n}\n\n// #pragma Helper Functions\n\nfunction reify(iter, seq) {\n  return iter === seq ? iter : isSeq(iter) ? seq : iter.constructor(seq);\n}\n\nfunction validateEntry(entry) {\n  if (entry !== Object(entry)) {\n    throw new TypeError('Expected [K, V] tuple: ' + entry);\n  }\n}\n\nfunction collectionClass(collection) {\n  return isKeyed(collection)\n    ? KeyedCollection\n    : isIndexed(collection)\n    ? IndexedCollection\n    : SetCollection;\n}\n\nfunction makeSequence(collection) {\n  return Object.create(\n    (isKeyed(collection)\n      ? KeyedSeq\n      : isIndexed(collection)\n      ? IndexedSeq\n      : SetSeq\n    ).prototype\n  );\n}\n\nfunction cacheResultThrough() {\n  if (this._iter.cacheResult) {\n    this._iter.cacheResult();\n    this.size = this._iter.size;\n    return this;\n  }\n  return Seq.prototype.cacheResult.call(this);\n}\n\nfunction defaultComparator(a, b) {\n  if (a === undefined && b === undefined) {\n    return 0;\n  }\n\n  if (a === undefined) {\n    return 1;\n  }\n\n  if (b === undefined) {\n    return -1;\n  }\n\n  return a > b ? 1 : a < b ? -1 : 0;\n}\n\nfunction arrCopy(arr, offset) {\n  offset = offset || 0;\n  var len = Math.max(0, arr.length - offset);\n  var newArr = new Array(len);\n  for (var ii = 0; ii < len; ii++) {\n    newArr[ii] = arr[ii + offset];\n  }\n  return newArr;\n}\n\nfunction invariant(condition, error) {\n  if (!condition) { throw new Error(error); }\n}\n\nfunction assertNotInfinite(size) {\n  invariant(\n    size !== Infinity,\n    'Cannot perform this action with an infinite size.'\n  );\n}\n\nfunction coerceKeyPath(keyPath) {\n  if (isArrayLike(keyPath) && typeof keyPath !== 'string') {\n    return keyPath;\n  }\n  if (isOrdered(keyPath)) {\n    return keyPath.toArray();\n  }\n  throw new TypeError(\n    'Invalid keyPath: expected Ordered Collection or Array: ' + keyPath\n  );\n}\n\nvar toString = Object.prototype.toString;\n\nfunction isPlainObject(value) {\n  // The base prototype's toString deals with Argument objects and native namespaces like Math\n  if (\n    !value ||\n    typeof value !== 'object' ||\n    toString.call(value) !== '[object Object]'\n  ) {\n    return false;\n  }\n\n  var proto = Object.getPrototypeOf(value);\n  if (proto === null) {\n    return true;\n  }\n\n  // Iteratively going up the prototype chain is needed for cross-realm environments (differing contexts, iframes, etc)\n  var parentProto = proto;\n  var nextProto = Object.getPrototypeOf(proto);\n  while (nextProto !== null) {\n    parentProto = nextProto;\n    nextProto = Object.getPrototypeOf(parentProto);\n  }\n  return parentProto === proto;\n}\n\n/**\n * Returns true if the value is a potentially-persistent data structure, either\n * provided by Immutable.js or a plain Array or Object.\n */\nfunction isDataStructure(value) {\n  return (\n    typeof value === 'object' &&\n    (isImmutable(value) || Array.isArray(value) || isPlainObject(value))\n  );\n}\n\nfunction quoteString(value) {\n  try {\n    return typeof value === 'string' ? JSON.stringify(value) : String(value);\n  } catch (_ignoreError) {\n    return JSON.stringify(value);\n  }\n}\n\nfunction has(collection, key) {\n  return isImmutable(collection)\n    ? collection.has(key)\n    : isDataStructure(collection) && hasOwnProperty.call(collection, key);\n}\n\nfunction get(collection, key, notSetValue) {\n  return isImmutable(collection)\n    ? collection.get(key, notSetValue)\n    : !has(collection, key)\n    ? notSetValue\n    : typeof collection.get === 'function'\n    ? collection.get(key)\n    : collection[key];\n}\n\nfunction shallowCopy(from) {\n  if (Array.isArray(from)) {\n    return arrCopy(from);\n  }\n  var to = {};\n  for (var key in from) {\n    if (hasOwnProperty.call(from, key)) {\n      to[key] = from[key];\n    }\n  }\n  return to;\n}\n\nfunction remove(collection, key) {\n  if (!isDataStructure(collection)) {\n    throw new TypeError(\n      'Cannot update non-data-structure value: ' + collection\n    );\n  }\n  if (isImmutable(collection)) {\n    if (!collection.remove) {\n      throw new TypeError(\n        'Cannot update immutable value without .remove() method: ' + collection\n      );\n    }\n    return collection.remove(key);\n  }\n  if (!hasOwnProperty.call(collection, key)) {\n    return collection;\n  }\n  var collectionCopy = shallowCopy(collection);\n  if (Array.isArray(collectionCopy)) {\n    collectionCopy.splice(key, 1);\n  } else {\n    delete collectionCopy[key];\n  }\n  return collectionCopy;\n}\n\nfunction set(collection, key, value) {\n  if (!isDataStructure(collection)) {\n    throw new TypeError(\n      'Cannot update non-data-structure value: ' + collection\n    );\n  }\n  if (isImmutable(collection)) {\n    if (!collection.set) {\n      throw new TypeError(\n        'Cannot update immutable value without .set() method: ' + collection\n      );\n    }\n    return collection.set(key, value);\n  }\n  if (hasOwnProperty.call(collection, key) && value === collection[key]) {\n    return collection;\n  }\n  var collectionCopy = shallowCopy(collection);\n  collectionCopy[key] = value;\n  return collectionCopy;\n}\n\nfunction updateIn$1(collection, keyPath, notSetValue, updater) {\n  if (!updater) {\n    updater = notSetValue;\n    notSetValue = undefined;\n  }\n  var updatedValue = updateInDeeply(\n    isImmutable(collection),\n    collection,\n    coerceKeyPath(keyPath),\n    0,\n    notSetValue,\n    updater\n  );\n  return updatedValue === NOT_SET ? notSetValue : updatedValue;\n}\n\nfunction updateInDeeply(\n  inImmutable,\n  existing,\n  keyPath,\n  i,\n  notSetValue,\n  updater\n) {\n  var wasNotSet = existing === NOT_SET;\n  if (i === keyPath.length) {\n    var existingValue = wasNotSet ? notSetValue : existing;\n    var newValue = updater(existingValue);\n    return newValue === existingValue ? existing : newValue;\n  }\n  if (!wasNotSet && !isDataStructure(existing)) {\n    throw new TypeError(\n      'Cannot update within non-data-structure value in path [' +\n        keyPath.slice(0, i).map(quoteString) +\n        ']: ' +\n        existing\n    );\n  }\n  var key = keyPath[i];\n  var nextExisting = wasNotSet ? NOT_SET : get(existing, key, NOT_SET);\n  var nextUpdated = updateInDeeply(\n    nextExisting === NOT_SET ? inImmutable : isImmutable(nextExisting),\n    nextExisting,\n    keyPath,\n    i + 1,\n    notSetValue,\n    updater\n  );\n  return nextUpdated === nextExisting\n    ? existing\n    : nextUpdated === NOT_SET\n    ? remove(existing, key)\n    : set(\n        wasNotSet ? (inImmutable ? emptyMap() : {}) : existing,\n        key,\n        nextUpdated\n      );\n}\n\nfunction setIn$1(collection, keyPath, value) {\n  return updateIn$1(collection, keyPath, NOT_SET, function () { return value; });\n}\n\nfunction setIn(keyPath, v) {\n  return setIn$1(this, keyPath, v);\n}\n\nfunction removeIn(collection, keyPath) {\n  return updateIn$1(collection, keyPath, function () { return NOT_SET; });\n}\n\nfunction deleteIn(keyPath) {\n  return removeIn(this, keyPath);\n}\n\nfunction update$1(collection, key, notSetValue, updater) {\n  return updateIn$1(collection, [key], notSetValue, updater);\n}\n\nfunction update(key, notSetValue, updater) {\n  return arguments.length === 1\n    ? key(this)\n    : update$1(this, key, notSetValue, updater);\n}\n\nfunction updateIn(keyPath, notSetValue, updater) {\n  return updateIn$1(this, keyPath, notSetValue, updater);\n}\n\nfunction merge$1() {\n  var iters = [], len = arguments.length;\n  while ( len-- ) iters[ len ] = arguments[ len ];\n\n  return mergeIntoKeyedWith(this, iters);\n}\n\nfunction mergeWith$1(merger) {\n  var iters = [], len = arguments.length - 1;\n  while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n  if (typeof merger !== 'function') {\n    throw new TypeError('Invalid merger function: ' + merger);\n  }\n  return mergeIntoKeyedWith(this, iters, merger);\n}\n\nfunction mergeIntoKeyedWith(collection, collections, merger) {\n  var iters = [];\n  for (var ii = 0; ii < collections.length; ii++) {\n    var collection$1 = KeyedCollection(collections[ii]);\n    if (collection$1.size !== 0) {\n      iters.push(collection$1);\n    }\n  }\n  if (iters.length === 0) {\n    return collection;\n  }\n  if (\n    collection.toSeq().size === 0 &&\n    !collection.__ownerID &&\n    iters.length === 1\n  ) {\n    return collection.constructor(iters[0]);\n  }\n  return collection.withMutations(function (collection) {\n    var mergeIntoCollection = merger\n      ? function (value, key) {\n          update$1(collection, key, NOT_SET, function (oldVal) { return oldVal === NOT_SET ? value : merger(oldVal, value, key); }\n          );\n        }\n      : function (value, key) {\n          collection.set(key, value);\n        };\n    for (var ii = 0; ii < iters.length; ii++) {\n      iters[ii].forEach(mergeIntoCollection);\n    }\n  });\n}\n\nfunction merge(collection) {\n  var sources = [], len = arguments.length - 1;\n  while ( len-- > 0 ) sources[ len ] = arguments[ len + 1 ];\n\n  return mergeWithSources(collection, sources);\n}\n\nfunction mergeWith(merger, collection) {\n  var sources = [], len = arguments.length - 2;\n  while ( len-- > 0 ) sources[ len ] = arguments[ len + 2 ];\n\n  return mergeWithSources(collection, sources, merger);\n}\n\nfunction mergeDeep$1(collection) {\n  var sources = [], len = arguments.length - 1;\n  while ( len-- > 0 ) sources[ len ] = arguments[ len + 1 ];\n\n  return mergeDeepWithSources(collection, sources);\n}\n\nfunction mergeDeepWith$1(merger, collection) {\n  var sources = [], len = arguments.length - 2;\n  while ( len-- > 0 ) sources[ len ] = arguments[ len + 2 ];\n\n  return mergeDeepWithSources(collection, sources, merger);\n}\n\nfunction mergeDeepWithSources(collection, sources, merger) {\n  return mergeWithSources(collection, sources, deepMergerWith(merger));\n}\n\nfunction mergeWithSources(collection, sources, merger) {\n  if (!isDataStructure(collection)) {\n    throw new TypeError(\n      'Cannot merge into non-data-structure value: ' + collection\n    );\n  }\n  if (isImmutable(collection)) {\n    return typeof merger === 'function' && collection.mergeWith\n      ? collection.mergeWith.apply(collection, [ merger ].concat( sources ))\n      : collection.merge\n      ? collection.merge.apply(collection, sources)\n      : collection.concat.apply(collection, sources);\n  }\n  var isArray = Array.isArray(collection);\n  var merged = collection;\n  var Collection = isArray ? IndexedCollection : KeyedCollection;\n  var mergeItem = isArray\n    ? function (value) {\n        // Copy on write\n        if (merged === collection) {\n          merged = shallowCopy(merged);\n        }\n        merged.push(value);\n      }\n    : function (value, key) {\n        var hasVal = hasOwnProperty.call(merged, key);\n        var nextVal =\n          hasVal && merger ? merger(merged[key], value, key) : value;\n        if (!hasVal || nextVal !== merged[key]) {\n          // Copy on write\n          if (merged === collection) {\n            merged = shallowCopy(merged);\n          }\n          merged[key] = nextVal;\n        }\n      };\n  for (var i = 0; i < sources.length; i++) {\n    Collection(sources[i]).forEach(mergeItem);\n  }\n  return merged;\n}\n\nfunction deepMergerWith(merger) {\n  function deepMerger(oldValue, newValue, key) {\n    return isDataStructure(oldValue) &&\n      isDataStructure(newValue) &&\n      areMergeable(oldValue, newValue)\n      ? mergeWithSources(oldValue, [newValue], deepMerger)\n      : merger\n      ? merger(oldValue, newValue, key)\n      : newValue;\n  }\n  return deepMerger;\n}\n\n/**\n * It's unclear what the desired behavior is for merging two collections that\n * fall into separate categories between keyed, indexed, or set-like, so we only\n * consider them mergeable if they fall into the same category.\n */\nfunction areMergeable(oldDataStructure, newDataStructure) {\n  var oldSeq = Seq(oldDataStructure);\n  var newSeq = Seq(newDataStructure);\n  // This logic assumes that a sequence can only fall into one of the three\n  // categories mentioned above (since there's no `isSetLike()` method).\n  return (\n    isIndexed(oldSeq) === isIndexed(newSeq) &&\n    isKeyed(oldSeq) === isKeyed(newSeq)\n  );\n}\n\nfunction mergeDeep() {\n  var iters = [], len = arguments.length;\n  while ( len-- ) iters[ len ] = arguments[ len ];\n\n  return mergeDeepWithSources(this, iters);\n}\n\nfunction mergeDeepWith(merger) {\n  var iters = [], len = arguments.length - 1;\n  while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n  return mergeDeepWithSources(this, iters, merger);\n}\n\nfunction mergeIn(keyPath) {\n  var iters = [], len = arguments.length - 1;\n  while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n  return updateIn$1(this, keyPath, emptyMap(), function (m) { return mergeWithSources(m, iters); });\n}\n\nfunction mergeDeepIn(keyPath) {\n  var iters = [], len = arguments.length - 1;\n  while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n  return updateIn$1(this, keyPath, emptyMap(), function (m) { return mergeDeepWithSources(m, iters); }\n  );\n}\n\nfunction withMutations(fn) {\n  var mutable = this.asMutable();\n  fn(mutable);\n  return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n}\n\nfunction asMutable() {\n  return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n}\n\nfunction asImmutable() {\n  return this.__ensureOwner();\n}\n\nfunction wasAltered() {\n  return this.__altered;\n}\n\nvar Map = /*@__PURE__*/(function (KeyedCollection) {\n  function Map(value) {\n    return value === undefined || value === null\n      ? emptyMap()\n      : isMap(value) && !isOrdered(value)\n      ? value\n      : emptyMap().withMutations(function (map) {\n          var iter = KeyedCollection(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function (v, k) { return map.set(k, v); });\n        });\n  }\n\n  if ( KeyedCollection ) Map.__proto__ = KeyedCollection;\n  Map.prototype = Object.create( KeyedCollection && KeyedCollection.prototype );\n  Map.prototype.constructor = Map;\n\n  Map.of = function of () {\n    var keyValues = [], len = arguments.length;\n    while ( len-- ) keyValues[ len ] = arguments[ len ];\n\n    return emptyMap().withMutations(function (map) {\n      for (var i = 0; i < keyValues.length; i += 2) {\n        if (i + 1 >= keyValues.length) {\n          throw new Error('Missing value for key: ' + keyValues[i]);\n        }\n        map.set(keyValues[i], keyValues[i + 1]);\n      }\n    });\n  };\n\n  Map.prototype.toString = function toString () {\n    return this.__toString('Map {', '}');\n  };\n\n  // @pragma Access\n\n  Map.prototype.get = function get (k, notSetValue) {\n    return this._root\n      ? this._root.get(0, undefined, k, notSetValue)\n      : notSetValue;\n  };\n\n  // @pragma Modification\n\n  Map.prototype.set = function set (k, v) {\n    return updateMap(this, k, v);\n  };\n\n  Map.prototype.remove = function remove (k) {\n    return updateMap(this, k, NOT_SET);\n  };\n\n  Map.prototype.deleteAll = function deleteAll (keys) {\n    var collection = Collection(keys);\n\n    if (collection.size === 0) {\n      return this;\n    }\n\n    return this.withMutations(function (map) {\n      collection.forEach(function (key) { return map.remove(key); });\n    });\n  };\n\n  Map.prototype.clear = function clear () {\n    if (this.size === 0) {\n      return this;\n    }\n    if (this.__ownerID) {\n      this.size = 0;\n      this._root = null;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return emptyMap();\n  };\n\n  // @pragma Composition\n\n  Map.prototype.sort = function sort (comparator) {\n    // Late binding\n    return OrderedMap(sortFactory(this, comparator));\n  };\n\n  Map.prototype.sortBy = function sortBy (mapper, comparator) {\n    // Late binding\n    return OrderedMap(sortFactory(this, comparator, mapper));\n  };\n\n  Map.prototype.map = function map (mapper, context) {\n    var this$1$1 = this;\n\n    return this.withMutations(function (map) {\n      map.forEach(function (value, key) {\n        map.set(key, mapper.call(context, value, key, this$1$1));\n      });\n    });\n  };\n\n  // @pragma Mutability\n\n  Map.prototype.__iterator = function __iterator (type, reverse) {\n    return new MapIterator(this, type, reverse);\n  };\n\n  Map.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1$1 = this;\n\n    var iterations = 0;\n    this._root &&\n      this._root.iterate(function (entry) {\n        iterations++;\n        return fn(entry[1], entry[0], this$1$1);\n      }, reverse);\n    return iterations;\n  };\n\n  Map.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    if (!ownerID) {\n      if (this.size === 0) {\n        return emptyMap();\n      }\n      this.__ownerID = ownerID;\n      this.__altered = false;\n      return this;\n    }\n    return makeMap(this.size, this._root, ownerID, this.__hash);\n  };\n\n  return Map;\n}(KeyedCollection));\n\nMap.isMap = isMap;\n\nvar MapPrototype = Map.prototype;\nMapPrototype[IS_MAP_SYMBOL] = true;\nMapPrototype[DELETE] = MapPrototype.remove;\nMapPrototype.removeAll = MapPrototype.deleteAll;\nMapPrototype.setIn = setIn;\nMapPrototype.removeIn = MapPrototype.deleteIn = deleteIn;\nMapPrototype.update = update;\nMapPrototype.updateIn = updateIn;\nMapPrototype.merge = MapPrototype.concat = merge$1;\nMapPrototype.mergeWith = mergeWith$1;\nMapPrototype.mergeDeep = mergeDeep;\nMapPrototype.mergeDeepWith = mergeDeepWith;\nMapPrototype.mergeIn = mergeIn;\nMapPrototype.mergeDeepIn = mergeDeepIn;\nMapPrototype.withMutations = withMutations;\nMapPrototype.wasAltered = wasAltered;\nMapPrototype.asImmutable = asImmutable;\nMapPrototype['@@transducer/init'] = MapPrototype.asMutable = asMutable;\nMapPrototype['@@transducer/step'] = function (result, arr) {\n  return result.set(arr[0], arr[1]);\n};\nMapPrototype['@@transducer/result'] = function (obj) {\n  return obj.asImmutable();\n};\n\n// #pragma Trie Nodes\n\nvar ArrayMapNode = function ArrayMapNode(ownerID, entries) {\n  this.ownerID = ownerID;\n  this.entries = entries;\n};\n\nArrayMapNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n  var entries = this.entries;\n  for (var ii = 0, len = entries.length; ii < len; ii++) {\n    if (is(key, entries[ii][0])) {\n      return entries[ii][1];\n    }\n  }\n  return notSetValue;\n};\n\nArrayMapNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n  var removed = value === NOT_SET;\n\n  var entries = this.entries;\n  var idx = 0;\n  var len = entries.length;\n  for (; idx < len; idx++) {\n    if (is(key, entries[idx][0])) {\n      break;\n    }\n  }\n  var exists = idx < len;\n\n  if (exists ? entries[idx][1] === value : removed) {\n    return this;\n  }\n\n  SetRef(didAlter);\n  (removed || !exists) && SetRef(didChangeSize);\n\n  if (removed && entries.length === 1) {\n    return; // undefined\n  }\n\n  if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n    return createNodes(ownerID, entries, key, value);\n  }\n\n  var isEditable = ownerID && ownerID === this.ownerID;\n  var newEntries = isEditable ? entries : arrCopy(entries);\n\n  if (exists) {\n    if (removed) {\n      idx === len - 1\n        ? newEntries.pop()\n        : (newEntries[idx] = newEntries.pop());\n    } else {\n      newEntries[idx] = [key, value];\n    }\n  } else {\n    newEntries.push([key, value]);\n  }\n\n  if (isEditable) {\n    this.entries = newEntries;\n    return this;\n  }\n\n  return new ArrayMapNode(ownerID, newEntries);\n};\n\nvar BitmapIndexedNode = function BitmapIndexedNode(ownerID, bitmap, nodes) {\n  this.ownerID = ownerID;\n  this.bitmap = bitmap;\n  this.nodes = nodes;\n};\n\nBitmapIndexedNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n  if (keyHash === undefined) {\n    keyHash = hash(key);\n  }\n  var bit = 1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK);\n  var bitmap = this.bitmap;\n  return (bitmap & bit) === 0\n    ? notSetValue\n    : this.nodes[popCount(bitmap & (bit - 1))].get(\n        shift + SHIFT,\n        keyHash,\n        key,\n        notSetValue\n      );\n};\n\nBitmapIndexedNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n  if (keyHash === undefined) {\n    keyHash = hash(key);\n  }\n  var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n  var bit = 1 << keyHashFrag;\n  var bitmap = this.bitmap;\n  var exists = (bitmap & bit) !== 0;\n\n  if (!exists && value === NOT_SET) {\n    return this;\n  }\n\n  var idx = popCount(bitmap & (bit - 1));\n  var nodes = this.nodes;\n  var node = exists ? nodes[idx] : undefined;\n  var newNode = updateNode(\n    node,\n    ownerID,\n    shift + SHIFT,\n    keyHash,\n    key,\n    value,\n    didChangeSize,\n    didAlter\n  );\n\n  if (newNode === node) {\n    return this;\n  }\n\n  if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n    return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n  }\n\n  if (\n    exists &&\n    !newNode &&\n    nodes.length === 2 &&\n    isLeafNode(nodes[idx ^ 1])\n  ) {\n    return nodes[idx ^ 1];\n  }\n\n  if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n    return newNode;\n  }\n\n  var isEditable = ownerID && ownerID === this.ownerID;\n  var newBitmap = exists ? (newNode ? bitmap : bitmap ^ bit) : bitmap | bit;\n  var newNodes = exists\n    ? newNode\n      ? setAt(nodes, idx, newNode, isEditable)\n      : spliceOut(nodes, idx, isEditable)\n    : spliceIn(nodes, idx, newNode, isEditable);\n\n  if (isEditable) {\n    this.bitmap = newBitmap;\n    this.nodes = newNodes;\n    return this;\n  }\n\n  return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n};\n\nvar HashArrayMapNode = function HashArrayMapNode(ownerID, count, nodes) {\n  this.ownerID = ownerID;\n  this.count = count;\n  this.nodes = nodes;\n};\n\nHashArrayMapNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n  if (keyHash === undefined) {\n    keyHash = hash(key);\n  }\n  var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n  var node = this.nodes[idx];\n  return node\n    ? node.get(shift + SHIFT, keyHash, key, notSetValue)\n    : notSetValue;\n};\n\nHashArrayMapNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n  if (keyHash === undefined) {\n    keyHash = hash(key);\n  }\n  var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n  var removed = value === NOT_SET;\n  var nodes = this.nodes;\n  var node = nodes[idx];\n\n  if (removed && !node) {\n    return this;\n  }\n\n  var newNode = updateNode(\n    node,\n    ownerID,\n    shift + SHIFT,\n    keyHash,\n    key,\n    value,\n    didChangeSize,\n    didAlter\n  );\n  if (newNode === node) {\n    return this;\n  }\n\n  var newCount = this.count;\n  if (!node) {\n    newCount++;\n  } else if (!newNode) {\n    newCount--;\n    if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n      return packNodes(ownerID, nodes, newCount, idx);\n    }\n  }\n\n  var isEditable = ownerID && ownerID === this.ownerID;\n  var newNodes = setAt(nodes, idx, newNode, isEditable);\n\n  if (isEditable) {\n    this.count = newCount;\n    this.nodes = newNodes;\n    return this;\n  }\n\n  return new HashArrayMapNode(ownerID, newCount, newNodes);\n};\n\nvar HashCollisionNode = function HashCollisionNode(ownerID, keyHash, entries) {\n  this.ownerID = ownerID;\n  this.keyHash = keyHash;\n  this.entries = entries;\n};\n\nHashCollisionNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n  var entries = this.entries;\n  for (var ii = 0, len = entries.length; ii < len; ii++) {\n    if (is(key, entries[ii][0])) {\n      return entries[ii][1];\n    }\n  }\n  return notSetValue;\n};\n\nHashCollisionNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n  if (keyHash === undefined) {\n    keyHash = hash(key);\n  }\n\n  var removed = value === NOT_SET;\n\n  if (keyHash !== this.keyHash) {\n    if (removed) {\n      return this;\n    }\n    SetRef(didAlter);\n    SetRef(didChangeSize);\n    return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);\n  }\n\n  var entries = this.entries;\n  var idx = 0;\n  var len = entries.length;\n  for (; idx < len; idx++) {\n    if (is(key, entries[idx][0])) {\n      break;\n    }\n  }\n  var exists = idx < len;\n\n  if (exists ? entries[idx][1] === value : removed) {\n    return this;\n  }\n\n  SetRef(didAlter);\n  (removed || !exists) && SetRef(didChangeSize);\n\n  if (removed && len === 2) {\n    return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n  }\n\n  var isEditable = ownerID && ownerID === this.ownerID;\n  var newEntries = isEditable ? entries : arrCopy(entries);\n\n  if (exists) {\n    if (removed) {\n      idx === len - 1\n        ? newEntries.pop()\n        : (newEntries[idx] = newEntries.pop());\n    } else {\n      newEntries[idx] = [key, value];\n    }\n  } else {\n    newEntries.push([key, value]);\n  }\n\n  if (isEditable) {\n    this.entries = newEntries;\n    return this;\n  }\n\n  return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n};\n\nvar ValueNode = function ValueNode(ownerID, keyHash, entry) {\n  this.ownerID = ownerID;\n  this.keyHash = keyHash;\n  this.entry = entry;\n};\n\nValueNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n  return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n};\n\nValueNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n  var removed = value === NOT_SET;\n  var keyMatch = is(key, this.entry[0]);\n  if (keyMatch ? value === this.entry[1] : removed) {\n    return this;\n  }\n\n  SetRef(didAlter);\n\n  if (removed) {\n    SetRef(didChangeSize);\n    return; // undefined\n  }\n\n  if (keyMatch) {\n    if (ownerID && ownerID === this.ownerID) {\n      this.entry[1] = value;\n      return this;\n    }\n    return new ValueNode(ownerID, this.keyHash, [key, value]);\n  }\n\n  SetRef(didChangeSize);\n  return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);\n};\n\n// #pragma Iterators\n\nArrayMapNode.prototype.iterate = HashCollisionNode.prototype.iterate =\n  function (fn, reverse) {\n    var entries = this.entries;\n    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {\n      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n        return false;\n      }\n    }\n  };\n\nBitmapIndexedNode.prototype.iterate = HashArrayMapNode.prototype.iterate =\n  function (fn, reverse) {\n    var nodes = this.nodes;\n    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {\n      var node = nodes[reverse ? maxIndex - ii : ii];\n      if (node && node.iterate(fn, reverse) === false) {\n        return false;\n      }\n    }\n  };\n\n// eslint-disable-next-line no-unused-vars\nValueNode.prototype.iterate = function (fn, reverse) {\n  return fn(this.entry);\n};\n\nvar MapIterator = /*@__PURE__*/(function (Iterator) {\n  function MapIterator(map, type, reverse) {\n    this._type = type;\n    this._reverse = reverse;\n    this._stack = map._root && mapIteratorFrame(map._root);\n  }\n\n  if ( Iterator ) MapIterator.__proto__ = Iterator;\n  MapIterator.prototype = Object.create( Iterator && Iterator.prototype );\n  MapIterator.prototype.constructor = MapIterator;\n\n  MapIterator.prototype.next = function next () {\n    var type = this._type;\n    var stack = this._stack;\n    while (stack) {\n      var node = stack.node;\n      var index = stack.index++;\n      var maxIndex = (void 0);\n      if (node.entry) {\n        if (index === 0) {\n          return mapIteratorValue(type, node.entry);\n        }\n      } else if (node.entries) {\n        maxIndex = node.entries.length - 1;\n        if (index <= maxIndex) {\n          return mapIteratorValue(\n            type,\n            node.entries[this._reverse ? maxIndex - index : index]\n          );\n        }\n      } else {\n        maxIndex = node.nodes.length - 1;\n        if (index <= maxIndex) {\n          var subNode = node.nodes[this._reverse ? maxIndex - index : index];\n          if (subNode) {\n            if (subNode.entry) {\n              return mapIteratorValue(type, subNode.entry);\n            }\n            stack = this._stack = mapIteratorFrame(subNode, stack);\n          }\n          continue;\n        }\n      }\n      stack = this._stack = this._stack.__prev;\n    }\n    return iteratorDone();\n  };\n\n  return MapIterator;\n}(Iterator));\n\nfunction mapIteratorValue(type, entry) {\n  return iteratorValue(type, entry[0], entry[1]);\n}\n\nfunction mapIteratorFrame(node, prev) {\n  return {\n    node: node,\n    index: 0,\n    __prev: prev,\n  };\n}\n\nfunction makeMap(size, root, ownerID, hash) {\n  var map = Object.create(MapPrototype);\n  map.size = size;\n  map._root = root;\n  map.__ownerID = ownerID;\n  map.__hash = hash;\n  map.__altered = false;\n  return map;\n}\n\nvar EMPTY_MAP;\nfunction emptyMap() {\n  return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n}\n\nfunction updateMap(map, k, v) {\n  var newRoot;\n  var newSize;\n  if (!map._root) {\n    if (v === NOT_SET) {\n      return map;\n    }\n    newSize = 1;\n    newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);\n  } else {\n    var didChangeSize = MakeRef();\n    var didAlter = MakeRef();\n    newRoot = updateNode(\n      map._root,\n      map.__ownerID,\n      0,\n      undefined,\n      k,\n      v,\n      didChangeSize,\n      didAlter\n    );\n    if (!didAlter.value) {\n      return map;\n    }\n    newSize = map.size + (didChangeSize.value ? (v === NOT_SET ? -1 : 1) : 0);\n  }\n  if (map.__ownerID) {\n    map.size = newSize;\n    map._root = newRoot;\n    map.__hash = undefined;\n    map.__altered = true;\n    return map;\n  }\n  return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n}\n\nfunction updateNode(\n  node,\n  ownerID,\n  shift,\n  keyHash,\n  key,\n  value,\n  didChangeSize,\n  didAlter\n) {\n  if (!node) {\n    if (value === NOT_SET) {\n      return node;\n    }\n    SetRef(didAlter);\n    SetRef(didChangeSize);\n    return new ValueNode(ownerID, keyHash, [key, value]);\n  }\n  return node.update(\n    ownerID,\n    shift,\n    keyHash,\n    key,\n    value,\n    didChangeSize,\n    didAlter\n  );\n}\n\nfunction isLeafNode(node) {\n  return (\n    node.constructor === ValueNode || node.constructor === HashCollisionNode\n  );\n}\n\nfunction mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n  if (node.keyHash === keyHash) {\n    return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);\n  }\n\n  var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n  var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\n  var newNode;\n  var nodes =\n    idx1 === idx2\n      ? [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)]\n      : ((newNode = new ValueNode(ownerID, keyHash, entry)),\n        idx1 < idx2 ? [node, newNode] : [newNode, node]);\n\n  return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);\n}\n\nfunction createNodes(ownerID, entries, key, value) {\n  if (!ownerID) {\n    ownerID = new OwnerID();\n  }\n  var node = new ValueNode(ownerID, hash(key), [key, value]);\n  for (var ii = 0; ii < entries.length; ii++) {\n    var entry = entries[ii];\n    node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n  }\n  return node;\n}\n\nfunction packNodes(ownerID, nodes, count, excluding) {\n  var bitmap = 0;\n  var packedII = 0;\n  var packedNodes = new Array(count);\n  for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {\n    var node = nodes[ii];\n    if (node !== undefined && ii !== excluding) {\n      bitmap |= bit;\n      packedNodes[packedII++] = node;\n    }\n  }\n  return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n}\n\nfunction expandNodes(ownerID, nodes, bitmap, including, node) {\n  var count = 0;\n  var expandedNodes = new Array(SIZE);\n  for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {\n    expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n  }\n  expandedNodes[including] = node;\n  return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n}\n\nfunction popCount(x) {\n  x -= (x >> 1) & 0x55555555;\n  x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n  x = (x + (x >> 4)) & 0x0f0f0f0f;\n  x += x >> 8;\n  x += x >> 16;\n  return x & 0x7f;\n}\n\nfunction setAt(array, idx, val, canEdit) {\n  var newArray = canEdit ? array : arrCopy(array);\n  newArray[idx] = val;\n  return newArray;\n}\n\nfunction spliceIn(array, idx, val, canEdit) {\n  var newLen = array.length + 1;\n  if (canEdit && idx + 1 === newLen) {\n    array[idx] = val;\n    return array;\n  }\n  var newArray = new Array(newLen);\n  var after = 0;\n  for (var ii = 0; ii < newLen; ii++) {\n    if (ii === idx) {\n      newArray[ii] = val;\n      after = -1;\n    } else {\n      newArray[ii] = array[ii + after];\n    }\n  }\n  return newArray;\n}\n\nfunction spliceOut(array, idx, canEdit) {\n  var newLen = array.length - 1;\n  if (canEdit && idx === newLen) {\n    array.pop();\n    return array;\n  }\n  var newArray = new Array(newLen);\n  var after = 0;\n  for (var ii = 0; ii < newLen; ii++) {\n    if (ii === idx) {\n      after = 1;\n    }\n    newArray[ii] = array[ii + after];\n  }\n  return newArray;\n}\n\nvar MAX_ARRAY_MAP_SIZE = SIZE / 4;\nvar MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\nvar MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n\nvar IS_LIST_SYMBOL = '@@__IMMUTABLE_LIST__@@';\n\nfunction isList(maybeList) {\n  return Boolean(maybeList && maybeList[IS_LIST_SYMBOL]);\n}\n\nvar List = /*@__PURE__*/(function (IndexedCollection) {\n  function List(value) {\n    var empty = emptyList();\n    if (value === undefined || value === null) {\n      return empty;\n    }\n    if (isList(value)) {\n      return value;\n    }\n    var iter = IndexedCollection(value);\n    var size = iter.size;\n    if (size === 0) {\n      return empty;\n    }\n    assertNotInfinite(size);\n    if (size > 0 && size < SIZE) {\n      return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n    }\n    return empty.withMutations(function (list) {\n      list.setSize(size);\n      iter.forEach(function (v, i) { return list.set(i, v); });\n    });\n  }\n\n  if ( IndexedCollection ) List.__proto__ = IndexedCollection;\n  List.prototype = Object.create( IndexedCollection && IndexedCollection.prototype );\n  List.prototype.constructor = List;\n\n  List.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  List.prototype.toString = function toString () {\n    return this.__toString('List [', ']');\n  };\n\n  // @pragma Access\n\n  List.prototype.get = function get (index, notSetValue) {\n    index = wrapIndex(this, index);\n    if (index >= 0 && index < this.size) {\n      index += this._origin;\n      var node = listNodeFor(this, index);\n      return node && node.array[index & MASK];\n    }\n    return notSetValue;\n  };\n\n  // @pragma Modification\n\n  List.prototype.set = function set (index, value) {\n    return updateList(this, index, value);\n  };\n\n  List.prototype.remove = function remove (index) {\n    return !this.has(index)\n      ? this\n      : index === 0\n      ? this.shift()\n      : index === this.size - 1\n      ? this.pop()\n      : this.splice(index, 1);\n  };\n\n  List.prototype.insert = function insert (index, value) {\n    return this.splice(index, 0, value);\n  };\n\n  List.prototype.clear = function clear () {\n    if (this.size === 0) {\n      return this;\n    }\n    if (this.__ownerID) {\n      this.size = this._origin = this._capacity = 0;\n      this._level = SHIFT;\n      this._root = this._tail = this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return emptyList();\n  };\n\n  List.prototype.push = function push (/*...values*/) {\n    var values = arguments;\n    var oldSize = this.size;\n    return this.withMutations(function (list) {\n      setListBounds(list, 0, oldSize + values.length);\n      for (var ii = 0; ii < values.length; ii++) {\n        list.set(oldSize + ii, values[ii]);\n      }\n    });\n  };\n\n  List.prototype.pop = function pop () {\n    return setListBounds(this, 0, -1);\n  };\n\n  List.prototype.unshift = function unshift (/*...values*/) {\n    var values = arguments;\n    return this.withMutations(function (list) {\n      setListBounds(list, -values.length);\n      for (var ii = 0; ii < values.length; ii++) {\n        list.set(ii, values[ii]);\n      }\n    });\n  };\n\n  List.prototype.shift = function shift () {\n    return setListBounds(this, 1);\n  };\n\n  // @pragma Composition\n\n  List.prototype.concat = function concat (/*...collections*/) {\n    var arguments$1 = arguments;\n\n    var seqs = [];\n    for (var i = 0; i < arguments.length; i++) {\n      var argument = arguments$1[i];\n      var seq = IndexedCollection(\n        typeof argument !== 'string' && hasIterator(argument)\n          ? argument\n          : [argument]\n      );\n      if (seq.size !== 0) {\n        seqs.push(seq);\n      }\n    }\n    if (seqs.length === 0) {\n      return this;\n    }\n    if (this.size === 0 && !this.__ownerID && seqs.length === 1) {\n      return this.constructor(seqs[0]);\n    }\n    return this.withMutations(function (list) {\n      seqs.forEach(function (seq) { return seq.forEach(function (value) { return list.push(value); }); });\n    });\n  };\n\n  List.prototype.setSize = function setSize (size) {\n    return setListBounds(this, 0, size);\n  };\n\n  List.prototype.map = function map (mapper, context) {\n    var this$1$1 = this;\n\n    return this.withMutations(function (list) {\n      for (var i = 0; i < this$1$1.size; i++) {\n        list.set(i, mapper.call(context, list.get(i), i, this$1$1));\n      }\n    });\n  };\n\n  // @pragma Iteration\n\n  List.prototype.slice = function slice (begin, end) {\n    var size = this.size;\n    if (wholeSlice(begin, end, size)) {\n      return this;\n    }\n    return setListBounds(\n      this,\n      resolveBegin(begin, size),\n      resolveEnd(end, size)\n    );\n  };\n\n  List.prototype.__iterator = function __iterator (type, reverse) {\n    var index = reverse ? this.size : 0;\n    var values = iterateList(this, reverse);\n    return new Iterator(function () {\n      var value = values();\n      return value === DONE\n        ? iteratorDone()\n        : iteratorValue(type, reverse ? --index : index++, value);\n    });\n  };\n\n  List.prototype.__iterate = function __iterate (fn, reverse) {\n    var index = reverse ? this.size : 0;\n    var values = iterateList(this, reverse);\n    var value;\n    while ((value = values()) !== DONE) {\n      if (fn(value, reverse ? --index : index++, this) === false) {\n        break;\n      }\n    }\n    return index;\n  };\n\n  List.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    if (!ownerID) {\n      if (this.size === 0) {\n        return emptyList();\n      }\n      this.__ownerID = ownerID;\n      this.__altered = false;\n      return this;\n    }\n    return makeList(\n      this._origin,\n      this._capacity,\n      this._level,\n      this._root,\n      this._tail,\n      ownerID,\n      this.__hash\n    );\n  };\n\n  return List;\n}(IndexedCollection));\n\nList.isList = isList;\n\nvar ListPrototype = List.prototype;\nListPrototype[IS_LIST_SYMBOL] = true;\nListPrototype[DELETE] = ListPrototype.remove;\nListPrototype.merge = ListPrototype.concat;\nListPrototype.setIn = setIn;\nListPrototype.deleteIn = ListPrototype.removeIn = deleteIn;\nListPrototype.update = update;\nListPrototype.updateIn = updateIn;\nListPrototype.mergeIn = mergeIn;\nListPrototype.mergeDeepIn = mergeDeepIn;\nListPrototype.withMutations = withMutations;\nListPrototype.wasAltered = wasAltered;\nListPrototype.asImmutable = asImmutable;\nListPrototype['@@transducer/init'] = ListPrototype.asMutable = asMutable;\nListPrototype['@@transducer/step'] = function (result, arr) {\n  return result.push(arr);\n};\nListPrototype['@@transducer/result'] = function (obj) {\n  return obj.asImmutable();\n};\n\nvar VNode = function VNode(array, ownerID) {\n  this.array = array;\n  this.ownerID = ownerID;\n};\n\n// TODO: seems like these methods are very similar\n\nVNode.prototype.removeBefore = function removeBefore (ownerID, level, index) {\n  if (index === level ? 1 << level : this.array.length === 0) {\n    return this;\n  }\n  var originIndex = (index >>> level) & MASK;\n  if (originIndex >= this.array.length) {\n    return new VNode([], ownerID);\n  }\n  var removingFirst = originIndex === 0;\n  var newChild;\n  if (level > 0) {\n    var oldChild = this.array[originIndex];\n    newChild =\n      oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);\n    if (newChild === oldChild && removingFirst) {\n      return this;\n    }\n  }\n  if (removingFirst && !newChild) {\n    return this;\n  }\n  var editable = editableVNode(this, ownerID);\n  if (!removingFirst) {\n    for (var ii = 0; ii < originIndex; ii++) {\n      editable.array[ii] = undefined;\n    }\n  }\n  if (newChild) {\n    editable.array[originIndex] = newChild;\n  }\n  return editable;\n};\n\nVNode.prototype.removeAfter = function removeAfter (ownerID, level, index) {\n  if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n    return this;\n  }\n  var sizeIndex = ((index - 1) >>> level) & MASK;\n  if (sizeIndex >= this.array.length) {\n    return this;\n  }\n\n  var newChild;\n  if (level > 0) {\n    var oldChild = this.array[sizeIndex];\n    newChild =\n      oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);\n    if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n      return this;\n    }\n  }\n\n  var editable = editableVNode(this, ownerID);\n  editable.array.splice(sizeIndex + 1);\n  if (newChild) {\n    editable.array[sizeIndex] = newChild;\n  }\n  return editable;\n};\n\nvar DONE = {};\n\nfunction iterateList(list, reverse) {\n  var left = list._origin;\n  var right = list._capacity;\n  var tailPos = getTailOffset(right);\n  var tail = list._tail;\n\n  return iterateNodeOrLeaf(list._root, list._level, 0);\n\n  function iterateNodeOrLeaf(node, level, offset) {\n    return level === 0\n      ? iterateLeaf(node, offset)\n      : iterateNode(node, level, offset);\n  }\n\n  function iterateLeaf(node, offset) {\n    var array = offset === tailPos ? tail && tail.array : node && node.array;\n    var from = offset > left ? 0 : left - offset;\n    var to = right - offset;\n    if (to > SIZE) {\n      to = SIZE;\n    }\n    return function () {\n      if (from === to) {\n        return DONE;\n      }\n      var idx = reverse ? --to : from++;\n      return array && array[idx];\n    };\n  }\n\n  function iterateNode(node, level, offset) {\n    var values;\n    var array = node && node.array;\n    var from = offset > left ? 0 : (left - offset) >> level;\n    var to = ((right - offset) >> level) + 1;\n    if (to > SIZE) {\n      to = SIZE;\n    }\n    return function () {\n      while (true) {\n        if (values) {\n          var value = values();\n          if (value !== DONE) {\n            return value;\n          }\n          values = null;\n        }\n        if (from === to) {\n          return DONE;\n        }\n        var idx = reverse ? --to : from++;\n        values = iterateNodeOrLeaf(\n          array && array[idx],\n          level - SHIFT,\n          offset + (idx << level)\n        );\n      }\n    };\n  }\n}\n\nfunction makeList(origin, capacity, level, root, tail, ownerID, hash) {\n  var list = Object.create(ListPrototype);\n  list.size = capacity - origin;\n  list._origin = origin;\n  list._capacity = capacity;\n  list._level = level;\n  list._root = root;\n  list._tail = tail;\n  list.__ownerID = ownerID;\n  list.__hash = hash;\n  list.__altered = false;\n  return list;\n}\n\nvar EMPTY_LIST;\nfunction emptyList() {\n  return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n}\n\nfunction updateList(list, index, value) {\n  index = wrapIndex(list, index);\n\n  if (index !== index) {\n    return list;\n  }\n\n  if (index >= list.size || index < 0) {\n    return list.withMutations(function (list) {\n      index < 0\n        ? setListBounds(list, index).set(0, value)\n        : setListBounds(list, 0, index + 1).set(index, value);\n    });\n  }\n\n  index += list._origin;\n\n  var newTail = list._tail;\n  var newRoot = list._root;\n  var didAlter = MakeRef();\n  if (index >= getTailOffset(list._capacity)) {\n    newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n  } else {\n    newRoot = updateVNode(\n      newRoot,\n      list.__ownerID,\n      list._level,\n      index,\n      value,\n      didAlter\n    );\n  }\n\n  if (!didAlter.value) {\n    return list;\n  }\n\n  if (list.__ownerID) {\n    list._root = newRoot;\n    list._tail = newTail;\n    list.__hash = undefined;\n    list.__altered = true;\n    return list;\n  }\n  return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n}\n\nfunction updateVNode(node, ownerID, level, index, value, didAlter) {\n  var idx = (index >>> level) & MASK;\n  var nodeHas = node && idx < node.array.length;\n  if (!nodeHas && value === undefined) {\n    return node;\n  }\n\n  var newNode;\n\n  if (level > 0) {\n    var lowerNode = node && node.array[idx];\n    var newLowerNode = updateVNode(\n      lowerNode,\n      ownerID,\n      level - SHIFT,\n      index,\n      value,\n      didAlter\n    );\n    if (newLowerNode === lowerNode) {\n      return node;\n    }\n    newNode = editableVNode(node, ownerID);\n    newNode.array[idx] = newLowerNode;\n    return newNode;\n  }\n\n  if (nodeHas && node.array[idx] === value) {\n    return node;\n  }\n\n  if (didAlter) {\n    SetRef(didAlter);\n  }\n\n  newNode = editableVNode(node, ownerID);\n  if (value === undefined && idx === newNode.array.length - 1) {\n    newNode.array.pop();\n  } else {\n    newNode.array[idx] = value;\n  }\n  return newNode;\n}\n\nfunction editableVNode(node, ownerID) {\n  if (ownerID && node && ownerID === node.ownerID) {\n    return node;\n  }\n  return new VNode(node ? node.array.slice() : [], ownerID);\n}\n\nfunction listNodeFor(list, rawIndex) {\n  if (rawIndex >= getTailOffset(list._capacity)) {\n    return list._tail;\n  }\n  if (rawIndex < 1 << (list._level + SHIFT)) {\n    var node = list._root;\n    var level = list._level;\n    while (node && level > 0) {\n      node = node.array[(rawIndex >>> level) & MASK];\n      level -= SHIFT;\n    }\n    return node;\n  }\n}\n\nfunction setListBounds(list, begin, end) {\n  // Sanitize begin & end using this shorthand for ToInt32(argument)\n  // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n  if (begin !== undefined) {\n    begin |= 0;\n  }\n  if (end !== undefined) {\n    end |= 0;\n  }\n  var owner = list.__ownerID || new OwnerID();\n  var oldOrigin = list._origin;\n  var oldCapacity = list._capacity;\n  var newOrigin = oldOrigin + begin;\n  var newCapacity =\n    end === undefined\n      ? oldCapacity\n      : end < 0\n      ? oldCapacity + end\n      : oldOrigin + end;\n  if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n    return list;\n  }\n\n  // If it's going to end after it starts, it's empty.\n  if (newOrigin >= newCapacity) {\n    return list.clear();\n  }\n\n  var newLevel = list._level;\n  var newRoot = list._root;\n\n  // New origin might need creating a higher root.\n  var offsetShift = 0;\n  while (newOrigin + offsetShift < 0) {\n    newRoot = new VNode(\n      newRoot && newRoot.array.length ? [undefined, newRoot] : [],\n      owner\n    );\n    newLevel += SHIFT;\n    offsetShift += 1 << newLevel;\n  }\n  if (offsetShift) {\n    newOrigin += offsetShift;\n    oldOrigin += offsetShift;\n    newCapacity += offsetShift;\n    oldCapacity += offsetShift;\n  }\n\n  var oldTailOffset = getTailOffset(oldCapacity);\n  var newTailOffset = getTailOffset(newCapacity);\n\n  // New size might need creating a higher root.\n  while (newTailOffset >= 1 << (newLevel + SHIFT)) {\n    newRoot = new VNode(\n      newRoot && newRoot.array.length ? [newRoot] : [],\n      owner\n    );\n    newLevel += SHIFT;\n  }\n\n  // Locate or create the new tail.\n  var oldTail = list._tail;\n  var newTail =\n    newTailOffset < oldTailOffset\n      ? listNodeFor(list, newCapacity - 1)\n      : newTailOffset > oldTailOffset\n      ? new VNode([], owner)\n      : oldTail;\n\n  // Merge Tail into tree.\n  if (\n    oldTail &&\n    newTailOffset > oldTailOffset &&\n    newOrigin < oldCapacity &&\n    oldTail.array.length\n  ) {\n    newRoot = editableVNode(newRoot, owner);\n    var node = newRoot;\n    for (var level = newLevel; level > SHIFT; level -= SHIFT) {\n      var idx = (oldTailOffset >>> level) & MASK;\n      node = node.array[idx] = editableVNode(node.array[idx], owner);\n    }\n    node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;\n  }\n\n  // If the size has been reduced, there's a chance the tail needs to be trimmed.\n  if (newCapacity < oldCapacity) {\n    newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n  }\n\n  // If the new origin is within the tail, then we do not need a root.\n  if (newOrigin >= newTailOffset) {\n    newOrigin -= newTailOffset;\n    newCapacity -= newTailOffset;\n    newLevel = SHIFT;\n    newRoot = null;\n    newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n\n    // Otherwise, if the root has been trimmed, garbage collect.\n  } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n    offsetShift = 0;\n\n    // Identify the new top root node of the subtree of the old root.\n    while (newRoot) {\n      var beginIndex = (newOrigin >>> newLevel) & MASK;\n      if ((beginIndex !== newTailOffset >>> newLevel) & MASK) {\n        break;\n      }\n      if (beginIndex) {\n        offsetShift += (1 << newLevel) * beginIndex;\n      }\n      newLevel -= SHIFT;\n      newRoot = newRoot.array[beginIndex];\n    }\n\n    // Trim the new sides of the new root.\n    if (newRoot && newOrigin > oldOrigin) {\n      newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n    }\n    if (newRoot && newTailOffset < oldTailOffset) {\n      newRoot = newRoot.removeAfter(\n        owner,\n        newLevel,\n        newTailOffset - offsetShift\n      );\n    }\n    if (offsetShift) {\n      newOrigin -= offsetShift;\n      newCapacity -= offsetShift;\n    }\n  }\n\n  if (list.__ownerID) {\n    list.size = newCapacity - newOrigin;\n    list._origin = newOrigin;\n    list._capacity = newCapacity;\n    list._level = newLevel;\n    list._root = newRoot;\n    list._tail = newTail;\n    list.__hash = undefined;\n    list.__altered = true;\n    return list;\n  }\n  return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n}\n\nfunction getTailOffset(size) {\n  return size < SIZE ? 0 : ((size - 1) >>> SHIFT) << SHIFT;\n}\n\nvar OrderedMap = /*@__PURE__*/(function (Map) {\n  function OrderedMap(value) {\n    return value === undefined || value === null\n      ? emptyOrderedMap()\n      : isOrderedMap(value)\n      ? value\n      : emptyOrderedMap().withMutations(function (map) {\n          var iter = KeyedCollection(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function (v, k) { return map.set(k, v); });\n        });\n  }\n\n  if ( Map ) OrderedMap.__proto__ = Map;\n  OrderedMap.prototype = Object.create( Map && Map.prototype );\n  OrderedMap.prototype.constructor = OrderedMap;\n\n  OrderedMap.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  OrderedMap.prototype.toString = function toString () {\n    return this.__toString('OrderedMap {', '}');\n  };\n\n  // @pragma Access\n\n  OrderedMap.prototype.get = function get (k, notSetValue) {\n    var index = this._map.get(k);\n    return index !== undefined ? this._list.get(index)[1] : notSetValue;\n  };\n\n  // @pragma Modification\n\n  OrderedMap.prototype.clear = function clear () {\n    if (this.size === 0) {\n      return this;\n    }\n    if (this.__ownerID) {\n      this.size = 0;\n      this._map.clear();\n      this._list.clear();\n      this.__altered = true;\n      return this;\n    }\n    return emptyOrderedMap();\n  };\n\n  OrderedMap.prototype.set = function set (k, v) {\n    return updateOrderedMap(this, k, v);\n  };\n\n  OrderedMap.prototype.remove = function remove (k) {\n    return updateOrderedMap(this, k, NOT_SET);\n  };\n\n  OrderedMap.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1$1 = this;\n\n    return this._list.__iterate(\n      function (entry) { return entry && fn(entry[1], entry[0], this$1$1); },\n      reverse\n    );\n  };\n\n  OrderedMap.prototype.__iterator = function __iterator (type, reverse) {\n    return this._list.fromEntrySeq().__iterator(type, reverse);\n  };\n\n  OrderedMap.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    var newMap = this._map.__ensureOwner(ownerID);\n    var newList = this._list.__ensureOwner(ownerID);\n    if (!ownerID) {\n      if (this.size === 0) {\n        return emptyOrderedMap();\n      }\n      this.__ownerID = ownerID;\n      this.__altered = false;\n      this._map = newMap;\n      this._list = newList;\n      return this;\n    }\n    return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n  };\n\n  return OrderedMap;\n}(Map));\n\nOrderedMap.isOrderedMap = isOrderedMap;\n\nOrderedMap.prototype[IS_ORDERED_SYMBOL] = true;\nOrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n\nfunction makeOrderedMap(map, list, ownerID, hash) {\n  var omap = Object.create(OrderedMap.prototype);\n  omap.size = map ? map.size : 0;\n  omap._map = map;\n  omap._list = list;\n  omap.__ownerID = ownerID;\n  omap.__hash = hash;\n  omap.__altered = false;\n  return omap;\n}\n\nvar EMPTY_ORDERED_MAP;\nfunction emptyOrderedMap() {\n  return (\n    EMPTY_ORDERED_MAP ||\n    (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()))\n  );\n}\n\nfunction updateOrderedMap(omap, k, v) {\n  var map = omap._map;\n  var list = omap._list;\n  var i = map.get(k);\n  var has = i !== undefined;\n  var newMap;\n  var newList;\n  if (v === NOT_SET) {\n    // removed\n    if (!has) {\n      return omap;\n    }\n    if (list.size >= SIZE && list.size >= map.size * 2) {\n      newList = list.filter(function (entry, idx) { return entry !== undefined && i !== idx; });\n      newMap = newList\n        .toKeyedSeq()\n        .map(function (entry) { return entry[0]; })\n        .flip()\n        .toMap();\n      if (omap.__ownerID) {\n        newMap.__ownerID = newList.__ownerID = omap.__ownerID;\n      }\n    } else {\n      newMap = map.remove(k);\n      newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n    }\n  } else if (has) {\n    if (v === list.get(i)[1]) {\n      return omap;\n    }\n    newMap = map;\n    newList = list.set(i, [k, v]);\n  } else {\n    newMap = map.set(k, list.size);\n    newList = list.set(list.size, [k, v]);\n  }\n  if (omap.__ownerID) {\n    omap.size = newMap.size;\n    omap._map = newMap;\n    omap._list = newList;\n    omap.__hash = undefined;\n    omap.__altered = true;\n    return omap;\n  }\n  return makeOrderedMap(newMap, newList);\n}\n\nvar IS_STACK_SYMBOL = '@@__IMMUTABLE_STACK__@@';\n\nfunction isStack(maybeStack) {\n  return Boolean(maybeStack && maybeStack[IS_STACK_SYMBOL]);\n}\n\nvar Stack = /*@__PURE__*/(function (IndexedCollection) {\n  function Stack(value) {\n    return value === undefined || value === null\n      ? emptyStack()\n      : isStack(value)\n      ? value\n      : emptyStack().pushAll(value);\n  }\n\n  if ( IndexedCollection ) Stack.__proto__ = IndexedCollection;\n  Stack.prototype = Object.create( IndexedCollection && IndexedCollection.prototype );\n  Stack.prototype.constructor = Stack;\n\n  Stack.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  Stack.prototype.toString = function toString () {\n    return this.__toString('Stack [', ']');\n  };\n\n  // @pragma Access\n\n  Stack.prototype.get = function get (index, notSetValue) {\n    var head = this._head;\n    index = wrapIndex(this, index);\n    while (head && index--) {\n      head = head.next;\n    }\n    return head ? head.value : notSetValue;\n  };\n\n  Stack.prototype.peek = function peek () {\n    return this._head && this._head.value;\n  };\n\n  // @pragma Modification\n\n  Stack.prototype.push = function push (/*...values*/) {\n    var arguments$1 = arguments;\n\n    if (arguments.length === 0) {\n      return this;\n    }\n    var newSize = this.size + arguments.length;\n    var head = this._head;\n    for (var ii = arguments.length - 1; ii >= 0; ii--) {\n      head = {\n        value: arguments$1[ii],\n        next: head,\n      };\n    }\n    if (this.__ownerID) {\n      this.size = newSize;\n      this._head = head;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return makeStack(newSize, head);\n  };\n\n  Stack.prototype.pushAll = function pushAll (iter) {\n    iter = IndexedCollection(iter);\n    if (iter.size === 0) {\n      return this;\n    }\n    if (this.size === 0 && isStack(iter)) {\n      return iter;\n    }\n    assertNotInfinite(iter.size);\n    var newSize = this.size;\n    var head = this._head;\n    iter.__iterate(function (value) {\n      newSize++;\n      head = {\n        value: value,\n        next: head,\n      };\n    }, /* reverse */ true);\n    if (this.__ownerID) {\n      this.size = newSize;\n      this._head = head;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return makeStack(newSize, head);\n  };\n\n  Stack.prototype.pop = function pop () {\n    return this.slice(1);\n  };\n\n  Stack.prototype.clear = function clear () {\n    if (this.size === 0) {\n      return this;\n    }\n    if (this.__ownerID) {\n      this.size = 0;\n      this._head = undefined;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return emptyStack();\n  };\n\n  Stack.prototype.slice = function slice (begin, end) {\n    if (wholeSlice(begin, end, this.size)) {\n      return this;\n    }\n    var resolvedBegin = resolveBegin(begin, this.size);\n    var resolvedEnd = resolveEnd(end, this.size);\n    if (resolvedEnd !== this.size) {\n      // super.slice(begin, end);\n      return IndexedCollection.prototype.slice.call(this, begin, end);\n    }\n    var newSize = this.size - resolvedBegin;\n    var head = this._head;\n    while (resolvedBegin--) {\n      head = head.next;\n    }\n    if (this.__ownerID) {\n      this.size = newSize;\n      this._head = head;\n      this.__hash = undefined;\n      this.__altered = true;\n      return this;\n    }\n    return makeStack(newSize, head);\n  };\n\n  // @pragma Mutability\n\n  Stack.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    if (!ownerID) {\n      if (this.size === 0) {\n        return emptyStack();\n      }\n      this.__ownerID = ownerID;\n      this.__altered = false;\n      return this;\n    }\n    return makeStack(this.size, this._head, ownerID, this.__hash);\n  };\n\n  // @pragma Iteration\n\n  Stack.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1$1 = this;\n\n    if (reverse) {\n      return new ArraySeq(this.toArray()).__iterate(\n        function (v, k) { return fn(v, k, this$1$1); },\n        reverse\n      );\n    }\n    var iterations = 0;\n    var node = this._head;\n    while (node) {\n      if (fn(node.value, iterations++, this) === false) {\n        break;\n      }\n      node = node.next;\n    }\n    return iterations;\n  };\n\n  Stack.prototype.__iterator = function __iterator (type, reverse) {\n    if (reverse) {\n      return new ArraySeq(this.toArray()).__iterator(type, reverse);\n    }\n    var iterations = 0;\n    var node = this._head;\n    return new Iterator(function () {\n      if (node) {\n        var value = node.value;\n        node = node.next;\n        return iteratorValue(type, iterations++, value);\n      }\n      return iteratorDone();\n    });\n  };\n\n  return Stack;\n}(IndexedCollection));\n\nStack.isStack = isStack;\n\nvar StackPrototype = Stack.prototype;\nStackPrototype[IS_STACK_SYMBOL] = true;\nStackPrototype.shift = StackPrototype.pop;\nStackPrototype.unshift = StackPrototype.push;\nStackPrototype.unshiftAll = StackPrototype.pushAll;\nStackPrototype.withMutations = withMutations;\nStackPrototype.wasAltered = wasAltered;\nStackPrototype.asImmutable = asImmutable;\nStackPrototype['@@transducer/init'] = StackPrototype.asMutable = asMutable;\nStackPrototype['@@transducer/step'] = function (result, arr) {\n  return result.unshift(arr);\n};\nStackPrototype['@@transducer/result'] = function (obj) {\n  return obj.asImmutable();\n};\n\nfunction makeStack(size, head, ownerID, hash) {\n  var map = Object.create(StackPrototype);\n  map.size = size;\n  map._head = head;\n  map.__ownerID = ownerID;\n  map.__hash = hash;\n  map.__altered = false;\n  return map;\n}\n\nvar EMPTY_STACK;\nfunction emptyStack() {\n  return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n}\n\nvar IS_SET_SYMBOL = '@@__IMMUTABLE_SET__@@';\n\nfunction isSet(maybeSet) {\n  return Boolean(maybeSet && maybeSet[IS_SET_SYMBOL]);\n}\n\nfunction isOrderedSet(maybeOrderedSet) {\n  return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n}\n\nfunction deepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (\n    !isCollection(b) ||\n    (a.size !== undefined && b.size !== undefined && a.size !== b.size) ||\n    (a.__hash !== undefined &&\n      b.__hash !== undefined &&\n      a.__hash !== b.__hash) ||\n    isKeyed(a) !== isKeyed(b) ||\n    isIndexed(a) !== isIndexed(b) ||\n    isOrdered(a) !== isOrdered(b)\n  ) {\n    return false;\n  }\n\n  if (a.size === 0 && b.size === 0) {\n    return true;\n  }\n\n  var notAssociative = !isAssociative(a);\n\n  if (isOrdered(a)) {\n    var entries = a.entries();\n    return (\n      b.every(function (v, k) {\n        var entry = entries.next().value;\n        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n      }) && entries.next().done\n    );\n  }\n\n  var flipped = false;\n\n  if (a.size === undefined) {\n    if (b.size === undefined) {\n      if (typeof a.cacheResult === 'function') {\n        a.cacheResult();\n      }\n    } else {\n      flipped = true;\n      var _ = a;\n      a = b;\n      b = _;\n    }\n  }\n\n  var allEqual = true;\n  var bSize = b.__iterate(function (v, k) {\n    if (\n      notAssociative\n        ? !a.has(v)\n        : flipped\n        ? !is(v, a.get(k, NOT_SET))\n        : !is(a.get(k, NOT_SET), v)\n    ) {\n      allEqual = false;\n      return false;\n    }\n  });\n\n  return allEqual && a.size === bSize;\n}\n\nfunction mixin(ctor, methods) {\n  var keyCopier = function (key) {\n    ctor.prototype[key] = methods[key];\n  };\n  Object.keys(methods).forEach(keyCopier);\n  Object.getOwnPropertySymbols &&\n    Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n  return ctor;\n}\n\nfunction toJS(value) {\n  if (!value || typeof value !== 'object') {\n    return value;\n  }\n  if (!isCollection(value)) {\n    if (!isDataStructure(value)) {\n      return value;\n    }\n    value = Seq(value);\n  }\n  if (isKeyed(value)) {\n    var result$1 = {};\n    value.__iterate(function (v, k) {\n      result$1[k] = toJS(v);\n    });\n    return result$1;\n  }\n  var result = [];\n  value.__iterate(function (v) {\n    result.push(toJS(v));\n  });\n  return result;\n}\n\nvar Set = /*@__PURE__*/(function (SetCollection) {\n  function Set(value) {\n    return value === undefined || value === null\n      ? emptySet()\n      : isSet(value) && !isOrdered(value)\n      ? value\n      : emptySet().withMutations(function (set) {\n          var iter = SetCollection(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function (v) { return set.add(v); });\n        });\n  }\n\n  if ( SetCollection ) Set.__proto__ = SetCollection;\n  Set.prototype = Object.create( SetCollection && SetCollection.prototype );\n  Set.prototype.constructor = Set;\n\n  Set.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  Set.fromKeys = function fromKeys (value) {\n    return this(KeyedCollection(value).keySeq());\n  };\n\n  Set.intersect = function intersect (sets) {\n    sets = Collection(sets).toArray();\n    return sets.length\n      ? SetPrototype.intersect.apply(Set(sets.pop()), sets)\n      : emptySet();\n  };\n\n  Set.union = function union (sets) {\n    sets = Collection(sets).toArray();\n    return sets.length\n      ? SetPrototype.union.apply(Set(sets.pop()), sets)\n      : emptySet();\n  };\n\n  Set.prototype.toString = function toString () {\n    return this.__toString('Set {', '}');\n  };\n\n  // @pragma Access\n\n  Set.prototype.has = function has (value) {\n    return this._map.has(value);\n  };\n\n  // @pragma Modification\n\n  Set.prototype.add = function add (value) {\n    return updateSet(this, this._map.set(value, value));\n  };\n\n  Set.prototype.remove = function remove (value) {\n    return updateSet(this, this._map.remove(value));\n  };\n\n  Set.prototype.clear = function clear () {\n    return updateSet(this, this._map.clear());\n  };\n\n  // @pragma Composition\n\n  Set.prototype.map = function map (mapper, context) {\n    var this$1$1 = this;\n\n    // keep track if the set is altered by the map function\n    var didChanges = false;\n\n    var newMap = updateSet(\n      this,\n      this._map.mapEntries(function (ref) {\n        var v = ref[1];\n\n        var mapped = mapper.call(context, v, v, this$1$1);\n\n        if (mapped !== v) {\n          didChanges = true;\n        }\n\n        return [mapped, mapped];\n      }, context)\n    );\n\n    return didChanges ? newMap : this;\n  };\n\n  Set.prototype.union = function union () {\n    var iters = [], len = arguments.length;\n    while ( len-- ) iters[ len ] = arguments[ len ];\n\n    iters = iters.filter(function (x) { return x.size !== 0; });\n    if (iters.length === 0) {\n      return this;\n    }\n    if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n      return this.constructor(iters[0]);\n    }\n    return this.withMutations(function (set) {\n      for (var ii = 0; ii < iters.length; ii++) {\n        SetCollection(iters[ii]).forEach(function (value) { return set.add(value); });\n      }\n    });\n  };\n\n  Set.prototype.intersect = function intersect () {\n    var iters = [], len = arguments.length;\n    while ( len-- ) iters[ len ] = arguments[ len ];\n\n    if (iters.length === 0) {\n      return this;\n    }\n    iters = iters.map(function (iter) { return SetCollection(iter); });\n    var toRemove = [];\n    this.forEach(function (value) {\n      if (!iters.every(function (iter) { return iter.includes(value); })) {\n        toRemove.push(value);\n      }\n    });\n    return this.withMutations(function (set) {\n      toRemove.forEach(function (value) {\n        set.remove(value);\n      });\n    });\n  };\n\n  Set.prototype.subtract = function subtract () {\n    var iters = [], len = arguments.length;\n    while ( len-- ) iters[ len ] = arguments[ len ];\n\n    if (iters.length === 0) {\n      return this;\n    }\n    iters = iters.map(function (iter) { return SetCollection(iter); });\n    var toRemove = [];\n    this.forEach(function (value) {\n      if (iters.some(function (iter) { return iter.includes(value); })) {\n        toRemove.push(value);\n      }\n    });\n    return this.withMutations(function (set) {\n      toRemove.forEach(function (value) {\n        set.remove(value);\n      });\n    });\n  };\n\n  Set.prototype.sort = function sort (comparator) {\n    // Late binding\n    return OrderedSet(sortFactory(this, comparator));\n  };\n\n  Set.prototype.sortBy = function sortBy (mapper, comparator) {\n    // Late binding\n    return OrderedSet(sortFactory(this, comparator, mapper));\n  };\n\n  Set.prototype.wasAltered = function wasAltered () {\n    return this._map.wasAltered();\n  };\n\n  Set.prototype.__iterate = function __iterate (fn, reverse) {\n    var this$1$1 = this;\n\n    return this._map.__iterate(function (k) { return fn(k, k, this$1$1); }, reverse);\n  };\n\n  Set.prototype.__iterator = function __iterator (type, reverse) {\n    return this._map.__iterator(type, reverse);\n  };\n\n  Set.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    var newMap = this._map.__ensureOwner(ownerID);\n    if (!ownerID) {\n      if (this.size === 0) {\n        return this.__empty();\n      }\n      this.__ownerID = ownerID;\n      this._map = newMap;\n      return this;\n    }\n    return this.__make(newMap, ownerID);\n  };\n\n  return Set;\n}(SetCollection));\n\nSet.isSet = isSet;\n\nvar SetPrototype = Set.prototype;\nSetPrototype[IS_SET_SYMBOL] = true;\nSetPrototype[DELETE] = SetPrototype.remove;\nSetPrototype.merge = SetPrototype.concat = SetPrototype.union;\nSetPrototype.withMutations = withMutations;\nSetPrototype.asImmutable = asImmutable;\nSetPrototype['@@transducer/init'] = SetPrototype.asMutable = asMutable;\nSetPrototype['@@transducer/step'] = function (result, arr) {\n  return result.add(arr);\n};\nSetPrototype['@@transducer/result'] = function (obj) {\n  return obj.asImmutable();\n};\n\nSetPrototype.__empty = emptySet;\nSetPrototype.__make = makeSet;\n\nfunction updateSet(set, newMap) {\n  if (set.__ownerID) {\n    set.size = newMap.size;\n    set._map = newMap;\n    return set;\n  }\n  return newMap === set._map\n    ? set\n    : newMap.size === 0\n    ? set.__empty()\n    : set.__make(newMap);\n}\n\nfunction makeSet(map, ownerID) {\n  var set = Object.create(SetPrototype);\n  set.size = map ? map.size : 0;\n  set._map = map;\n  set.__ownerID = ownerID;\n  return set;\n}\n\nvar EMPTY_SET;\nfunction emptySet() {\n  return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n}\n\n/**\n * Returns a lazy seq of nums from start (inclusive) to end\n * (exclusive), by step, where start defaults to 0, step to 1, and end to\n * infinity. When start is equal to end, returns empty list.\n */\nvar Range = /*@__PURE__*/(function (IndexedSeq) {\n  function Range(start, end, step) {\n    if (!(this instanceof Range)) {\n      return new Range(start, end, step);\n    }\n    invariant(step !== 0, 'Cannot step a Range by 0');\n    start = start || 0;\n    if (end === undefined) {\n      end = Infinity;\n    }\n    step = step === undefined ? 1 : Math.abs(step);\n    if (end < start) {\n      step = -step;\n    }\n    this._start = start;\n    this._end = end;\n    this._step = step;\n    this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n    if (this.size === 0) {\n      if (EMPTY_RANGE) {\n        return EMPTY_RANGE;\n      }\n      EMPTY_RANGE = this;\n    }\n  }\n\n  if ( IndexedSeq ) Range.__proto__ = IndexedSeq;\n  Range.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );\n  Range.prototype.constructor = Range;\n\n  Range.prototype.toString = function toString () {\n    if (this.size === 0) {\n      return 'Range []';\n    }\n    return (\n      'Range [ ' +\n      this._start +\n      '...' +\n      this._end +\n      (this._step !== 1 ? ' by ' + this._step : '') +\n      ' ]'\n    );\n  };\n\n  Range.prototype.get = function get (index, notSetValue) {\n    return this.has(index)\n      ? this._start + wrapIndex(this, index) * this._step\n      : notSetValue;\n  };\n\n  Range.prototype.includes = function includes (searchValue) {\n    var possibleIndex = (searchValue - this._start) / this._step;\n    return (\n      possibleIndex >= 0 &&\n      possibleIndex < this.size &&\n      possibleIndex === Math.floor(possibleIndex)\n    );\n  };\n\n  Range.prototype.slice = function slice (begin, end) {\n    if (wholeSlice(begin, end, this.size)) {\n      return this;\n    }\n    begin = resolveBegin(begin, this.size);\n    end = resolveEnd(end, this.size);\n    if (end <= begin) {\n      return new Range(0, 0);\n    }\n    return new Range(\n      this.get(begin, this._end),\n      this.get(end, this._end),\n      this._step\n    );\n  };\n\n  Range.prototype.indexOf = function indexOf (searchValue) {\n    var offsetValue = searchValue - this._start;\n    if (offsetValue % this._step === 0) {\n      var index = offsetValue / this._step;\n      if (index >= 0 && index < this.size) {\n        return index;\n      }\n    }\n    return -1;\n  };\n\n  Range.prototype.lastIndexOf = function lastIndexOf (searchValue) {\n    return this.indexOf(searchValue);\n  };\n\n  Range.prototype.__iterate = function __iterate (fn, reverse) {\n    var size = this.size;\n    var step = this._step;\n    var value = reverse ? this._start + (size - 1) * step : this._start;\n    var i = 0;\n    while (i !== size) {\n      if (fn(value, reverse ? size - ++i : i++, this) === false) {\n        break;\n      }\n      value += reverse ? -step : step;\n    }\n    return i;\n  };\n\n  Range.prototype.__iterator = function __iterator (type, reverse) {\n    var size = this.size;\n    var step = this._step;\n    var value = reverse ? this._start + (size - 1) * step : this._start;\n    var i = 0;\n    return new Iterator(function () {\n      if (i === size) {\n        return iteratorDone();\n      }\n      var v = value;\n      value += reverse ? -step : step;\n      return iteratorValue(type, reverse ? size - ++i : i++, v);\n    });\n  };\n\n  Range.prototype.equals = function equals (other) {\n    return other instanceof Range\n      ? this._start === other._start &&\n          this._end === other._end &&\n          this._step === other._step\n      : deepEqual(this, other);\n  };\n\n  return Range;\n}(IndexedSeq));\n\nvar EMPTY_RANGE;\n\nfunction getIn$1(collection, searchKeyPath, notSetValue) {\n  var keyPath = coerceKeyPath(searchKeyPath);\n  var i = 0;\n  while (i !== keyPath.length) {\n    collection = get(collection, keyPath[i++], NOT_SET);\n    if (collection === NOT_SET) {\n      return notSetValue;\n    }\n  }\n  return collection;\n}\n\nfunction getIn(searchKeyPath, notSetValue) {\n  return getIn$1(this, searchKeyPath, notSetValue);\n}\n\nfunction hasIn$1(collection, keyPath) {\n  return getIn$1(collection, keyPath, NOT_SET) !== NOT_SET;\n}\n\nfunction hasIn(searchKeyPath) {\n  return hasIn$1(this, searchKeyPath);\n}\n\nfunction toObject() {\n  assertNotInfinite(this.size);\n  var object = {};\n  this.__iterate(function (v, k) {\n    object[k] = v;\n  });\n  return object;\n}\n\n// Note: all of these methods are deprecated.\nCollection.isIterable = isCollection;\nCollection.isKeyed = isKeyed;\nCollection.isIndexed = isIndexed;\nCollection.isAssociative = isAssociative;\nCollection.isOrdered = isOrdered;\n\nCollection.Iterator = Iterator;\n\nmixin(Collection, {\n  // ### Conversion to other types\n\n  toArray: function toArray() {\n    assertNotInfinite(this.size);\n    var array = new Array(this.size || 0);\n    var useTuples = isKeyed(this);\n    var i = 0;\n    this.__iterate(function (v, k) {\n      // Keyed collections produce an array of tuples.\n      array[i++] = useTuples ? [k, v] : v;\n    });\n    return array;\n  },\n\n  toIndexedSeq: function toIndexedSeq() {\n    return new ToIndexedSequence(this);\n  },\n\n  toJS: function toJS$1() {\n    return toJS(this);\n  },\n\n  toKeyedSeq: function toKeyedSeq() {\n    return new ToKeyedSequence(this, true);\n  },\n\n  toMap: function toMap() {\n    // Use Late Binding here to solve the circular dependency.\n    return Map(this.toKeyedSeq());\n  },\n\n  toObject: toObject,\n\n  toOrderedMap: function toOrderedMap() {\n    // Use Late Binding here to solve the circular dependency.\n    return OrderedMap(this.toKeyedSeq());\n  },\n\n  toOrderedSet: function toOrderedSet() {\n    // Use Late Binding here to solve the circular dependency.\n    return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n  },\n\n  toSet: function toSet() {\n    // Use Late Binding here to solve the circular dependency.\n    return Set(isKeyed(this) ? this.valueSeq() : this);\n  },\n\n  toSetSeq: function toSetSeq() {\n    return new ToSetSequence(this);\n  },\n\n  toSeq: function toSeq() {\n    return isIndexed(this)\n      ? this.toIndexedSeq()\n      : isKeyed(this)\n      ? this.toKeyedSeq()\n      : this.toSetSeq();\n  },\n\n  toStack: function toStack() {\n    // Use Late Binding here to solve the circular dependency.\n    return Stack(isKeyed(this) ? this.valueSeq() : this);\n  },\n\n  toList: function toList() {\n    // Use Late Binding here to solve the circular dependency.\n    return List(isKeyed(this) ? this.valueSeq() : this);\n  },\n\n  // ### Common JavaScript methods and properties\n\n  toString: function toString() {\n    return '[Collection]';\n  },\n\n  __toString: function __toString(head, tail) {\n    if (this.size === 0) {\n      return head + tail;\n    }\n    return (\n      head +\n      ' ' +\n      this.toSeq().map(this.__toStringMapper).join(', ') +\n      ' ' +\n      tail\n    );\n  },\n\n  // ### ES6 Collection methods (ES6 Array and Map)\n\n  concat: function concat() {\n    var values = [], len = arguments.length;\n    while ( len-- ) values[ len ] = arguments[ len ];\n\n    return reify(this, concatFactory(this, values));\n  },\n\n  includes: function includes(searchValue) {\n    return this.some(function (value) { return is(value, searchValue); });\n  },\n\n  entries: function entries() {\n    return this.__iterator(ITERATE_ENTRIES);\n  },\n\n  every: function every(predicate, context) {\n    assertNotInfinite(this.size);\n    var returnValue = true;\n    this.__iterate(function (v, k, c) {\n      if (!predicate.call(context, v, k, c)) {\n        returnValue = false;\n        return false;\n      }\n    });\n    return returnValue;\n  },\n\n  filter: function filter(predicate, context) {\n    return reify(this, filterFactory(this, predicate, context, true));\n  },\n\n  find: function find(predicate, context, notSetValue) {\n    var entry = this.findEntry(predicate, context);\n    return entry ? entry[1] : notSetValue;\n  },\n\n  forEach: function forEach(sideEffect, context) {\n    assertNotInfinite(this.size);\n    return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n  },\n\n  join: function join(separator) {\n    assertNotInfinite(this.size);\n    separator = separator !== undefined ? '' + separator : ',';\n    var joined = '';\n    var isFirst = true;\n    this.__iterate(function (v) {\n      isFirst ? (isFirst = false) : (joined += separator);\n      joined += v !== null && v !== undefined ? v.toString() : '';\n    });\n    return joined;\n  },\n\n  keys: function keys() {\n    return this.__iterator(ITERATE_KEYS);\n  },\n\n  map: function map(mapper, context) {\n    return reify(this, mapFactory(this, mapper, context));\n  },\n\n  reduce: function reduce$1(reducer, initialReduction, context) {\n    return reduce(\n      this,\n      reducer,\n      initialReduction,\n      context,\n      arguments.length < 2,\n      false\n    );\n  },\n\n  reduceRight: function reduceRight(reducer, initialReduction, context) {\n    return reduce(\n      this,\n      reducer,\n      initialReduction,\n      context,\n      arguments.length < 2,\n      true\n    );\n  },\n\n  reverse: function reverse() {\n    return reify(this, reverseFactory(this, true));\n  },\n\n  slice: function slice(begin, end) {\n    return reify(this, sliceFactory(this, begin, end, true));\n  },\n\n  some: function some(predicate, context) {\n    return !this.every(not(predicate), context);\n  },\n\n  sort: function sort(comparator) {\n    return reify(this, sortFactory(this, comparator));\n  },\n\n  values: function values() {\n    return this.__iterator(ITERATE_VALUES);\n  },\n\n  // ### More sequential methods\n\n  butLast: function butLast() {\n    return this.slice(0, -1);\n  },\n\n  isEmpty: function isEmpty() {\n    return this.size !== undefined ? this.size === 0 : !this.some(function () { return true; });\n  },\n\n  count: function count(predicate, context) {\n    return ensureSize(\n      predicate ? this.toSeq().filter(predicate, context) : this\n    );\n  },\n\n  countBy: function countBy(grouper, context) {\n    return countByFactory(this, grouper, context);\n  },\n\n  equals: function equals(other) {\n    return deepEqual(this, other);\n  },\n\n  entrySeq: function entrySeq() {\n    var collection = this;\n    if (collection._cache) {\n      // We cache as an entries array, so we can just return the cache!\n      return new ArraySeq(collection._cache);\n    }\n    var entriesSequence = collection.toSeq().map(entryMapper).toIndexedSeq();\n    entriesSequence.fromEntrySeq = function () { return collection.toSeq(); };\n    return entriesSequence;\n  },\n\n  filterNot: function filterNot(predicate, context) {\n    return this.filter(not(predicate), context);\n  },\n\n  findEntry: function findEntry(predicate, context, notSetValue) {\n    var found = notSetValue;\n    this.__iterate(function (v, k, c) {\n      if (predicate.call(context, v, k, c)) {\n        found = [k, v];\n        return false;\n      }\n    });\n    return found;\n  },\n\n  findKey: function findKey(predicate, context) {\n    var entry = this.findEntry(predicate, context);\n    return entry && entry[0];\n  },\n\n  findLast: function findLast(predicate, context, notSetValue) {\n    return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);\n  },\n\n  findLastEntry: function findLastEntry(predicate, context, notSetValue) {\n    return this.toKeyedSeq()\n      .reverse()\n      .findEntry(predicate, context, notSetValue);\n  },\n\n  findLastKey: function findLastKey(predicate, context) {\n    return this.toKeyedSeq().reverse().findKey(predicate, context);\n  },\n\n  first: function first(notSetValue) {\n    return this.find(returnTrue, null, notSetValue);\n  },\n\n  flatMap: function flatMap(mapper, context) {\n    return reify(this, flatMapFactory(this, mapper, context));\n  },\n\n  flatten: function flatten(depth) {\n    return reify(this, flattenFactory(this, depth, true));\n  },\n\n  fromEntrySeq: function fromEntrySeq() {\n    return new FromEntriesSequence(this);\n  },\n\n  get: function get(searchKey, notSetValue) {\n    return this.find(function (_, key) { return is(key, searchKey); }, undefined, notSetValue);\n  },\n\n  getIn: getIn,\n\n  groupBy: function groupBy(grouper, context) {\n    return groupByFactory(this, grouper, context);\n  },\n\n  has: function has(searchKey) {\n    return this.get(searchKey, NOT_SET) !== NOT_SET;\n  },\n\n  hasIn: hasIn,\n\n  isSubset: function isSubset(iter) {\n    iter = typeof iter.includes === 'function' ? iter : Collection(iter);\n    return this.every(function (value) { return iter.includes(value); });\n  },\n\n  isSuperset: function isSuperset(iter) {\n    iter = typeof iter.isSubset === 'function' ? iter : Collection(iter);\n    return iter.isSubset(this);\n  },\n\n  keyOf: function keyOf(searchValue) {\n    return this.findKey(function (value) { return is(value, searchValue); });\n  },\n\n  keySeq: function keySeq() {\n    return this.toSeq().map(keyMapper).toIndexedSeq();\n  },\n\n  last: function last(notSetValue) {\n    return this.toSeq().reverse().first(notSetValue);\n  },\n\n  lastKeyOf: function lastKeyOf(searchValue) {\n    return this.toKeyedSeq().reverse().keyOf(searchValue);\n  },\n\n  max: function max(comparator) {\n    return maxFactory(this, comparator);\n  },\n\n  maxBy: function maxBy(mapper, comparator) {\n    return maxFactory(this, comparator, mapper);\n  },\n\n  min: function min(comparator) {\n    return maxFactory(\n      this,\n      comparator ? neg(comparator) : defaultNegComparator\n    );\n  },\n\n  minBy: function minBy(mapper, comparator) {\n    return maxFactory(\n      this,\n      comparator ? neg(comparator) : defaultNegComparator,\n      mapper\n    );\n  },\n\n  rest: function rest() {\n    return this.slice(1);\n  },\n\n  skip: function skip(amount) {\n    return amount === 0 ? this : this.slice(Math.max(0, amount));\n  },\n\n  skipLast: function skipLast(amount) {\n    return amount === 0 ? this : this.slice(0, -Math.max(0, amount));\n  },\n\n  skipWhile: function skipWhile(predicate, context) {\n    return reify(this, skipWhileFactory(this, predicate, context, true));\n  },\n\n  skipUntil: function skipUntil(predicate, context) {\n    return this.skipWhile(not(predicate), context);\n  },\n\n  sortBy: function sortBy(mapper, comparator) {\n    return reify(this, sortFactory(this, comparator, mapper));\n  },\n\n  take: function take(amount) {\n    return this.slice(0, Math.max(0, amount));\n  },\n\n  takeLast: function takeLast(amount) {\n    return this.slice(-Math.max(0, amount));\n  },\n\n  takeWhile: function takeWhile(predicate, context) {\n    return reify(this, takeWhileFactory(this, predicate, context));\n  },\n\n  takeUntil: function takeUntil(predicate, context) {\n    return this.takeWhile(not(predicate), context);\n  },\n\n  update: function update(fn) {\n    return fn(this);\n  },\n\n  valueSeq: function valueSeq() {\n    return this.toIndexedSeq();\n  },\n\n  // ### Hashable Object\n\n  hashCode: function hashCode() {\n    return this.__hash || (this.__hash = hashCollection(this));\n  },\n\n  // ### Internal\n\n  // abstract __iterate(fn, reverse)\n\n  // abstract __iterator(type, reverse)\n});\n\nvar CollectionPrototype = Collection.prototype;\nCollectionPrototype[IS_COLLECTION_SYMBOL] = true;\nCollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.values;\nCollectionPrototype.toJSON = CollectionPrototype.toArray;\nCollectionPrototype.__toStringMapper = quoteString;\nCollectionPrototype.inspect = CollectionPrototype.toSource = function () {\n  return this.toString();\n};\nCollectionPrototype.chain = CollectionPrototype.flatMap;\nCollectionPrototype.contains = CollectionPrototype.includes;\n\nmixin(KeyedCollection, {\n  // ### More sequential methods\n\n  flip: function flip() {\n    return reify(this, flipFactory(this));\n  },\n\n  mapEntries: function mapEntries(mapper, context) {\n    var this$1$1 = this;\n\n    var iterations = 0;\n    return reify(\n      this,\n      this.toSeq()\n        .map(function (v, k) { return mapper.call(context, [k, v], iterations++, this$1$1); })\n        .fromEntrySeq()\n    );\n  },\n\n  mapKeys: function mapKeys(mapper, context) {\n    var this$1$1 = this;\n\n    return reify(\n      this,\n      this.toSeq()\n        .flip()\n        .map(function (k, v) { return mapper.call(context, k, v, this$1$1); })\n        .flip()\n    );\n  },\n});\n\nvar KeyedCollectionPrototype = KeyedCollection.prototype;\nKeyedCollectionPrototype[IS_KEYED_SYMBOL] = true;\nKeyedCollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.entries;\nKeyedCollectionPrototype.toJSON = toObject;\nKeyedCollectionPrototype.__toStringMapper = function (v, k) { return quoteString(k) + ': ' + quoteString(v); };\n\nmixin(IndexedCollection, {\n  // ### Conversion to other types\n\n  toKeyedSeq: function toKeyedSeq() {\n    return new ToKeyedSequence(this, false);\n  },\n\n  // ### ES6 Collection methods (ES6 Array and Map)\n\n  filter: function filter(predicate, context) {\n    return reify(this, filterFactory(this, predicate, context, false));\n  },\n\n  findIndex: function findIndex(predicate, context) {\n    var entry = this.findEntry(predicate, context);\n    return entry ? entry[0] : -1;\n  },\n\n  indexOf: function indexOf(searchValue) {\n    var key = this.keyOf(searchValue);\n    return key === undefined ? -1 : key;\n  },\n\n  lastIndexOf: function lastIndexOf(searchValue) {\n    var key = this.lastKeyOf(searchValue);\n    return key === undefined ? -1 : key;\n  },\n\n  reverse: function reverse() {\n    return reify(this, reverseFactory(this, false));\n  },\n\n  slice: function slice(begin, end) {\n    return reify(this, sliceFactory(this, begin, end, false));\n  },\n\n  splice: function splice(index, removeNum /*, ...values*/) {\n    var numArgs = arguments.length;\n    removeNum = Math.max(removeNum || 0, 0);\n    if (numArgs === 0 || (numArgs === 2 && !removeNum)) {\n      return this;\n    }\n    // If index is negative, it should resolve relative to the size of the\n    // collection. However size may be expensive to compute if not cached, so\n    // only call count() if the number is in fact negative.\n    index = resolveBegin(index, index < 0 ? this.count() : this.size);\n    var spliced = this.slice(0, index);\n    return reify(\n      this,\n      numArgs === 1\n        ? spliced\n        : spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))\n    );\n  },\n\n  // ### More collection methods\n\n  findLastIndex: function findLastIndex(predicate, context) {\n    var entry = this.findLastEntry(predicate, context);\n    return entry ? entry[0] : -1;\n  },\n\n  first: function first(notSetValue) {\n    return this.get(0, notSetValue);\n  },\n\n  flatten: function flatten(depth) {\n    return reify(this, flattenFactory(this, depth, false));\n  },\n\n  get: function get(index, notSetValue) {\n    index = wrapIndex(this, index);\n    return index < 0 ||\n      this.size === Infinity ||\n      (this.size !== undefined && index > this.size)\n      ? notSetValue\n      : this.find(function (_, key) { return key === index; }, undefined, notSetValue);\n  },\n\n  has: function has(index) {\n    index = wrapIndex(this, index);\n    return (\n      index >= 0 &&\n      (this.size !== undefined\n        ? this.size === Infinity || index < this.size\n        : this.indexOf(index) !== -1)\n    );\n  },\n\n  interpose: function interpose(separator) {\n    return reify(this, interposeFactory(this, separator));\n  },\n\n  interleave: function interleave(/*...collections*/) {\n    var collections = [this].concat(arrCopy(arguments));\n    var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, collections);\n    var interleaved = zipped.flatten(true);\n    if (zipped.size) {\n      interleaved.size = zipped.size * collections.length;\n    }\n    return reify(this, interleaved);\n  },\n\n  keySeq: function keySeq() {\n    return Range(0, this.size);\n  },\n\n  last: function last(notSetValue) {\n    return this.get(-1, notSetValue);\n  },\n\n  skipWhile: function skipWhile(predicate, context) {\n    return reify(this, skipWhileFactory(this, predicate, context, false));\n  },\n\n  zip: function zip(/*, ...collections */) {\n    var collections = [this].concat(arrCopy(arguments));\n    return reify(this, zipWithFactory(this, defaultZipper, collections));\n  },\n\n  zipAll: function zipAll(/*, ...collections */) {\n    var collections = [this].concat(arrCopy(arguments));\n    return reify(this, zipWithFactory(this, defaultZipper, collections, true));\n  },\n\n  zipWith: function zipWith(zipper /*, ...collections */) {\n    var collections = arrCopy(arguments);\n    collections[0] = this;\n    return reify(this, zipWithFactory(this, zipper, collections));\n  },\n});\n\nvar IndexedCollectionPrototype = IndexedCollection.prototype;\nIndexedCollectionPrototype[IS_INDEXED_SYMBOL] = true;\nIndexedCollectionPrototype[IS_ORDERED_SYMBOL] = true;\n\nmixin(SetCollection, {\n  // ### ES6 Collection methods (ES6 Array and Map)\n\n  get: function get(value, notSetValue) {\n    return this.has(value) ? value : notSetValue;\n  },\n\n  includes: function includes(value) {\n    return this.has(value);\n  },\n\n  // ### More sequential methods\n\n  keySeq: function keySeq() {\n    return this.valueSeq();\n  },\n});\n\nvar SetCollectionPrototype = SetCollection.prototype;\nSetCollectionPrototype.has = CollectionPrototype.includes;\nSetCollectionPrototype.contains = SetCollectionPrototype.includes;\nSetCollectionPrototype.keys = SetCollectionPrototype.values;\n\n// Mixin subclasses\n\nmixin(KeyedSeq, KeyedCollectionPrototype);\nmixin(IndexedSeq, IndexedCollectionPrototype);\nmixin(SetSeq, SetCollectionPrototype);\n\n// #pragma Helper functions\n\nfunction reduce(collection, reducer, reduction, context, useFirst, reverse) {\n  assertNotInfinite(collection.size);\n  collection.__iterate(function (v, k, c) {\n    if (useFirst) {\n      useFirst = false;\n      reduction = v;\n    } else {\n      reduction = reducer.call(context, reduction, v, k, c);\n    }\n  }, reverse);\n  return reduction;\n}\n\nfunction keyMapper(v, k) {\n  return k;\n}\n\nfunction entryMapper(v, k) {\n  return [k, v];\n}\n\nfunction not(predicate) {\n  return function () {\n    return !predicate.apply(this, arguments);\n  };\n}\n\nfunction neg(predicate) {\n  return function () {\n    return -predicate.apply(this, arguments);\n  };\n}\n\nfunction defaultZipper() {\n  return arrCopy(arguments);\n}\n\nfunction defaultNegComparator(a, b) {\n  return a < b ? 1 : a > b ? -1 : 0;\n}\n\nfunction hashCollection(collection) {\n  if (collection.size === Infinity) {\n    return 0;\n  }\n  var ordered = isOrdered(collection);\n  var keyed = isKeyed(collection);\n  var h = ordered ? 1 : 0;\n  var size = collection.__iterate(\n    keyed\n      ? ordered\n        ? function (v, k) {\n            h = (31 * h + hashMerge(hash(v), hash(k))) | 0;\n          }\n        : function (v, k) {\n            h = (h + hashMerge(hash(v), hash(k))) | 0;\n          }\n      : ordered\n      ? function (v) {\n          h = (31 * h + hash(v)) | 0;\n        }\n      : function (v) {\n          h = (h + hash(v)) | 0;\n        }\n  );\n  return murmurHashOfSize(size, h);\n}\n\nfunction murmurHashOfSize(size, h) {\n  h = imul(h, 0xcc9e2d51);\n  h = imul((h << 15) | (h >>> -15), 0x1b873593);\n  h = imul((h << 13) | (h >>> -13), 5);\n  h = ((h + 0xe6546b64) | 0) ^ size;\n  h = imul(h ^ (h >>> 16), 0x85ebca6b);\n  h = imul(h ^ (h >>> 13), 0xc2b2ae35);\n  h = smi(h ^ (h >>> 16));\n  return h;\n}\n\nfunction hashMerge(a, b) {\n  return (a ^ (b + 0x9e3779b9 + (a << 6) + (a >> 2))) | 0; // int\n}\n\nvar OrderedSet = /*@__PURE__*/(function (Set) {\n  function OrderedSet(value) {\n    return value === undefined || value === null\n      ? emptyOrderedSet()\n      : isOrderedSet(value)\n      ? value\n      : emptyOrderedSet().withMutations(function (set) {\n          var iter = SetCollection(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function (v) { return set.add(v); });\n        });\n  }\n\n  if ( Set ) OrderedSet.__proto__ = Set;\n  OrderedSet.prototype = Object.create( Set && Set.prototype );\n  OrderedSet.prototype.constructor = OrderedSet;\n\n  OrderedSet.of = function of (/*...values*/) {\n    return this(arguments);\n  };\n\n  OrderedSet.fromKeys = function fromKeys (value) {\n    return this(KeyedCollection(value).keySeq());\n  };\n\n  OrderedSet.prototype.toString = function toString () {\n    return this.__toString('OrderedSet {', '}');\n  };\n\n  return OrderedSet;\n}(Set));\n\nOrderedSet.isOrderedSet = isOrderedSet;\n\nvar OrderedSetPrototype = OrderedSet.prototype;\nOrderedSetPrototype[IS_ORDERED_SYMBOL] = true;\nOrderedSetPrototype.zip = IndexedCollectionPrototype.zip;\nOrderedSetPrototype.zipWith = IndexedCollectionPrototype.zipWith;\nOrderedSetPrototype.zipAll = IndexedCollectionPrototype.zipAll;\n\nOrderedSetPrototype.__empty = emptyOrderedSet;\nOrderedSetPrototype.__make = makeOrderedSet;\n\nfunction makeOrderedSet(map, ownerID) {\n  var set = Object.create(OrderedSetPrototype);\n  set.size = map ? map.size : 0;\n  set._map = map;\n  set.__ownerID = ownerID;\n  return set;\n}\n\nvar EMPTY_ORDERED_SET;\nfunction emptyOrderedSet() {\n  return (\n    EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()))\n  );\n}\n\nfunction throwOnInvalidDefaultValues(defaultValues) {\n  if (isRecord(defaultValues)) {\n    throw new Error(\n      'Can not call `Record` with an immutable Record as default values. Use a plain javascript object instead.'\n    );\n  }\n\n  if (isImmutable(defaultValues)) {\n    throw new Error(\n      'Can not call `Record` with an immutable Collection as default values. Use a plain javascript object instead.'\n    );\n  }\n\n  if (defaultValues === null || typeof defaultValues !== 'object') {\n    throw new Error(\n      'Can not call `Record` with a non-object as default values. Use a plain javascript object instead.'\n    );\n  }\n}\n\nvar Record = function Record(defaultValues, name) {\n  var hasInitialized;\n\n  throwOnInvalidDefaultValues(defaultValues);\n\n  var RecordType = function Record(values) {\n    var this$1$1 = this;\n\n    if (values instanceof RecordType) {\n      return values;\n    }\n    if (!(this instanceof RecordType)) {\n      return new RecordType(values);\n    }\n    if (!hasInitialized) {\n      hasInitialized = true;\n      var keys = Object.keys(defaultValues);\n      var indices = (RecordTypePrototype._indices = {});\n      // Deprecated: left to attempt not to break any external code which\n      // relies on a ._name property existing on record instances.\n      // Use Record.getDescriptiveName() instead\n      RecordTypePrototype._name = name;\n      RecordTypePrototype._keys = keys;\n      RecordTypePrototype._defaultValues = defaultValues;\n      for (var i = 0; i < keys.length; i++) {\n        var propName = keys[i];\n        indices[propName] = i;\n        if (RecordTypePrototype[propName]) {\n          /* eslint-disable no-console */\n          typeof console === 'object' &&\n            console.warn &&\n            console.warn(\n              'Cannot define ' +\n                recordName(this) +\n                ' with property \"' +\n                propName +\n                '\" since that property name is part of the Record API.'\n            );\n          /* eslint-enable no-console */\n        } else {\n          setProp(RecordTypePrototype, propName);\n        }\n      }\n    }\n    this.__ownerID = undefined;\n    this._values = List().withMutations(function (l) {\n      l.setSize(this$1$1._keys.length);\n      KeyedCollection(values).forEach(function (v, k) {\n        l.set(this$1$1._indices[k], v === this$1$1._defaultValues[k] ? undefined : v);\n      });\n    });\n    return this;\n  };\n\n  var RecordTypePrototype = (RecordType.prototype =\n    Object.create(RecordPrototype));\n  RecordTypePrototype.constructor = RecordType;\n\n  if (name) {\n    RecordType.displayName = name;\n  }\n\n  return RecordType;\n};\n\nRecord.prototype.toString = function toString () {\n  var str = recordName(this) + ' { ';\n  var keys = this._keys;\n  var k;\n  for (var i = 0, l = keys.length; i !== l; i++) {\n    k = keys[i];\n    str += (i ? ', ' : '') + k + ': ' + quoteString(this.get(k));\n  }\n  return str + ' }';\n};\n\nRecord.prototype.equals = function equals (other) {\n  return (\n    this === other ||\n    (isRecord(other) && recordSeq(this).equals(recordSeq(other)))\n  );\n};\n\nRecord.prototype.hashCode = function hashCode () {\n  return recordSeq(this).hashCode();\n};\n\n// @pragma Access\n\nRecord.prototype.has = function has (k) {\n  return this._indices.hasOwnProperty(k);\n};\n\nRecord.prototype.get = function get (k, notSetValue) {\n  if (!this.has(k)) {\n    return notSetValue;\n  }\n  var index = this._indices[k];\n  var value = this._values.get(index);\n  return value === undefined ? this._defaultValues[k] : value;\n};\n\n// @pragma Modification\n\nRecord.prototype.set = function set (k, v) {\n  if (this.has(k)) {\n    var newValues = this._values.set(\n      this._indices[k],\n      v === this._defaultValues[k] ? undefined : v\n    );\n    if (newValues !== this._values && !this.__ownerID) {\n      return makeRecord(this, newValues);\n    }\n  }\n  return this;\n};\n\nRecord.prototype.remove = function remove (k) {\n  return this.set(k);\n};\n\nRecord.prototype.clear = function clear () {\n  var newValues = this._values.clear().setSize(this._keys.length);\n\n  return this.__ownerID ? this : makeRecord(this, newValues);\n};\n\nRecord.prototype.wasAltered = function wasAltered () {\n  return this._values.wasAltered();\n};\n\nRecord.prototype.toSeq = function toSeq () {\n  return recordSeq(this);\n};\n\nRecord.prototype.toJS = function toJS$1 () {\n  return toJS(this);\n};\n\nRecord.prototype.entries = function entries () {\n  return this.__iterator(ITERATE_ENTRIES);\n};\n\nRecord.prototype.__iterator = function __iterator (type, reverse) {\n  return recordSeq(this).__iterator(type, reverse);\n};\n\nRecord.prototype.__iterate = function __iterate (fn, reverse) {\n  return recordSeq(this).__iterate(fn, reverse);\n};\n\nRecord.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n  if (ownerID === this.__ownerID) {\n    return this;\n  }\n  var newValues = this._values.__ensureOwner(ownerID);\n  if (!ownerID) {\n    this.__ownerID = ownerID;\n    this._values = newValues;\n    return this;\n  }\n  return makeRecord(this, newValues, ownerID);\n};\n\nRecord.isRecord = isRecord;\nRecord.getDescriptiveName = recordName;\nvar RecordPrototype = Record.prototype;\nRecordPrototype[IS_RECORD_SYMBOL] = true;\nRecordPrototype[DELETE] = RecordPrototype.remove;\nRecordPrototype.deleteIn = RecordPrototype.removeIn = deleteIn;\nRecordPrototype.getIn = getIn;\nRecordPrototype.hasIn = CollectionPrototype.hasIn;\nRecordPrototype.merge = merge$1;\nRecordPrototype.mergeWith = mergeWith$1;\nRecordPrototype.mergeIn = mergeIn;\nRecordPrototype.mergeDeep = mergeDeep;\nRecordPrototype.mergeDeepWith = mergeDeepWith;\nRecordPrototype.mergeDeepIn = mergeDeepIn;\nRecordPrototype.setIn = setIn;\nRecordPrototype.update = update;\nRecordPrototype.updateIn = updateIn;\nRecordPrototype.withMutations = withMutations;\nRecordPrototype.asMutable = asMutable;\nRecordPrototype.asImmutable = asImmutable;\nRecordPrototype[ITERATOR_SYMBOL] = RecordPrototype.entries;\nRecordPrototype.toJSON = RecordPrototype.toObject =\n  CollectionPrototype.toObject;\nRecordPrototype.inspect = RecordPrototype.toSource = function () {\n  return this.toString();\n};\n\nfunction makeRecord(likeRecord, values, ownerID) {\n  var record = Object.create(Object.getPrototypeOf(likeRecord));\n  record._values = values;\n  record.__ownerID = ownerID;\n  return record;\n}\n\nfunction recordName(record) {\n  return record.constructor.displayName || record.constructor.name || 'Record';\n}\n\nfunction recordSeq(record) {\n  return keyedSeqFromValue(record._keys.map(function (k) { return [k, record.get(k)]; }));\n}\n\nfunction setProp(prototype, name) {\n  try {\n    Object.defineProperty(prototype, name, {\n      get: function () {\n        return this.get(name);\n      },\n      set: function (value) {\n        invariant(this.__ownerID, 'Cannot set on an immutable record.');\n        this.set(name, value);\n      },\n    });\n  } catch (error) {\n    // Object.defineProperty failed. Probably IE8.\n  }\n}\n\n/**\n * Returns a lazy Seq of `value` repeated `times` times. When `times` is\n * undefined, returns an infinite sequence of `value`.\n */\nvar Repeat = /*@__PURE__*/(function (IndexedSeq) {\n  function Repeat(value, times) {\n    if (!(this instanceof Repeat)) {\n      return new Repeat(value, times);\n    }\n    this._value = value;\n    this.size = times === undefined ? Infinity : Math.max(0, times);\n    if (this.size === 0) {\n      if (EMPTY_REPEAT) {\n        return EMPTY_REPEAT;\n      }\n      EMPTY_REPEAT = this;\n    }\n  }\n\n  if ( IndexedSeq ) Repeat.__proto__ = IndexedSeq;\n  Repeat.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );\n  Repeat.prototype.constructor = Repeat;\n\n  Repeat.prototype.toString = function toString () {\n    if (this.size === 0) {\n      return 'Repeat []';\n    }\n    return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';\n  };\n\n  Repeat.prototype.get = function get (index, notSetValue) {\n    return this.has(index) ? this._value : notSetValue;\n  };\n\n  Repeat.prototype.includes = function includes (searchValue) {\n    return is(this._value, searchValue);\n  };\n\n  Repeat.prototype.slice = function slice (begin, end) {\n    var size = this.size;\n    return wholeSlice(begin, end, size)\n      ? this\n      : new Repeat(\n          this._value,\n          resolveEnd(end, size) - resolveBegin(begin, size)\n        );\n  };\n\n  Repeat.prototype.reverse = function reverse () {\n    return this;\n  };\n\n  Repeat.prototype.indexOf = function indexOf (searchValue) {\n    if (is(this._value, searchValue)) {\n      return 0;\n    }\n    return -1;\n  };\n\n  Repeat.prototype.lastIndexOf = function lastIndexOf (searchValue) {\n    if (is(this._value, searchValue)) {\n      return this.size;\n    }\n    return -1;\n  };\n\n  Repeat.prototype.__iterate = function __iterate (fn, reverse) {\n    var size = this.size;\n    var i = 0;\n    while (i !== size) {\n      if (fn(this._value, reverse ? size - ++i : i++, this) === false) {\n        break;\n      }\n    }\n    return i;\n  };\n\n  Repeat.prototype.__iterator = function __iterator (type, reverse) {\n    var this$1$1 = this;\n\n    var size = this.size;\n    var i = 0;\n    return new Iterator(function () { return i === size\n        ? iteratorDone()\n        : iteratorValue(type, reverse ? size - ++i : i++, this$1$1._value); }\n    );\n  };\n\n  Repeat.prototype.equals = function equals (other) {\n    return other instanceof Repeat\n      ? is(this._value, other._value)\n      : deepEqual(other);\n  };\n\n  return Repeat;\n}(IndexedSeq));\n\nvar EMPTY_REPEAT;\n\nfunction fromJS(value, converter) {\n  return fromJSWith(\n    [],\n    converter || defaultConverter,\n    value,\n    '',\n    converter && converter.length > 2 ? [] : undefined,\n    { '': value }\n  );\n}\n\nfunction fromJSWith(stack, converter, value, key, keyPath, parentValue) {\n  if (\n    typeof value !== 'string' &&\n    !isImmutable(value) &&\n    (isArrayLike(value) || hasIterator(value) || isPlainObject(value))\n  ) {\n    if (~stack.indexOf(value)) {\n      throw new TypeError('Cannot convert circular structure to Immutable');\n    }\n    stack.push(value);\n    keyPath && key !== '' && keyPath.push(key);\n    var converted = converter.call(\n      parentValue,\n      key,\n      Seq(value).map(function (v, k) { return fromJSWith(stack, converter, v, k, keyPath, value); }\n      ),\n      keyPath && keyPath.slice()\n    );\n    stack.pop();\n    keyPath && keyPath.pop();\n    return converted;\n  }\n  return value;\n}\n\nfunction defaultConverter(k, v) {\n  // Effectively the opposite of \"Collection.toSeq()\"\n  return isIndexed(v) ? v.toList() : isKeyed(v) ? v.toMap() : v.toSet();\n}\n\nvar version = \"4.1.0\";\n\nvar Immutable = {\n  version: version,\n\n  Collection: Collection,\n  // Note: Iterable is deprecated\n  Iterable: Collection,\n\n  Seq: Seq,\n  Map: Map,\n  OrderedMap: OrderedMap,\n  List: List,\n  Stack: Stack,\n  Set: Set,\n  OrderedSet: OrderedSet,\n\n  Record: Record,\n  Range: Range,\n  Repeat: Repeat,\n\n  is: is,\n  fromJS: fromJS,\n  hash: hash,\n\n  isImmutable: isImmutable,\n  isCollection: isCollection,\n  isKeyed: isKeyed,\n  isIndexed: isIndexed,\n  isAssociative: isAssociative,\n  isOrdered: isOrdered,\n  isValueObject: isValueObject,\n  isPlainObject: isPlainObject,\n  isSeq: isSeq,\n  isList: isList,\n  isMap: isMap,\n  isOrderedMap: isOrderedMap,\n  isStack: isStack,\n  isSet: isSet,\n  isOrderedSet: isOrderedSet,\n  isRecord: isRecord,\n\n  get: get,\n  getIn: getIn$1,\n  has: has,\n  hasIn: hasIn$1,\n  merge: merge,\n  mergeDeep: mergeDeep$1,\n  mergeWith: mergeWith,\n  mergeDeepWith: mergeDeepWith$1,\n  remove: remove,\n  removeIn: removeIn,\n  set: set,\n  setIn: setIn$1,\n  update: update$1,\n  updateIn: updateIn$1,\n};\n\n// Note: Iterable is deprecated\nvar Iterable = Collection;\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Immutable);\n\n\n\n//# sourceURL=webpack:///./node_modules/immutable/dist/immutable.es.js?");

/***/ }),

/***/ "./src/index.mjs":
/*!***********************!*\
  !*** ./src/index.mjs ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var immutable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! immutable */ \"./node_modules/immutable/dist/immutable.es.js\");\nconst sections = {\n    \"\": [\n        {\n            'title': [\n                \"I'm a high school student&nbsp; <br> and thinking enthusiast.\", \n            ],\n            'description': [\n                \"I spend too much time pondering machine learning, communication, brain-machine interfaces, and metacognition.\",\n                \"Let me tell you a bit about what I get up to...\",\n            ],\n            'css': {\n                'min-height': '100vh',\n                'font-family': \"'Nunito', sans-serif\"\n            },\n            'icon': {\n                'max_width': '23rem',\n                'svg_el': `<svg style=\"width: 100%;\" viewBox=\"0 0 210 265\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M121.5 0.5V77.5C117.333 70.5 107.6 55.2 102 50C95.0001 43.5 94.0001 44 91.5001 44C89.0001 44 81.5001 45 78.5001 50C76.1001 54 77.5001 62 78.5001 65.5C84.0001 74.8333 95.5001 94.3 97.5001 97.5C99.5001 100.7 109.333 118.833 114 127.5V129H112C106.333 120.833 92.5001 102 86.0001 93.5C79.5428 85.0559 63.5001 66 61.0001 63.5C59.0001 61.5 52.0001 55 46.0001 56C44.6668 56 41.4001 56.5 39.0001 58.5C36.0001 61 33.0001 64.5 33.0001 67.5C33.0001 70.5 34.048 75.4768 35.0001 77.5C39.0001 86 45.5001 94 54.5001 106C61.7001 115.6 78.6668 137 87.5001 148.5V151H86.0001C81.5001 145.833 70.0001 132.9 60.0001 122.5C47.5001 109.5 35.0001 95.5 27.5001 92C21.5001 89.2 16.3334 89.8333 14.5001 90.5C12.1667 91.3333 6.40004 93.7 6.00004 98.5C5.50004 104.5 5.50006 106 8.00008 111C9.5001 114 17.9644 125 30.5001 138.5C35.7001 144.1 55.6668 164.333 65.0001 174V176.5H63C59.1667 172.667 50 163.8 44 159C36.5 153 25.5 142 19.5 139.5C13.5 137 9.5 136.5 7 137.5C4.5 138.5 1 142.5 1 148.5C1 151.05 4.5 157.5 7 160.5C12.4167 167 22.5 177.5 29.5 183C35.5 187.714 46.5 197 48 197.5C49.5 198 52.6026 201.051 54.5 202C56.5 203 59 207 61.5 210C63.3333 212.167 67.4 217 69 219C71 221.5 76.5 230 81.5 235C85.1667 239.333 95 248.7 105 251.5C117.5 255 119 254.5 124 254.5C129 254.5 141 250 147.5 246.5C154 243 182 225.5 191.5 211.5C201 197.5 204.5 190 206.5 175.5C208.5 161 206 151 205.5 136C205 121 206.5 124.5 206.5 113C206.5 108 207.125 101.5 208.5 96C209.125 93.5 210.167 87.5 208.5 82.5C207.5 79.5 202.3 76.3 197.5 77.5C191.5 79 187.5 80 183 84.5C178.5 89 173.5 96.9936 173.5 116.5C173.5 120.5 174.5 126 174.5 128C174.5 133.099 174.5 138.5 170 143.5C169.667 144 168.008 146.5 161 146.5C150.5 146.5 138.5 167.5 138 175.5C137.5 180 137.1 191.1 139.5 199.5C142.5 210 158.5 218.5 164.5 243.5C165 245.583 167 255.5 167 264.5\" />\n</svg> `\n            }\n        },\n\n    ],\n    'Education': [\n        {\n            'title': [\"The Nueva School\", \"2017 - 2023\"],\n            'description': \"I'm a rising senior at [the Nueva school](http://nuevaschool.org/) in the SF Bay Area. At school, I'm a member of [FRC team 4904 Bot Provoking](https://botprovoking.org/) and a Mavericks Admissions Ambassador.\",\n            'iconLeft': true,\n            'css': { 'font-family': \"'Liberation Sans', sans-serif\" },\n            'icon': {\n                'max_width': '12rem',\n                'svg_el': `<svg style=\"width: 100%;\" viewBox=\"1 0 1 1.2\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M1.65302 0V0.130604L1.49318 0.103314L1.35088 0.116959L1.23197 0.165692L1.12086 0.237817L1.25341 0.19883H1.35088L1.19298 0.272905L1.08772 0.337232L1 0.42885L1.10136 0.348928L1.15205 0.325536L1.10136 0.469786V0.592593L1.1345 0.719298L1.68226 1.07602L1.51462 0.510721V0.448343L1.55945 0.403509L1.52827 0.448343L1.55945 0.547758L1.61598 0.592593L1.7154 0.623782L1.76218 0.666667L1.77778 0.719298V0.785575L1.76218 0.810916H1.92203L2 0.719298L1.82066 0.249513H1.77778L1.94542 0.187135L1.846 0.148148L1.73294 0.130604L1.65302 0.148148L1.61598 0.19883L1.50292 0.210526L1.4347 0.224172L1.36842 0.261209L1.29045 0.337232L1.24172 0.403509L1.20858 0.489279L1.25341 0.403509L1.35088 0.325536L1.47758 0.294347L1.34113 0.348928L1.29045 0.419103L1.2807 0.510721L1.29045 0.592593L1.34113 0.719298V1\" />\n</svg>`\n            }\n        }\n    ],\n    'Experience': [\n        {\n            'title': [\"Mixed-mode Integrated Circuits Lab\", \"Caltech, summer 2022\"],\n            'description': \"I spent summer 2022 working with [the MICS lab](https://mics.caltech.edu/) on optimizing FENet (a light weight convolutional model trained to extract rich features from implanted electrodes) for hardware implementation. Practically, this involved sweeping over hyperparameters and running experiments to see how model architecture and quantization affected regression performance.\",\n            'iconLeft': true,\n            'justify': 'center',\n            'css': {\n                'min-height': '50vh',\n            },\n            'flashbacks': [\n                {\n                    'srcs': ['/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_80_7dfb829b5953d13eceb6.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_90_60ff06a9091baaf32bb4.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_100_ce31e501006d39e1232a.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_110_a00c9e551bbc3e46a095.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_120_733f4d6a3e8aae731b24.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_130_dcb1018aa1c63b37ab58.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_140_2e48e0783b721a848be6.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_150_db90a0de4103f536d610.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_160_074d5aaf8387a8c31f36.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_170_b9c83338581ae02d8221.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_180_33c146b900aa2073d23f.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_190_85fa78a168997e50f99f.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_200_677147b95893fe85d79d.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_210_258ad5119c40ad8b546c.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_220_26fe7e4b8c1e11ce3248.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_230_098a87d69d00a8db4a7c.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_240_bc4bc32775f2951ee712.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_250_2ea861fc6286d1a6f465.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_260_477a90111d2b78660ea7.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_270_56a3c858ac9b5303ac8e.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_280_acf14d3abfab876fb22c.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_290_83816d92340c39100bef.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_300_1bb551f350d8b11e0dbc.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_310_d8f3c2e67ec383162a92.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_320_9ec2ba70498c9f430db2.webp',\n                        '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_330_cbd1e92ef8383e9c0632.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_340_dbf9176f1623a083131c.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_350_159b870cc13811b67997.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_360_7024f56f8c0c65eda048.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_370_b6c3f6e3a7e47121e484.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_380_0f3cf103fecf26efe190.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_390_09fa8421010543e107c0.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_400_a72dcc22b3abc843f075.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_410_19ac2000c4818cc79430.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_420_be5ddfcd97d5416a86c2.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_430_6849fc7ee9042b9f4d5e.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_440_316fe264dbf2a3ac082b.webp', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_450_5d899ecfadef3e162425.webp'],\n                    //'srcs': ['/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_80_7dfb829b5953d13eceb6.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_90_60ff06a9091baaf32bb4.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_100_ce31e501006d39e1232a.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_110_a00c9e551bbc3e46a095.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_120_733f4d6a3e8aae731b24.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_130_dcb1018aa1c63b37ab58.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_140_2e48e0783b721a848be6.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_150_db90a0de4103f536d610.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_160_074d5aaf8387a8c31f36.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_170_b9c83338581ae02d8221.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_180_33c146b900aa2073d23f.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_190_85fa78a168997e50f99f.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_200_677147b95893fe85d79d.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_210_258ad5119c40ad8b546c.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_220_26fe7e4b8c1e11ce3248.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_230_098a87d69d00a8db4a7c.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_240_bc4bc32775f2951ee712.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_250_2ea861fc6286d1a6f465.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_260_477a90111d2b78660ea7.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_270_56a3c858ac9b5303ac8e.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_280_acf14d3abfab876fb22c.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_290_83816d92340c39100bef.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_300_1bb551f350d8b11e0dbc.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_310_d8f3c2e67ec383162a92.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_320_9ec2ba70498c9f430db2.png',\n                    //    '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_330_cbd1e92ef8383e9c0632.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_340_dbf9176f1623a083131c.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_350_159b870cc13811b67997.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_360_7024f56f8c0c65eda048.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_370_b6c3f6e3a7e47121e484.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_380_0f3cf103fecf26efe190.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_390_09fa8421010543e107c0.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_400_a72dcc22b3abc843f075.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_410_19ac2000c4818cc79430.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_420_be5ddfcd97d5416a86c2.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_430_6849fc7ee9042b9f4d5e.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_440_316fe264dbf2a3ac082b.png', '/flashback_images/media/images/eval/eval/quantized_wl8_fl6/decoder-retrain/R² chart_450_5d899ecfadef3e162425.png'],\n                    'x': 0,\n                    'y': 20,\n                    'style': {\n                        'width': '40vw',\n                    }\n                }\n            ],\n            'icon': {\n                'max_width': '10rem',\n                'svg_el': ` <svg style=\"width: 100%;\" viewBox=\"0 0 420 600\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M393 0V107.5C371.5 94.3333 318.8 67.4 280 65C224 61.5361 181.5 63.5 112.5 105C43.5 146.5 -4.49999 252.5 1.50001 328.5C7.50001 404.5 41 472.455 104 517C153.5 552 208 567.5 247 567.5C303.58 567.5 347.5 554.5 418 503L266 517L263 473C278.5 469.167 313.5 459.1 341.5 445.5C369.5 431.9 388 417 388 413H243.5V404.5C254.667 400.167 282.4 386.7 304 367.5C331 343.5 335.5 313 335.5 301C335.5 278.5 329.5 249 313.5 219C299.112 188.991 289.712 174.975 273.5 155.5C278.333 166.167 288.4 195.4 288 219C288.5 231 286.1 262.2 272.5 291C255.5 327 246.5 338.5 242.5 360.5C239.3 378.1 240.5 396.167 241.5 403V413H239.5V403C237.167 396.5 232.5 380.3 232.5 367.5C232.5 351.5 242.5 317 253 294.5C263.5 272 270.5 249 270 225.5C269.5 202 266.5 179.5 260.5 162C255.7 148 245.5 129.5 241 122C241.833 127 243 138.7 243 145.5C243 154 244 172.5 219.5 211.5C212 222.167 197 246 192 256C187 266 184.5 273.5 183.5 287.5H182C181.167 284.5 179.5 276.8 179.5 270C179.5 261.5 184.5 243.5 194 223.5C203.5 203.5 216.5 183.5 216.5 155.5C210.833 166.167 202 185.5 176 216C168.167 225 151.5 247 147.5 263C142.5 283 142.825 307.78 153.5 329C163.763 349.402 193.467 376.885 212.5 388.5L237.5 404V413H94V416.5C137.604 446.416 167 458 218.5 471.5L216.5 517V600\" />\n</svg> `\n            }\n        },\n        {\n            'title': [\"Efficient and Intelligent Computing Lab\", \"Rice, summer 2021\"],\n            'description': \"I spent part of summer 2019 working with [the EIC lab](https://eiclab.net/) as a member of the [X-Camp academy](https://x-camp.academy/#/) internship connector pilot. We implemented GPT-2 in Vivado HLS as a baseline for future models and a jumping-off point for future projects. I ended up stepping into a role of organization and coordination—figuring out who was best suited for each job and creating a concrete roadmap to communicate our efforts.\",\n            'iconLeft': true,\n            'justify': 'center',\n            'icon': {\n                'max_width': '10rem',\n                'svg_el': `<svg style=\"width: 100%;\" viewBox=\"0 0 129 170\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M 100.0,0.5 L 100.0,41.5 C 99.0,22.0 85.0,13.0 77.0,13.0 C 69.0,13.0 64.6604,16.3906 61.0,25.5 C 61.0,25.5 58.5,32.5 58.5,38.5 C 58.5,44.5 63.5,51.0 71.0,51.0 C 78.5,51.0 82.0,44.5 82.0,39.5 C 82.0,34.5 79.0,28.0 71.5,28.0 C 64.0,28.0 60.9152,30.9687 58.5,37.5 C 56.7808,40.5788 56.5,42.817 50.5,43.317 C 50.5,43.317 46.0,43.5 43.5,46.5 C 41.0,49.5 41.5,52.0 42.0,54.5 C 42.5,57.0 50.0,70.5 50.0,70.5 C 50.0,70.5 57.5,56.5 58.0,54.5 C 58.5,52.5 58.3311,48.816 56.0,46.0 C 54.1331,44.0475 52.6332,43.7391 49.9483,43.2069 C 43.5,43.0 41.0,40.0 40.9483,37.7069 C 40.8965,35.4138 38.5,27.5 30.0,27.5 C 21.5,27.5 17.5,33.0 17.5,39.0 C 17.5,45.0 21.9744,51.163 30.0,51.0 C 38.0256,50.837 41.5087,43.5376 41.5,38.5 C 41.4913,33.4624 40.9217,30.5969 39.0,25.5 C 36.5,20.0 32.4544,13.2993 22.5,13.0 C 12.5456,12.7007 0.5,24.0 0.5,41.5 C 3.44249,53.9688 4.36456,61.4817 20.5002,64.5 L 20.5002,71.0 L 16.0,70.0 C 15.1667,68.6667 13.2,65.9 12.0,65.5 C 10.8,65.1 8.5,65.3333 7.5,65.5 C 7.16667,72.5 7.6,88.8 12.0,98.0 C 17.5,109.5 20.5,114.5 23.0,116.5 C 25.0,118.1 25.8333,117.5 26.0,117.0 L 25.0,113.0 C 21.5,106.5 17.3,95.9 16.5,87.5 C 15.7,79.1 15.8333,75.5 16.0,74.0 L 20.5002,76.5 C 20.5002,81.5 21.5002,105.5 33.0002,119.5 C 37.1668,125.0 45.5002,135.5 54.0002,141.0 L 53.5002,145.5 C 51.6668,149.833 47.4002,158.9 45.0002,160.5 C 42.6002,162.1 37.0002,162.167 34.5002,162.0 L 31.0002,165.5 L 31.0002,168.0 L 35.0002,168.0 L 37.5002,164.5 L 39.5002,164.5 L 40.0002,168.0 L 47.0002,168.0 C 47.5002,165.833 49.2002,161.1 52.0002,159.5 C 55.5002,157.5 58.5002,154.5 58.5002,153.0 C 58.5002,151.8 58.5002,149.167 58.5002,148.0 L 64.5002,143.0 L 74.0002,147.0 C 73.0002,149.167 70.5002,154.2 68.5002,157.0 C 66.0002,160.5 65.5002,160.5 65.0002,161.0 C 64.5002,161.5 60.5002,162.0 57.5002,162.0 C 55.1002,162.0 54.1668,162.333 54.0002,162.5 L 52.0002,165.0 L 52.0002,168.0 L 56.0002,168.0 L 58.0002,165.0 L 61.0002,165.0 L 61.0002,168.0 L 68.5002,168.0 L 71.0002,165.0 L 73.0002,165.0 L 76.0002,168.0 L 79.0002,168.0 L 79.0002,165.0 L 77.0002,163.0 L 72.0002,163.0 L 72.0002,161.5 C 75.5639,157.966 77.286,155.644 80.0002,151.0 L 82.5002,144.0 C 84.0842,142.317 84.9192,141.202 84.5002,133.0 C 75.5355,122.82 61.0002,106.5 62.5002,71.5 L 67.0002,71.5 C 79.9535,70.717 85.9804,68.9763 94.0002,63.0 C 99.1668,66.1667 111.024,75.8738 115.0,90.0 C 120.106,108.138 123.0,117.0 121.5,118.5 C 120.5,119.5 108.0,110.5 103.5,103.0 C 99.9,97.0 97.6667,90.5 97.0,88.0 L 93.0,88.0 C 93.0,92.0 95.1,102.1 103.5,110.5 C 114.0,121.0 120.0,122.5 122.5,126.0 C 125.0,129.5 125.0,134.5 125.0,136.5 C 119.333,134.667 106.0,128.7 98.0,119.5 C 90.0,110.3 85.3333,100.333 84.0,96.5 L 80.0002,96.5 C 81.5001,102.333 87.345,115.617 96.5,124.5 C 108.982,136.611 121.922,139.419 125.0,143.0 C 126.333,144.5 128.0,148.9 128.0,152.5 L 128.0,170\" />\n</svg>\n`\n            }\n        },\n        {\n            //🐧🍲🕙🎱🪑🌽\n            'css': {\n                'min-height': '30vh'\n            }\n        }\n    ],\n//    'Projects': [ // TODO\n//        {\n    //        wavetable, condution, notes club,\n//            'title': \"aaaaaaaaaaaaaa i don't have icons for these\",\n//            'description': \"hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo hewo \",\n//            'icon': {\n//                'max_width': '10rem',\n//                'svg_el': `<svg style=\"width: 100%;\" viewBox=\"1 0 1 1.2\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n//<path d=\"M1.65302 0V0.130604L1.49318 0.103314L1.35088 0.116959L1.23197 0.165692L1.12086 0.237817L1.25341 0.19883H1.35088L1.19298 0.272905L1.08772 0.337232L1 0.42885L1.10136 0.348928L1.15205 0.325536L1.10136 0.469786V0.592593L1.1345 0.719298L1.68226 1.07602L1.51462 0.510721V0.448343L1.55945 0.403509L1.52827 0.448343L1.55945 0.547758L1.61598 0.592593L1.7154 0.623782L1.76218 0.666667L1.77778 0.719298V0.785575L1.76218 0.810916H1.92203L2 0.719298L1.82066 0.249513H1.77778L1.94542 0.187135L1.846 0.148148L1.73294 0.130604L1.65302 0.148148L1.61598 0.19883L1.50292 0.210526L1.4347 0.224172L1.36842 0.261209L1.29045 0.337232L1.24172 0.403509L1.20858 0.489279L1.25341 0.403509L1.35088 0.325536L1.47758 0.294347L1.34113 0.348928L1.29045 0.419103L1.2807 0.510721L1.29045 0.592593L1.34113 0.719298V1.17349\" />\n//</svg>`\n//            }\n//        }\n//    ],\n    'Hobbies': [\n        {\n            'title': \"Interactive Visualizations + Soydevvery\",\n            'description': \"Visualizations that project data into a tangible, visual space to build intuition or point out something cool; web demos that look pretty. These one-off projects (some built with friends) have included [a US map of population, politics, and walkability](https://urbanmap.exr0n.com), [dots that undulate like the ocean](https://meshwave.exr0n.com), and [a gimicky word vector arithmatic explorer](https://corsaur.us).\",\n            'flashbacks': [\n                {\n                    'srcs': [...Array(120).keys()].map(n => \"/flashback_images/urbanmap/ezgif-frame-\" + (''+(n+1)).padStart(3, '0') + '.jpg'),\n                    'x': 30,\n                    'y': -80,\n                    'style': {\n                        'width': '40vw',\n                    }\n                },\n            ],\n            'icon': {\n                'max_width': '14rem',   \n                'svg_el': `<svg style=\"width: 100%;\" viewBox=\"0 0 455 457\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\" M 417.0,0.5 L 417.0,274.0 L 450.0,306.0 L 378.0,306.0 L 425.5,394.0 L 381.0,419.0 L 330.0,326.5 L 278.5,373.5 L 278.5,136.0 L 372.5,231.5 L 372.5,41.5 L 2.0,41.5 L 2.0,400.0 L 75.5,400.0 L 75.5,261.5 L 130.5,261.5 L 130.5,400.0 L 184.5,400.0 L 184.5,185.0 L 240.5,185.0 L 240.5,456.5 \" />\n</svg>\n`\n            },\n        },\n        {\n            'title': \"Explanatory Diagrams\",\n            'description': \"Infographics that tell stories and share knowledge rather than providing quick stats. Spatial organizations of knowledge that you can get lost in. There's no one place to start, but once you've read everything, you'll have learned something. Topics include the [CHRM2 neurotransmitter receptor protein](https://wilderness.exr0n.com/wilderness/infographics/19bioCHRM2ProtienStory.png) and [ion channels that help propogate neural action potentials](https://wilderness.exr0n.com/wilderness/infographics/20bio101VoltageGatedSodiumChannels.png). Here's [the full list](https://wilderness.exr0n.com/wilderness/infographics).\",\n            'icon': {\n                'max_width': '14rem',\n                'svg_el': `<svg style=\"width: 100%;\" viewBox=\"0 0 258 443\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M254.868 0V156.5C241.368 75.0001 162.23 40.0627 99.3681 53.0001C39.1215 65.3993 -10.6574 134.877 4.86804 200C19.8765 262.954 74.8679 308 143.868 302L126.368 162.5H254.868C256.868 184.333 256.3 225.5 229.5 257.5C202.7 289.5 168.5 298.333 149 302V329H4.86804V364H254.868V378H4.86804V393.5H254.868V442.5\" />\n</svg>\n`\n            }\n        },\n        { 'css': { 'min-height': '30vh', }, },\n        {\n            'title': \"Timelapse Photography\",\n            'description': \"I like searching for new patterns through the perspective shift of changing your time scales. Sitting still and watching as things happen feels almost like a stoic or zen practice. You can see my time lapses [here](https://www.google.com/search?q=coming+eventually).\",\n            'iconLeft': true,\n            'justify': 'flex-end',\n            'flashbacks': [\n                {\n                    'srcs': [...Array(240).keys()].map(n => \"/flashback_images/timelapse/chicago_boat/\" + (''+(n+1)).padStart(4, '0') + '.jpg'),\n                    'x': -5,\n                    'y': -150,\n                    'peak_opacity': 0.4,\n                    'scrollTrigger': 0.3,\n                    'style': {\n                        'width': '50vw',\n                    }\n                },\n                {\n                    'srcs': [...Array(140).keys()].map(n => \"/flashback_images/timelapse/robotics_sac_pit/ezgif-frame-\" + (''+(n+1)).padStart(3, '0') + '.jpg'),\n                    'x': 40,\n                    'y': 150,\n                    'distance': 0.1,\n                    'scrollTrigger': 0.2,\n                    'peak_opacity': 0.5,\n                    'style': {\n                        'width': '30vw',\n                    }\n                },\n                {\n                    'srcs': [...Array(500).keys()].map(n => \"/flashback_images/timelapse/beach_sunset/\" + (''+(n+1)).padStart(4, '0') + '.jpg'),\n                    'x': 55,\n                    'y': -120,\n                    'distance': 0.05,\n                    'scrollTrigger': 0.1,\n                    'peak_opacity': 0.6,\n                    'style': {\n                        'width': '30vw',\n                    }\n                },\n            ],\n            'icon': {\n                'max_width': '14rem',\n                'svg_el': `<svg style=\"width: 100%;\" viewBox=\"0 0 510 776\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M469.5 0V103C469.5 92 456.2 74.4 445 74L330 54L353 48V27L286.5 15L244 21.5L309.5 34.5V57.5L319 56C265.5 46.8333 155.3 27.9 142.5 25.5C126.5 22.5 117.5 31 117 42C116.6 50.8 116.833 78.6667 117 91.5C127.8 95.1 130.167 103 130 106.5C130 119.833 130 148.5 130 156.5C130 164.5 121.333 168.167 117 169C117 178 117 199.2 117 212C117 228 123.5 234 133 237C140.6 239.4 211.833 255.667 246.5 263.5L233.5 262.5V284L302.5 302.5V281.5H321.5L348.5 287V294.5L304.5 302.5V337C319.833 341.333 350.5 360.2 350.5 401C350.5 418.2 346.167 426.833 344 429L508.5 592L494.5 597.5L334.5 450C331.7 459.2 324.667 462.167 321.5 462.5L409 754.5L379 764L290 469C275.6 476.6 254.333 467.833 245.5 462.5L1 645V775.5\" />\n</svg>\n`\n            }\n        },\n        { 'css': { 'min-height': '50vh', }, },\n    ],\n    'Accomplishments': [\n        {\n            'title': \"USACO Gold, ICPed Bronze and Silver\",\n            'description': \"Somehow got a full score on the bronze and silver tests, studied fancy algorithms but avoided putting the work in to memorize problem transformations and code, and moved on to machine learning.\",\n            'css': {\n                'min-height': '60vh',\n            },\n            'icon': {\n                'max_width': '10rem',\n                'svg_el': `<svg style=\"width: 100%;\" viewBox=\"0 0 244 207\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M130 0V28.5C128.5 25 123.6 18 116 18C108.4 18 104.5 21.3333 103.5 23C104.667 19.1667 105.4 10.9 99 8.5L91.5 15.5C89 14.3333 81.9 12 73.5 12C65.1 12 58.3333 14 56 15L46 6.5C40.8 6.5 40.5 17.8333 41 23.5C39.6667 21.1667 35.5 16.5 29.5 16.5C23.5 16.5 14.6667 22.8333 11 26C12 30.3333 16.5 38.9 26.5 38.5C19 48 15.5 69.5 14 79.5C5 85 1 99 1 109.5C1 120 13.5 153 62.5 154C111.5 155 126.5 127.5 126.5 114C126.5 103.2 121.5 96.1667 119 94C119.333 79.8333 118.1 49.2 110.5 40C122.1 40 128.333 33.6667 130 30.5C142.5 28.8333 172.2 30.6 191 51C200.2 60.2 204.5 70.1667 205.5 74C210 75.3333 218.9 80.2 218.5 89C218 100 217 105 217 110.5C217 116 219.5 122.5 221.5 123.5C223.9 118.3 230.833 121.333 234 123.5C236.667 126.167 241.9 133.2 241.5 140C236.833 141.833 225.7 144 218.5 138C215.3 134.4 216.167 129.833 217 128C214.667 125.833 210.3 118.9 211.5 108.5C213 95.5 213 94 211.5 91.5C210.3 89.5 208.333 88 207.5 87.5C208.833 96 209.5 117.3 201.5 134.5C190 162 188.5 161.5 189 173C195.8 177 196.5 186.333 196 190.5C195.333 193.833 191.2 200.5 180 200.5C168.8 200.5 162.333 194.833 160.5 192C160 188.167 160.7 179 167.5 173C165.833 167.333 162.4 154.9 162 150.5H158.5L155.5 170C157.5 171.5 161.3 176 160.5 182C159.5 189.5 156.5 194 144.5 193C132.5 192 130 188 129 183.5C128 179 131 170 134 168.5C134 162.5 134 157.5 130 157C126.8 156.6 124 157.5 123 158C121.667 162.333 119.8 171.9 123 175.5C127 180 131 189.5 130 197C127.5 200.167 120.1 206.3 110.5 205.5C100.9 204.7 95.8333 199.5 94.5 197C94 183 100 178 101.5 177.5C101.5 168.7 98.1667 162.167 96.5 160C92.5 160.8 86.5 159.667 84 159C84 162.6 85 170.833 85.5 174.5C91 174.5 93 189 93 191C87 197 85.5 200.5 73.5 200.5C63.9 200.5 57.8333 195.833 56 193.5C55.6 179.5 61.5 174.333 64.5 173.5C64.5 164.3 59.1667 157 56.5 154.5C49 153.333 31.6 148.135 28 146.135V177.5\" />\n</svg>\n`\n            }\n        },\n        {\n            'title': \"Self-administered a WorksiteLabs PCR Covid Test in 23 seconds\",\n            'description': \"I trained for literally months. When I started, placing the name label on the tube and opening the package with the swab slowed me down the most. Stabbing the back end of the swab through the paper backing and placing the name label on the tube while the cap is off when putting the swab inside made the final speed possible. Unscrewing the tube with one hand while swabbing with the other can save an additional second or so, but requires finger strength and practice.\",\n            'css': {\n                'min-height': '60vh',\n            },\n            'iconLeft': true,\n            'justify': 'flex-end',\n            'icon': {\n                'max_width': '10rem',\n                'svg_el': `<svg style=\"width: 100%;\" viewBox=\"0 0 361 409\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M244 0.5V266.5L72.5 114C63.8333 102.667 43.3 77.4 30.5 67C14.5 54 5.5 60 3.5 62.5C1.5 65 -4 76.5 8.5 87C18.5 95.4 49.3333 114.833 63.5 123.5L352 380C357.239 379.251 359.131 377.565 360 371.5L245.5 268V408.5\" />\n</svg>\n`\n            }\n        },\n        {\n            'title': \"Slept through half of my AP CS test\",\n            'description': \"For some reason I was particularly tired that morning, so about one quarter of the way through the free-response question section, I decided to just take a nap. I didn't know if I was allowed to get my jacket out of my backpack, so I slept on my arms. Near the end of the test, my arms fell asleep and the tingling woke me up.\",\n            'css': {\n                'min-height': '60vh',\n            },\n            'icon': {\n                'max_width': '10rem',\n                'svg_el': ` <svg style=\"width: 100%;\"viewBox=\"0 0 793 593\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M566 0V173C546.5 189.667 503.2 224.2 486 229C468.8 233.8 458.5 234.333 455.5 234L446 231C446 226 445.4 215 443 211C440 206 428 187 419 180C410 173 393 162.5 385.5 160C382 158.333 374.2 155.4 371 157C367 159 367.5 166 371 171C374.5 176 374.5 179.5 374.5 186.5C355.333 170.667 310.935 139.534 293 129C268.968 114.885 247 118.5 217 134C187 149.5 149.5 209.5 141.5 234C133.5 258.5 137.5 324 158 350C165.833 362.167 186.4 387.7 206 392.5C230.5 398.5 277 398 288.5 417.5C297.7 433.1 299 431.333 298.5 428.5L269.5 410.5C251.333 410.5 209.3 409.7 186.5 406.5C163.7 403.3 136.333 392.833 125.5 388C115.167 384.833 95.3 380.1 86.5 380.5C75.5 381 38 391 17 434.5C-4.00003 478 -3.14713e-05 484.5 5.49997 492C11 499.5 30.5 503.5 79.5 496.5C118.7 490.9 157.5 490.5 181.5 491.5C206 491.5 237 466 249.5 473C262 480 269.5 488 279 488.5L269.5 495C266.833 495.5 259.9 496.2 253.5 495C247.1 493.8 244.667 494.5 244.5 495C240.216 499.02 241.5 500.5 241.5 506C245.833 510.667 252.29 516.161 256.5 518.5C261 521 259 524 263.5 526C265.147 526.732 275 532.5 288.5 533.5C298.667 535 321.3 538.2 330.5 539C342 540 354.5 550 362 552.5C369.5 555 473.5 596.5 557.5 592C641.5 587.5 671.5 608.5 715.5 518.5C759.5 428.5 789 351.5 792 287C795 222.5 756.5 185 736 171C715.5 157 670.5 135 634 141C597.5 147 580 198 576.5 216C573 234 582 354 547 376C519 393.6 447.667 429 415.5 444.5C393 450 344.5 462.2 330.5 467C313 473 302.75 485.25 288.5 488.5C274.25 491.75 272.5 493.435 268.5 494.5C264.5 495.565 252 494 248.5 494C245 494 241 497 242 505C242.8 511.4 242.333 525.833 242 556\" />\n</svg> `\n            }\n        },\n        { 'css': { 'min-height': '40vh', }, },\n    ],\n    'Dreams': [\n        {\n            'description': [\"These long-term goals are culmination of my interests, projects, and activties.\", \"This is the future that I want to build.\"],\n            'justify': 'flex-end',\n            'css': {\n                'min-height': '5rem',\n            }\n        },\n        {\n            'title': [\"Computers Recognizing Concepts\", \"with Entity Linking\"],\n            'description': \"The core of human creativity is lateral thinking—finding connections between seemingly unrelated ideas. Prose is the most concentrated form of meaning that we produce at scale, so NLP is a natural interface through which computers can think with humans. Entity linking and dense passage representations could allow computers systematically and restlessly engage in lateral thinking.\",\n            'iconLeft': true,\n            'justify': 'flex-end',\n            'css': { 'min-height': '50vh' },\n            'icon': {\n                'max_width': '30rem',\n                'svg_el': `<svg style=\"width: 100%;\" viewBox=\"0 0 552 550\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M133 0.5V142.5C137.4 119.7 152.833 87.3334 160 74C165.6 64.4 177.667 52.3333 183 47.5C184.5 45.5 195 34 197.5 33C200.899 32.6135 209.5 27.5 212.5 24C212.5 23.1667 213.3 20.9 216.5 18.5C220.5 15.5 225 14 227 14.5C229 15 227 17 225 18C223 19 218.5 22 219 23C219.5 24 223.5 21.5 226 20C228.5 18.5 236.5 14.5 240 14.5C237.667 19 232.7 28.3 231.5 29.5C230 31 228 33.5 225 33.5C222 33.5 218.5 32.5 216 37.5C213.5 42.5 214 43.5 215.5 43.5C217 43.5 219.5 40 222 40C224.5 40 224.5 40 224.5 43C224.5 46 218.5 57 217 60.5C215.5 64 210 75.5 210 79.5C209.833 81 210.3 84 213.5 84C217.5 84 216 82.5 220 82.5C224 82.5 224 89 224 91C224 94 221.189 108.379 213.5 105.5C205.811 102.621 194 102.5 193.5 130C193.5 135.6 193.833 140.667 194 142.5C201.5 141.333 218.5 139 226.5 139C236.5 139 239.5 140.5 239.5 142.5C239.5 144.5 235.5 146.5 233.5 150C231.5 153.5 231.5 156 234 158.5C236.5 161 241 162 245 162C249 162 267 158 267 150C267 144.5 261 145 261 141.5C261 137 269 134 287 130.5C301.4 127.7 312.333 126 316 125.5C309 94 305.5 85.5 322.5 85.5C329.5 85.5 335.5 83 335 78C334.5 73 330 65 324.5 65C319 65 317.016 74 309 74C301.5 74 301 54.5 300.5 50C304.167 49.5 312.6 48.1 317 46.5C322.5 44.5 330.5 41.5 330.5 39.5C330.5 37.5 326 36.5 326 33.5C326 30.5 329 25 342.5 25C354 25 352 28 351.5 32C351.265 33.8785 351.5 36.5 358 36.5C370 36.5 410 20 422.5 20C435 19.5 426.5 22.5 433.5 27.5C439.5 31 447 30 447 26C447 22 442 22.5 439 18.5C436 14.5 442.5 15 446.5 14C449.7 13.2 451.5 12.6667 452 12.5C457.5 16.6667 469.3 25.6 472.5 28C476.5 31 477.5 30.5 475.5 28C473.5 25.5 478 28 479.5 29C481 30 489.5 38.5 490 41C490.5 43.5 490 42.5 489 41.5C488 40.5 489.5 44 492.5 46.5C494.9 48.5 502.833 58.6667 506.5 63.5C507.333 63.5 508.9 62.9 508.5 60.5C508 57.5 508.281 56.2865 510.5 59.5C525 80.5 535 98 543 124C562.231 186.5 556.5 282 470.5 350.5C380 417 250.5 415 167.5 305C135.5 255.5 135 226.5 133 212.5L130 250.5C118 241 97.4999 223 84.4999 229C71.4999 235 85.4399 229.922 35.4999 281.5C4.99999 313 -0.999946 316.5 3.50004 328C5 331.5 8.5 332 10 336.5C11.5 341 16.5 366.5 20.5 376C22.5 381.5 28.5 385 32.5 391.5C36.5 398 66.5 425 74.5 424C76.3333 424.667 80.9 424.1 84.5 416.5L87.5 418C82.5 428 75 436 66 433C61.5627 431.324 64 428 57 428C51.5 428 43 441 43.5 445C44 449 46 453 51 452.5C56 452 55 450.5 58.5 450.5\n                C62 450.5 67 453.5 67 458.5C67 463.5 43.5 491.5 41.5 493.5C51.5 497 76 506 87 505.5C98 505 96.5 501 96.5 499C96.5 497 93 491.5 93 489C93 486.5 96 483 105.5 483C117 483 137 489.5 137 496.5C137 500.5 134.5 505 125 507C115.5 509 119 516.5 122.5 519C126 521.5 156 528.5 182 530C187.5 507 189.5 495.5 188 489.5C186.5 483.5 184.5 481 177.5 481.5C170.5 482 158 481.5 157.5 472.5C157 463.5 166.5 456 171.5 457C176.5 458 178 467 189 467C196 467 198.5 456 199 438C179.5 434.5 162 428.5 162 425.5C162 422.5 167.5 423 167.5 419C167.5 415 157.5 408.5 146.5 408.5C135.5 408.5 134.5 412 136 416.5C138.333 423.5 130.5 422 127.5 422.5C124 423 101 419.5 89.5 414L86.5 412C86.0292 410 84.9701 405.8 84.5 405C79.5 396 68.7648 390.498 51.5 372C44.5 364.5 39 344 39.5 339.5C40.1667 345.667 44.0637 359 48.5 360.5C61 364.5 65.5 371.5 74 367.5C82.5 363.5 87.5 356 89 346C90.5 336 90.5 332.5 86 327.5C81.5 322.5 68 321 63.5 322.5H61C61.5 322.5 73 320 83.5 325.5C94 331 90 345 88.5 355.5C87 366 87 377 90.5 385C94 393 102 402.5 113.5 398.5C125 394.5 119.5 382.5 116.5 376.5C114 371 114.5 350.5 123 334C129.8 320.8 130.5 306.333 130 295.5C153.5 295.5 267 421.5 267 537\" stroke=\"#E9B2B2\" stroke-width=\"3\"/>\n</svg> `\n            }\n        },\n        {\n            'title': [\"Operating on Meaning\", \"with Question Answering\"],\n            'description': \"Just as prose is an intentional, meaning-rich form of storing information, question-answering is a targeted way of trading ideas. Currently, question-answering models can find web articles and extrapolate concrete answers to specific questions. In the future, the question-answering interface can target searches to match messy ideas and existing thoughts. We have the world's information at our fingertips now, but we can have the world's ideas at our fingertips someday.\",\n            'iconLeft': false,\n            'justify': 'flex-begin',\n            'css': { 'min-height': '50vh' },\n            'icon': {\n                'max_width': '30rem',\n                'svg_el': `<svg style=\"width: 100%;\" viewBox=\"0 0 241 241\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\" M 93.0,0.0 L 93.0,32.5 C 94.0,27.5 97.0,13.5 99.0,7.5 C 108.5,10.0 113.5,13.0 113.0,16.5 C 112.5,20.0 107.5,25.0 107.0,33.5 C 106.5,42.0 112.5,45.5 117.0,45.5 C 123.0,45.5 119.5,35.5 123.0,28.5 C 126.5,23.0 128.0,22.5 135.5,28.5 C 143.0,34.5 158.0,49.0 168.5,53.0 C 165.5,64.5 163.5,72.5 157.5,81.0 C 155.5,84.0 148.5,83.0 146.0,79.5 C 143.5,76.0 142.5,69.0 136.5,69.5 C 130.5,70.0 127.0,76.0 128.0,87.0 C 129.364,102.0 136.5,96.0 139.0,96.0 C 141.5,96.0 149.002,95.5249 150.0,110.5 C 150.8,119.7 150.667,125.333 150.0,127.0 C 174.5,127.0 185.0,121.0 188.0,119.0 C 191.0,117.0 190.0,116.5 186.5,115.5 C 183.0,114.5 182.0,107.0 196.5,102.0 C 211.0,97.0 210.5,100.5 208.5,107.0 C 206.5,113.5 210.5,113.0 221.0,108.5 C 229.4,104.9 236.167,98.3333 238.5,95.5 C 242.0,101.5 238.5,112.5 234.5,116.0 C 230.0,120.0 227.5,116.5 222.0,120.5 C 216.5,124.5 218.5,132.5 221.5,132.0 C 224.5,131.5 229.5,128.0 230.5,127.0 C 231.5,126.0 234.0,125.5 229.0,131.5 C 224.0,137.5 219.5,142.5 219.0,144.5 C 215.0,147.0 209.0,149.5 206.5,150.5 C 204.0,151.5 201.0,151.5 204.0,149.0 C 207.0,146.5 200.5,147.5 196.5,149.0 C 192.5,150.5 186.0,155.0 190.0,155.0 C 194.0,155.0 190.5,157.5 180.5,159.5 C 172.5,161.1 168.833,161.833 168.0,162.0 C 164.5,156.0 167.5,151.0 152.0,156.5 C 140.0,159.5 139.5,159.0 138.5,155.0 C 137.5,151.0 138.0,148.5 150.5,148.0 C 163.0,147.5 166.0,140.0 158.0,137.0 C 151.6,134.6 149.667,130.333 149.5,128.5 C 147.9,132.9 140.833,135.833 138.0,137.0 C 120.0,122.0 113.5,112.5 112.0,110.5 C 110.5,108.5 109.0,109.0 110.0,114.0 C 111.0,119.0 113.0,123.0 110.0,123.0 C\n                107.0,123.0 101.0,116.0 100.5,111.5 C 100.0,107.0 101.5,106.0 101.5,104.5 C 101.5,99.5 95.5,85.0 89.0,77.5 L 40.0,127.0 C 56.8333,134.833 90.8,150.7 92.0,151.5 C 103.0,158.5 120.5,169.5 123.5,171.5 C 126.5,173.5 123.5,176.0 120.5,178.0 C 117.5,180.0 121.0,185.5 129.0,190.5 C 137.0,195.5 148.0,198.0 143.5,189.5 C 139.0,181.0 152.0,185.0 161.5,187.0 C 169.1,188.6 178.0,192.0 181.5,193.5 C 181.5,197.5 180.0,200.0 185.0,207.5 C 190.0,215.0 184.5,216.0 180.5,216.0 C 176.5,216.0 169.0,211.5 164.0,210.5 C 159.0,209.5 155.5,209.5 154.5,214.5 C 153.5,219.5 160.0,223.5 165.0,224.0 C 170.0,224.5 181.5,224.0 181.5,231.5 C 181.5,233.0 181.5,236.5 181.0,237.5 C 163.0,234.5 154.5,231.0 150.5,229.5 C 146.5,228.0 145.0,228.5 148.5,231.5 C 152.0,234.5 149.5,234.5 142.5,231.5 C 135.5,228.5 135.5,227.0 137.0,227.0 C 138.5,227.0 138.0,225.5 124.0,218.0 C 119.5,215.589 117.5,214.0 116.5,213.0 C 113.333,207.5 106.6,195.7 105.0,192.5 C 103.0,188.5 101.5,189.5 101.0,190.0 C 100.5,190.5 97.5,190.0 94.5,184.0 C 91.5,178.0 88.5,170.0 94.5,175.5 C 97.7727,178.5 96.5,176.0 94.0,164.5 C 93.2,161.3 92.0,154.5 91.5,151.5 L 39.5,127.0 L 39.5,191.0 L 35.5,195.0 L 42.5,202.0 L 35.5,209.0 L 42.5,216.0 L 28.5,216.0 L 31.0,219.0 L 46.5,219.0 L 49.0,215.5 C 53.0,215.5 53.6667,212.167 53.5,210.5 L 24.0,210.5 L 24.0,209.0 L 54.0,206.5 L 24.0,205.5 L 54.0,203.0 L 24.0,201.5 L 54.0,199.0 L 24.0,197.5 L 54.0,195.0 L 24.0,193.5 L 33.0,190.5 C 33.0,145.7 27.3333,129.167 24.5,126.5 C 29.0,126.5 33.0,126.5 33.0,133.0 C 33.0,140.0 35.5,139.5 35.5,133.0 C 35.5,126.5 35.5,126.5 35.5,120.5 C 35.5,114.5 38.0,114.5 38.0,120.5 C 38.0,126.5 38.0,127.0 38.0,133.0 C 38.0,139.0 40.5,139.0 40.5,133.0 C 40.5,127.0 40.5,127.0 40.5,120.5 C 40.5,114.0 43.5,114.0 43.5,120.5 C 43.5,127.0 43.5,127.0 43.5,133.0 C 43.5,139.0 46.5,139.0 46.5,133.0 C 46.5,127.0 47.0,126.0 56.0,126.0 C 52.5,135.667 44.5,146.0 45.5,191.5 L 56.0,191.5 C 56.0,157.5 76.5,154.0 76.5,126.0 C 76.5,94.0 49.0,87.5 38.0,87.5 C 27.0,87.5 0.5,99.0 0.5,125.0 C 0.5,152.5 22.5,161.0 22.5,190.5 L 24.0,190.5 L 24.0,240.5 \" stroke=\"#D9C2C2\"/>\n</svg>\n  `\n            }\n        },\n        {\n            'title': [\"Meaning Technologies as\", \"Implantable Memory Prosthetics\"],\n            'description': `These are technologies that operate on meaning rather than information, just like the human mind. When computers can read texts and perform lateral thinking searches just as an intern can, asking the computer will be like finding a connection in your memory. Removing the bottleneck of prose with a brain-machine interface will allow us to reason with all the world's knowledge just as we reason with our brain's knowledge today.`,\n            'iconLeft': true,\n            'justify': 'flex-end',\n            'icon': {\n                'max_width': '30rem',\n                'svg_el': `\n                <svg style=\"width: 100%;\" viewBox=\"0 0 768 665\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"\n     M 753.944,0 V 324.493 C 758.939,321.964 759.131,326.315 761.0,348.0 C 762.509,365.5 745.5,369.0 734.5,369.0 C 722.0,369.0 716.5,384.0 702.0,383.5 C 687.5,383.0 683.0,375.5 686.5,366.5 C 680.861,381.0 696.5,379.5 689.0,386.5 C 684.5,391.0 673.5,404.0 658.0,404.0 C 636.0,404.0 641.0,412.0 626.0,411.5 C 607.5,409.5 590.5,399.0 593.0,375.5 C 586.334,372.5 570.9,364.5 562.5,356.5 C 552.0,346.5 553.0,334.856 566.0,331.5 C 509.5,351.0 502.5,295.0 505.5,290.0 C 502.667,292.833 494.9,297.5 486.5,293.5 C 476.0,288.5 491.0,238.5 486.5,222.5 C 467.0,235.5 424.0,226.5 414.5,206.0 C 373.0,229.0 353.5,207.5 350.5,203.0 C 352.334,205.667 357.5,211.3 363.5,212.5 C 355.5,172.5 311.5,185.0 305.0,197.5 C 306.334,195.167 311.1,189.9 319.5,187.5 C 296.5,249.5 243.137,200.5 260.0,174.0 C 253.0,185.0 252.5,207.0 273.5,214.5 C 268.5,226.5 265.5,226.5 256.0,235.5 C 246.5,244.5 238.5,240.0 230.5,243.5 C 224.0,246.0 225.511,253.569 218.0,256.5 C 197.5,264.5 181.0,228.5 204.0,207.5 C 180.0,231.0 201.0,256.5 205.5,257.5 C 202.7,268.7 185.667,278.5 177.5,282.0 C 178.5,299.0 229.0,333.0 273.5,298.5 C 230.0,333.0 184.5,301.0 181.0,289.5 C 178.2,303.5 169.834,310.333 166.0,312.0 C 181.0,317.0 197.5,330.5 197.0,347.0 C 196.5,363.5 181.5,377.5 144.5,390.5 C 166.0,440.0 206.5,434.5 222.0,434.5 C 237.5,434.5 237.556,434.5 227.0,424.5 C 249.5,453.5 315.5,459.0 331.0,459.0 C 346.5,459.0 377.5,455.245 395.0,452.5 C 355.5,456.5 359.0,459.5 352.0,476.5 C 337.5,501.0 320.5,512.0 302.5,514.5 C 285.0,532.5 267.5,601.0 255.5,654.5 L 235.5,649.5 C 260.5,580.5 246.5,555.5 258.5,536.5 C 268.1,521.3 272.167,515.5 273.0,514.5 L 260.5,514.5 C 233.5,546.0 222.5,572.5 131.5,555.5 C 73.0003,545.5 49.5003,479.5 48.5003,459.0 L 58.0003,462.0 C 25.5003,449.0 12.0,424.0 33.0001,383.5 C -6.5,378.0 0.500005,280.5 3.5,263.0 C 6.5,245.5 24.5,234.5 35.5,234.5 C 19.0,234.5 24.0,182.5 57.0,174.5 C 55.4,192.5 66.0,199.667 71.5,201.0 C 52.5,194.5 50.5,144.0 91.5,134.0 C 80.5,161.0 81.0,194.0 106.0,207.5 C 79.0,194.0 71.0,126.0 130.5,107.0 C 130.5,134.0 137.0,146.0 141.5,152.5 C 132.5,141.0 119.0,85.0 163.0,81.5 C 159.4,90.3 160.167,89.5 161.0,88.0 C 175.0,55.5 197.5,41.0 231.0,48.0 L 222.5,46.0 C 223.0,26.5 254.5,15.0 268.5,29.5 C 266.1,35.9 266.167,42.5 266.5,45.0 C 265.0,24.5 289.5,-4.5 315.0,31.5 C 326.5,52.0 334.5,48.0 343.5,48.0 C 357.5,48.0 377.0,76.0 377.5,104.0 C 377.5,122.8 360.833,141.167 352.5,148.0 L 352.5,161.5 C 322.5,183.0 303.0,184.5 299.5,125.5 C 299.5,104.3 280.833,87.3333 271.5,81.5 C 291.0,95.5 301.5,115.0 301.0,137.5 C 265.5,137.5 246.0,102.5 219.5,104.0 C 202.5,104.0 173.0,119.0 174.5,165.0 C 174.5,179.0 184.0,197.5 199.5,197.5 C 166.0,197.5 153.0,207.5 150.0,214.5 C 141.5,235.5 116.0,250.5 111.0,271.5 C 111.0,246.7 107.667,228.167 106.0,222.0 C 109.03,239.0 112.0,255.5 109.0,280.5 C 106.0,305.5 131.0,317.5 141.5,317.5 C 103.5,314.0 55.0,323.0 80.5,363.5 C 100.9,395.9 109.667,431.333 111.5,445.0 C 144.5,465.5 169.0,465.0 190.5,455.0 L 222.0,476.5 C 187.0,491.5 133.5,488.0 109.0,481.0\n                L 133.5,514.5 C 194.0,524.5 235.0,492.5 282.0,491.5 C 305.0,491.5 304.0,451.0 293.0,425.5 C 282.0,400.0 261.5,388.5 235.5,396.0 C 271.0,383.5 268.0,375.0 277.0,381.0 C 286.0,387.0 289.0,399.0 299.5,384.0 C 310.0,369.0 326.5,360.0 343.5,359.0 C 360.5,358.0 365.0,339.0 363.5,330.5 C 362.0,322.0 354.0,310.5 330.5,316.0 C 356.0,310.0 370.5,315.5 370.5,326.0 C 370.5,336.5 380.5,347.5 383.5,348.5 C 376.0,343.5 351.0,309.0 399.5,310.0 C 399.5,316.0 406.001,331.0 420.0,320.5 C 409.5,330.5 412.5,327.0 429.5,339.0 C 438.5,344.5 446.0,335.0 456.5,335.5 C 467.0,336.0 472.0,348.5 481.5,348.5 C 489.1,348.5 491.0,347.5 491.0,347.0 L 488.5,327.0 C 489.5,346.0 490.5,370.0 526.0,370.0 C 561.5,370.0 530.5,410.0 488.5,406.0 C 446.5,402.0 433.5,375.5 424.0,363.0 C 440.5,384.273 424.0,388.0 407.5,394.5 C 391.0,401.0 394.0,413.5 383.5,417.5 C 375.1,420.7 364.667,416.5 360.5,414.0 C 383.5,422.0 385.5,418.5 394.0,407.5 C 402.5,396.5 405.5,393.5 412.0,394.5 C 418.5,395.5 425.5,415.5 447.5,417.5 C 469.5,419.5 533.5,429.5 555.5,414.0 C 577.5,398.5 585.5,348.0 585.5,330.5 C 585.5,280.5 582.61,272.445 614.5,256.5 C 630.5,248.5 637.5,245.5 641.0,245.5 C 660.5,245.5 671.5,268.0 633.0,295.5 C 665.0,268.0 673.0,285.5 638.0,321.0 C 654.0,300.5 655.5,302.5 655.0,319.5 C 654.6,333.1 641.833,346.833 635.5,352.0 C 645.57,341.5 651.5,357.5 659.5,356.5 C 666.0,356.5 669.0,358.5 676.0,345.5 C 683.0,332.5 689.5,351.0 702.0,332.5 C 712.0,317.7 707.5,286.667 704.0,273.0 C 707.6,286.2 689.833,305.167 680.5,313.0 C 717.977,283.109 704.61,230.804 663.5,233.5 C 696.5,231.5 681.5,250.5 694.5,219.0 C 703.7,222.2 713.333,218.0 717.0,215.5 C 711.045,218.659 697.518,225.73 691.0,210.0 C 683.737,192.472 654.5,167.0 625.5,170.0 C 655.0,167.5 653.5,180.5 647.5,166.5 C 641.5,152.5 644.5,149.5 647.5,146.0 C 655.5,139.0 676.0,149.5 688.0,157.0 C 666.0,144.0 668.0,127.0 658.5,119.0 C 650.9,112.6 642.0,113.667 638.5,115.0 C 638.5,106.6 643.167,105.5 645.5,106.0 C 639.0,106.0 637.0,117.0 638.5,124.0 C 640.0,131.0 633.5,132.0 630.0,132.0 C 626.5,132.0 621.0,128.5 615.0,132.0 C 609.0,135.5 610.5,140.5 606.0,145.0 C 601.5,149.5 589.0,148.5 583.0,166.5 C 577.0,184.5 580.0,219.0 598.0,227.0 C 588.0,219.0 592.0,218.5 587.0,225.0 C 582.0,231.5 574.0,230.0 569.0,228.5 C 564.0,227.0 570.0,216.0 562.5,243.0 C 572.0,214.0 569.0,183.406 526.5,177.703 C 516.1,177.703 509.167,166.901 507.0,161.5 C 526.5,158.0 528.0,123.5 523.0,106.0 C 529.0,139.5 524.5,172.5 472.0,157.0 C 460.5,153.605 468.0,144.0 459.0,131.5 C 450.0,119.0 415.5,103.5 415.5,57.0 C 395.5,35.4 362.167,40.0 348.0,45.0 C 297.0,50.0 303.5,-16.0 374.5,10.5 L 382.5,7.00001 C 411.5,-3.49999 456.5,1.50001 474.5,17.5 C 487.5,31.5 488.501,26.5 474.5,40.0 C 505.0,12.0 550.5,34.0 559.0,44.5 C 566.5,52.0 563.5,43.0 551.5,51.5 C 578.0,34.0 621.353,59.0 642.0,91.5 C 638.0,98.7 639.0,100.833 640.0,101.0 C 634.0,92.5 653.0,88.5 664.5,111.0 C 661.5,98.0 723.0,141.0 721.5,161.0 C 720.0,181.0 708.0,178.5 704.0,177.5 C 723.0,181.0 715.5,161.5 732.5,176.0\n                C 749.5,190.5 741.0,234.5 735.0,244.0 C 745.5,213.0 750.0,239.5 757.5,257.0 C 765.0,274.5 767.579,284.5 766.5,296.0 C 766.5,301.92 763.997,315.348 752.944,324.493\nL 767.5,243.5 L 767.5,296.0 C 767.5,301.92 764.997,315.348 753.944,324.493\nL752.944 324.493C757.939 321.964 758.131 326.315 760 348C761.509 365.5 744.5 369 733.5 369C721 369 715.5 384 701 383.5C686.5 383 682 375.5 685.5 366.5C679.861 381 695.5 379.5 688 386.5C683.5 391 672.5 404 657 404C635 404 640 412 625 411.5C606.5 409.5 595 399 585.5 377C595.5 397 596.5 406.5 577.5 425.5C589.5 412.5 590 412 589.5 430C589 448 565.5 457 551 457.5C536.5 458 533 450 526 450.5C519 451 525 453.5 518 465.5C511 477.5 496.5 485.5 485 485.5C463 485.5 438 463.5 420 463.5C446 468 449.5 477 440.5 476.5C431.5 476.5 427.5 496 401 511C379.8 523 357.167 526.667 348.5 527C375 521.982 379.5 530.5 380.5 547C381.5 563.5 371.5 587.5 332 617C305.22 637 310 649 305 664.5\n\" />\n</svg>\n`\n            }\n        },\n    ],\n    ' ': [\n        { 'css': { 'min-height': '35vh', }, },\n    ]\n}\n\n;\n\nconst svg_infos = Array.from(Object.values(sections)).map(sec => sec.filter(p => p.hasOwnProperty('icon')).map(p => p.icon)).flat()\nconst get_path_els = () => Array.from(document.querySelectorAll('.has-line-art path'));\n\n//const GET_SCROLLMAGIC_OFFSET_DELAY = () => document.documentElement.clientHeight * 0.55;\nconst GET_SCROLLMAGIC_OFFSET_DELAY = () => document.documentElement.clientHeight * 1.00 * TRIGGER_HOOK;\nconst STROKE_WIDTH = 5;\nconst LINE_COLOR = '#326ccc'; // make it a gradient that fills section-wise from the top eventually\nconst PRIMARY_COLOR = '#f0f0ff';\nconst TRIGGER_HOOK = 0.5;\nconst ICON_TRIGGER_HOOK = 1.0;\nconst FLASHBACK_TRIGGER_HOOK = 0.3;\nconst BW = 0;   // border width\n\n\nfunction el(elem_name, inline_style, children, className=null, kwargs={}) {\n    if (! Array.isArray(children)) children = [children];\n    return `<${elem_name}${className ? ' class=\"' + className + '\"' : ''} style=\"${inline_style}\" ${Object.entries(kwargs).map(([k, v]) => k + '=\"' + v + '\"').join(' ')}>\\n${children.join(\"\\n\")}\\n</${elem_name}>`;\n}\n\nfunction zip(...arr) {\n    const min_len = Math.min(arr.map(a => a.length));\n    return arr[0].map((_, i) => arr.map(row => row[i]));    // https://stackoverflow.com/a/10284006/10372825\n}\n\nfunction possiblyReversed(do_reverse, arr) {\n    if (do_reverse) arr.reverse();\n    return arr;\n}\n\nfunction budget_react_inital_render() {\n    const inner_html = el('div', null, \n        Object.entries(sections).map(([sec_title, items]) => el('div', `display: flex; flex-direction: column; padding-x: 2rem; border: ${BW}px solid purple;`, [\n            el('div', 'font-size: 4rem; font-weight: 800; z-index: 40;', [sec_title], 'sm-fade-in'),\n            //...Object.values(items).map(({title, description, icon, css, iconLeft, justify, flashbacks}) => el('div', `position: relative; display: flex; align-items: center; min-height: 40vh; margin-bottom: 1em; ${css ?\n            ...Object.values(items).map(({title, description, icon, css, iconLeft, justify, flashbacks}) => el('div', `position: relative; display: flex; align-items: top; min-height: 40vh; margin-bottom: 1em; ${css ?\n                    Object.entries(css).map(([k, v]) => k + ': ' + v).join('; ') : ''}`, [\n                el('div', `justify-content: ${justify ? justify : 'flex-begin'}; width: 100%; display: flex; z-index: 40; border: ${BW}px solid cyan`, possiblyReversed(iconLeft, [\n                    el('div', `max-width: 65ch; display: flex; align-items: center; border: ${BW}px solid orange;`, [\n                        //el('div', `border: ${BW}px solid green; text-align: ${iconLeft? 'left' : 'right'};`, [\n                        el('div', null, [\n                            el('div', 'font-size: 2rem; font-weight: 600; margin-bottom: 1em;',\n                                Array.isArray(title) ? title.map(t => el('div', null, [t], 'sm-fade-in')) : [el('span', null, [title], 'sm-fade-in')]\n                            ),\n                            el('div', null, \n                                Array.isArray(description) ? description.map(d => el('div', 'margin-bottom: 1em;', [DOMPurify.sanitize(marked.parse(d))], 'sm-fade-in'))\n                                : [el('span', null, [DOMPurify.sanitize(marked.parse(description  || ''))], 'sm-fade-in')]\n                            )\n                        ])\n                    ]),\n                    el('div', 'width: 5rem;'), // spacer\n                    icon ? el('div', `min-width: 100px; display: flex; border: ${BW}px solid red; align-items: center; justify-content: center; ${icon.max_width? 'max-width: ' + icon.max_width : ''}`, [icon.svg_el]) : null,\n                ]), 'has-line-art'),\n                ...(flashbacks ? flashbacks.map(({srcs, style, x, y}) => \n                    el('div', `display: inline-block; position: absolute; opacity: 0; left: ${x}vw; bottom: ${y}px; ${Object.entries(style).map(([k, v]) => k + ':' + v + ';').join(' ')};`, [\n                        el('img', `opacity: 0;`, [], 'sm-flashback', { 'src': srcs[0] })\n                    ], 'bg-dark')\n                ) : [])\n            ]))\n        ]))\n    );\n\n    const container = document.getElementById('line-main');\n    container.innerHTML = inner_html;\n}\n\nfunction setup_bg_svg(controller) {\n    const bg = document.getElementById('bg-svg');\n\n    const reset_bg_svg = () => {\n        while (bg.lastChild) bg.removeChild(bg.lastChild);\n        bg.setAttribute('viewBox', `0 0 ${document.documentElement.scrollWidth} ${document.documentElement.scrollHeight}`);\n        bg.setAttribute('width', document.documentElement.scrollWidth);\n        bg.setAttribute('height', document.documentElement.scrollHeight);\n        make_icon_lines_on_bg(controller);\n        make_connecting_lines(controller);\n    }\n\n    // ensure canvas always take up the full background\n    window.addEventListener('resize', reset_bg_svg);\n    reset_bg_svg();\n}\nfunction make_icon_lines_on_bg(controller) {\n    const bg = document.getElementById('bg-svg');\n    const svg_infos = Array.from(Object.values(sections)).map(sec => sec.filter(p => p.hasOwnProperty('icon')).map(p => p.icon)).flat()\n    const paths_to_convert = get_path_els();\n\n    const doc_frag = document.createDocumentFragment();\n    for (let path of paths_to_convert) {\n        // calculate the path transformation\n        const svg = path.parentElement;\n        const bbox = svg.getBoundingClientRect();\n        const scaling_factor = (bbox.right - bbox.left) / svg.viewBox.baseVal.width;\n        const [ off_x, off_y ] = [ svg.viewBox.baseVal.x, svg.viewBox.baseVal.y ]; // og vbox offset\n        const mv_x = v => (v-off_x)*scaling_factor + bbox.x; const mv_y = v => (v-off_y)*scaling_factor + bbox.y;\n        const transform_by_type = {\n            'M': ([x, y]) => [(x-off_x)*scaling_factor + bbox.x, (y-off_y)*scaling_factor + bbox.y],\n            'L': ([x, y]) => [(x-off_x)*scaling_factor + bbox.x, (y-off_y)*scaling_factor + bbox.y],\n            'C': ([x1, y1, x2, y2, x3, y3]) => [mv_x(x1), mv_y(y1), mv_x(x2), mv_y(y2), mv_x(x3), mv_y(y3)],\n            'H': ([x]) => [(x-off_x)*scaling_factor + bbox.x],\n            'V': ([y]) => [(y-off_y)*scaling_factor + bbox.y],\n        }\n\n        // create and transform all the paths\n        const new_path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n        new_path.setPathData(path.getPathData().map(\n            ({ type, values }) => ({ type, values: transform_by_type.hasOwnProperty(type) ? transform_by_type[type](values) : values })\n        ));\n        //new_path.setAttribute('stroke-width', path.getAttribute('stroke-width') * scaling_factor);    // keep original stroke from svg\n        new_path.setAttribute('stroke-width', STROKE_WIDTH);                                                     // reset all stroke to 5\n        new_path.setAttribute('stroke', LINE_COLOR);\n        new_path.setAttribute('fill', 'none')\n        new_path.setAttribute('stroke-linejoin', 'round')\n\n        const len = new_path.getTotalLength();\n        new_path.style.strokeDasharray = len;\n        new_path.style.strokeDashoffset = len;\n\n        new_path.classList.add(\"flattened-icon-path\");\n        for (let cls of path.classList) new_path.classList.add(cls);\n        doc_frag.appendChild(new_path);\n\n        svg.style.opacity = '0'; // hide the old one generated by budget-react\n\n        // setup scrollmagic\n        new ScrollMagic.Scene({\n            offset: bbox.top - GET_SCROLLMAGIC_OFFSET_DELAY(),\n            duration: bbox.bottom - bbox.top,\n            tweenChanges: true,\n        })\n            .setTween(new TweenMax.to(new_path, 0.1, { strokeDashoffset: 0, ease: Power2.easeOut }))\n            .triggerHook(ICON_TRIGGER_HOOK)\n            .addTo(controller)\n    }\n\n    // create header line\n    (() => {\n        const next_pos = [doc_frag.children[0].getPointAtLength(0).x, document.documentElement.clientHeight+1];\n        const prev_pos = [next_pos[0], GET_SCROLLMAGIC_OFFSET_DELAY()];\n\n        const init_thread_base = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n        init_thread_base.setAttribute('d', `M ${prev_pos.join(',')} L ${next_pos.join(',')}`);    // bezier\n        init_thread_base.setAttribute('stroke-width', STROKE_WIDTH);\n        init_thread_base.setAttribute('stroke', PRIMARY_COLOR);\n        init_thread_base.setAttribute('fill', 'none');\n        bg.prepend(init_thread_base);\n\n        const init_thread = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n        init_thread.setAttribute('d', `M ${prev_pos.join(',')} L ${next_pos.join(',')}`);    // bezier\n        init_thread.setAttribute('stroke-width', STROKE_WIDTH);\n        init_thread.setAttribute('stroke', LINE_COLOR);\n        init_thread.setAttribute('fill', 'none');\n        const len = init_thread.getTotalLength();\n        init_thread.style.strokeDasharray = len;\n        init_thread.style.strokeDashoffset = len;\n        init_thread.classList.add('flattened-icon-path')\n        doc_frag.prepend(init_thread);\n        new ScrollMagic.Scene({\n            offset: - GET_SCROLLMAGIC_OFFSET_DELAY()/2,   // should equal zero\n            duration: next_pos[1] - prev_pos[1] + GET_SCROLLMAGIC_OFFSET_DELAY()/2,\n            tweenChanges: true,\n        })\n            .setTween(new TweenMax.to(init_thread, 0.1, { strokeDashoffset: 0, ease: Power2.easeInOut }))\n            .triggerHook(TRIGGER_HOOK)\n            .addTo(controller)\n    })();\n\n\n    // create footer line\n    (() => {\n        const bbox = document.getElementById('footer-line-spacer').getBoundingClientRect();\n        const prev_pos = [window.scrollX + bbox.right, window.scrollY + document.getElementById('footer-line-spacer').parentElement.getBoundingClientRect().top];\n        const next_pos = [window.scrollX + bbox.left,  window.scrollY + (bbox.bottom + bbox.top) / 2]\n\n\n        const init_thread = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n        init_thread.setAttribute('d', `M ${prev_pos.join(',')} L ${prev_pos[0]} ${next_pos[1]} L ${next_pos.join(',')}`);    // bezier\n        init_thread.setAttribute('stroke-width', STROKE_WIDTH);\n        init_thread.setAttribute('stroke', LINE_COLOR);\n        init_thread.setAttribute('fill', 'none');\n\n        const len = init_thread.getTotalLength();\n        init_thread.style.strokeDasharray = len;\n        init_thread.style.strokeDashoffset = len;\n        init_thread.classList.add(\"flattened-icon-path\");\n        doc_frag.appendChild(init_thread);\n        new ScrollMagic.Scene({\n            offset: prev_pos[1] - GET_SCROLLMAGIC_OFFSET_DELAY(),\n            duration: document.documentElement.clientHeight * TRIGGER_HOOK/2,\n            tweenChanges: true,\n        })\n            .setTween(new TweenMax.to(init_thread, 0.1, { strokeDashoffset: 0, ease: Power1.easeOut }))\n            .triggerHook(TRIGGER_HOOK)\n            .addTo(controller)\n    })();\n    bg.appendChild(doc_frag);\n}\nfunction make_connecting_lines(controller) {\n    const bg = document.getElementById('bg-svg');\n    const icon_paths = Array.from(document.querySelectorAll('.flattened-icon-path')).filter(p => { return !p.classList.contains('sm-connector-skip') });\n\n    const connections = document.createDocumentFragment();\n\n    // create other lines\n    for (let i=1; i<icon_paths.length; i++) {\n        const prev_path = icon_paths[i-1];\n        const next_path = icon_paths[i];\n        const prev_pos = (() => { const p = prev_path.getPointAtLength(prev_path.getTotalLength()); return [p.x, p.y]; })();    // no operator.itemgetter :(\n        const next_pos = (() => { const p = next_path.getPointAtLength(0); return [p.x, p.y]; })();\n        const vertical_half_way = (prev_pos[1] + next_pos[1]) / 2;\n\n        // create the connecting path and add it to the DOM\n        const connector = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n        //connector.setAttribute('d', `M ${prev_pos.join(',')} L ${next_pos.join(',')}`);    // straight line\n        if (next_pos[1] - prev_pos[1] > Math.abs(next_pos[0] - prev_pos[0])) { // taller than it is wide\n            connector.setAttribute('d', `M ${prev_pos.join(',')} C ${prev_pos[0]},${vertical_half_way} ${next_pos[0]},${vertical_half_way} ${next_pos.join(',')}`);    // bezier with control points at half way\n        } else {\n            connector.setAttribute('d', `M ${prev_pos.join(',')} C ${prev_pos[0]},${next_pos[1]} ${next_pos[0]},${prev_pos[1]} ${next_pos.join(',')}`);    // bezier with control points at opposite rect corners\n        }\n        connector.setAttribute('stroke-width', STROKE_WIDTH);\n        connector.setAttribute('stroke', LINE_COLOR);\n        connector.setAttribute('fill', 'none');\n\n        // from source of https://scrollmagic.io/examples/advanced/svg_drawing.html\n        const len = connector.getTotalLength();\n        connector.style.strokeDasharray = len;\n        connector.style.strokeDashoffset = len;\n\n        connections.appendChild(connector);\n\n        // create tween and register scene\n        new ScrollMagic.Scene({\n            offset: prev_pos[1] - GET_SCROLLMAGIC_OFFSET_DELAY(),\n            duration: next_pos[1] - prev_pos[1],\n            tweenChanges: true,\n        })\n            .setTween(new TweenMax.to(connector, 0.1, { strokeDashoffset: 0, ease: Power2.easeIn }))\n            .triggerHook(ICON_TRIGGER_HOOK)\n            .addTo(controller)\n    }\n\n    bg.appendChild(connections);\n}\n\nfunction setup_scrollmagic_for_flashback_images(controller) {\n    const flashbacks = Array.from(document.getElementsByClassName('sm-flashback'));\n    const flash_infos = Array.from(Object.values(sections)).map(sec => sec.filter(p => p.hasOwnProperty('flashbacks')).map(p => p.flashbacks).flat()).flat();\n    console.assert(flashbacks.length == flash_infos.length);\n\n    zip(flashbacks, flash_infos).map(([el, info]) => {\n        const tweenState = { idx: 0 };  // https://scrollmagic.io/examples/expert/image_sequence.html\n        const duration_px = el.parentElement.parentElement.clientHeight * 0.8;\n\n        return new ScrollMagic.Scene({\n            triggerElement: el.parentElement.parentElement,\n            duration: duration_px,\n            tweenChanges: true,\n        })\n        .setTween(new TimelineMax()\n            .to(tweenState, 0.2, {\n                idx: info.srcs.length-1,    // animate to the full length\n                roundProps: 'idx',          // round idx to nearest int\n                immediateRender: true,      // force re-render (is this a reflow? todo-optm)\n                ease: Power1.easeInOut,\n                onUpdate: () => { el.setAttribute('src', info.srcs[tweenState.idx]) }\n            })\n            .add(new TimelineMax()  // image opacity\n                .to(el, 0.1, { opacity: info.peak_opacity || 0.3, ease: Power2.easeOut })\n                .to(el, 0.1, { opacity: 0,                        ease: Power2.easeIn })\n                , 0 // set start pos to zero to start animations in parallel\n            )\n            .add(new TimelineMax()  // background opacity\n                .to(el.parentElement, 0.1, { opacity: 1, ease: Power2.easeOut })\n                .to(el.parentElement, 0.1, { opacity: 0, ease: Power2.easeIn })\n                , 0 // set start pos to zero to start animations in parallel\n            )\n            .add(new TimelineMax()  // paralax\n                .to(el.parentElement, 0.2, { bottom: info.y - duration_px* (info.distance || 0.3), ease: Linear.easeNone })\n                , 0\n            )\n        )\n        .triggerHook(info.scrollTrigger || FLASHBACK_TRIGGER_HOOK)\n        .addTo(controller)\n    });\n}\n\nfunction setup_scrollmagic(controller) {\n    const to_fade_in = Array.from(document.getElementsByClassName('sm-fade-in'));\n    to_fade_in.map(el => new ScrollMagic.Scene({\n        triggerElement: el,\n        duration: el.clientHeight,\n        tweenChanges: true,\n    })\n        .setTween(new TweenMax.from(el, 0.1, { opacity: 0, ease: Linear.linear }))\n        .triggerHook(TRIGGER_HOOK)\n        .addTo(controller)\n    );\n}\n\nasync function preload_flashback_images() {\n    const urls = Array.from(Object.values(sections))\n        .map(sec => sec.filter(p => p.hasOwnProperty('flashbacks')).map(p => p.flashbacks).flat()).flat()\n        .map(info => info.srcs).flat()  // all the image urls\n        //.map(url => { const img = new Image(); img.src = url; return img; });\n\n    async function recursive_sequential_loader(urls, idx) {\n        return new Promise((res, rej) => {\n            const img = new Image();\n            img.onload = async () => { res(idx+1 == urls.length ? (0,immutable__WEBPACK_IMPORTED_MODULE_0__.List)([img]) : (await recursive_sequential_loader(urls, idx+1)).push(img)); };\n            img.src = urls[idx];\n        });\n    }\n    return await recursive_sequential_loader(urls, 0);\n}\n\nfunction main() {\n    const images = preload_flashback_images();\n    budget_react_inital_render();\n    const controller = new ScrollMagic.Controller();\n    setup_scrollmagic(controller);\n    setup_bg_svg(controller);\n    setup_scrollmagic_for_flashback_images(controller);\n\n    images.then((imgs) => { console.log(\"loaded\", imgs.size, \"images sequentially\") });\n\n    (() => {\n        // scroll to the place where they left off\n        const start_scrollpos = localStorage.getItem('leave_scroll_pos')\n            .split(',').map(parseFloat) || [0, 0];\n        window.scrollTo(...start_scrollpos);\n\n        // scroll for them if they don't do anything\n        const timeout = setTimeout(() => {\n            const pos = GET_SCROLLMAGIC_OFFSET_DELAY();\n            if (window.scrollY < pos)\n                window.scrollTo({ top: pos, left: 0, behavior: 'smooth' });\n        }, 3 * 1000);\n        document.addEventListener('scroll', () => { clearTimeout(timeout); }, { once: true });\n    })();\n}\n\ndocument.addEventListener('DOMContentLoaded', main);\nwindow.onbeforeunload = function () {\n    localStorage.setItem('leave_scroll_pos', [ window.scrollX, window.scrollY ]);\n    window.scrollTo(0, 0);\n}\n\n\n\n\n//# sourceURL=webpack:///./src/index.mjs?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.mjs");
/******/ 	
/******/ })()
;